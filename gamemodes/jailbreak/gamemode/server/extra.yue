Jailbreak = Jailbreak

ENTITY = FindMetaTable( "Entity" )
:random, :max, :Rand = math
timer_Simple = timer.Simple
:FixModelPath = Jailbreak
hook_Add = hook.Add
CurTime = CurTime
GM = GM

GM.OnEntityWaterLevelChanged = ( entity, old, new ) =>
    if new >= 2
        if entity\IsOnFire!
            entity\Extinguish!

        if old < new and new == 3 and entity\IsPlayer! and entity\Alive!
            entity.DrownDamageTime = CurTime! + random( 15, 45 )

do

    vector_origin = vector_origin
    DamageInfo = DamageInfo
    LerpVector = LerpVector
    DMG_DROWN = DMG_DROWN

    GM.PlayerPostThink = ( ply ) =>
        unless ply\Alive!
            return

        if ply\IsUnderwater! and ( ply.DrownDamageTime or 0 ) < CurTime!
            ply.DrownDamageTime = CurTime! + 0.5

            damageInfo = DamageInfo!
            damageInfo\SetDamageType( DMG_DROWN )
            damageInfo\SetDamageForce( vector_origin )
            damageInfo\SetAttacker( ply )
            damageInfo\SetDamage( max( 5, ply\Health! * 0.1 ) )
            damageInfo\SetDamagePosition( ply\GetPos! )
            ply\EmitSound( "Player.DrownContinue" )
            ply\TakeDamageInfo( damageInfo )

        if ply\IsBot!
            return

        state = ply\HasSecurityRadio! and ply\GetInfo( "jb_security_radio" ) == "1"
        if state ~= ply\GetNW2Bool( "using-security-radio" )
            ply\SetNW2Bool( "using-security-radio", state )

        if ( ply.NextEyeTargetTime or 0 ) < CurTime!
            ply.NextEyeTargetTime = CurTime! + 0.1

            traceResult = ply\GetEyeTrace!
            if traceResult.Hit
                nextEyePos = LerpVector( 0.5, ply.LastEyePos or vector_origin, traceResult.HitPos )
                ply\SetEyeTarget( nextEyePos )
                ply.LastEyePos = nextEyePos

do

    :ShockCollarEffect, :SendChatText = Jailbreak
    CHAT_CUSTOM = CHAT_CUSTOM
    :GetAll = player

    GM.ShockCollars = ( bool ) =>
        receivers = {}
        for ply in *GetAll!
            if ply\Alive! and ply\HasShockCollar!
                unless ply\IsBot!
                    receivers[] = ply

                ShockCollarEffect( ply )

        SendChatText( receivers, false, CHAT_CUSTOM, bool and "#jb.notify.shock-collar.on" or "#jb.notify.shock-collar.off" )

do

    EntityReplacer = EntityReplacer

    if EntityReplacer ~= nil

        :lower, :find = string
        :IsValidModel = util

        replaceFilter = nil
        do

            isstring = isstring
            isnumber = isnumber
            istable = istable

            replaceFilter = ( modelName, chance ) ->
                unless isnumber( chance )
                    chance = nil

                if isstring( modelName )
                    modelName = lower( modelName )
                elseif istable( modelName )
                    tbl = {}
                    for str in *modelName
                        tbl[ lower( str ) ] = true

                    modelName = tbl
                else
                    return =>
                        return not chance or random( 1, 100 ) <= chance

                return =>
                    modelPath = @GetModel!
                    unless modelPath
                        return false

                    modelPath = FixModelPath( modelPath )
                    unless IsValidModel( modelPath )
                        return false

                    if istable( modelName )
                        unless modelName[ modelPath ]
                            return false
                    else
                        unless find( modelPath, modelName, 1, false )
                            return false

                    return not chance or random( 1, 100 ) <= chance

        entityReplaces = {

            -- https://steamcommunity.com/sharedfiles/filedetails/?id=293904092
            ["293904092"]: ->
                EntityReplacer "^prop_physics.*", "sent_soccerball", replaceFilter( "models/props_phx/misc/soccerball%.mdl" )

            -- https://steamcommunity.com/sharedfiles/filedetails/?id=931376012
            ["931376012"]: ->
                EntityReplacer "^prop_physics.*", "sent_jetpack", replaceFilter( "models/props_junk/%w+%.mdl", 2 ), =>
                    @SetSlotName( @GetClass! )

            -- https://steamcommunity.com/sharedfiles/filedetails/?id=931448005
            ["931448005"]: ->
                EntityReplacer "^prop_physics.*", "sent_grapplehook_bpack", replaceFilter( "models/props_junk/%w+%.mdl", 5 ), =>
                    @SetSlotName( @GetClass! )

                    timer_Simple 0, ->
                        if @IsValid!
                            @SetKey( 12 )

        }

        -- Reading a custom replaces
        do

            file.CreateDir( "jailbreak" )

            fileName = "jailbreak/entity-replacer.json"
            if file.Exists( fileName, "DATA" )
                json = file.Read( fileName, "DATA" )
                if isstring( json )
                    data = util.JSONToTable( json )
                    if istable( data )
                        for key, value in pairs( data )
                            entityReplaces[ key ] = ->
                                return EntityReplacer value[ 1 ], value[ 2 ], replaceFilter( value[ 3 ], value[ 4 ] )

            else
                file.Write( fileName, "[]" )

        global ReplaceFilterByModel = replaceFilter
        Jailbreak.EntityReplaces = entityReplaces

        timer_Simple 0, ->
            for addon in *engine.GetAddons!
                unless addon.downloaded and addon.mounted
                    continue

                func = entityReplaces[ addon.wsid ]
                unless func
                    continue

                func( addon )

do

    foodModels = Jailbreak.FoodModels
    unless foodModels
        foodModels = {
            -- GMOD
            "models/food/burger.mdl"
            "models/food/hotdog.mdl"

            -- HL2
            "models/props_c17/doll01.mdl"
            "models/props_junk/garbage_glassbottle001a.mdl"
            "models/props_junk/garbage_glassbottle002a.mdl"
            "models/props_junk/garbage_glassbottle003a.mdl"
            "models/props_junk/garbage_milkcarton002a.mdl"
            "models/props_junk/garbage_milkcarton001a.mdl"
            "models/props_junk/garbage_plasticbottle003a.mdl"
            "models/props_junk/garbage_takeoutcarton001a.mdl"
            "models/props_junk/GlassBottle01a.mdl"
            "models/props_junk/glassjug01.mdl"
            "models/props_junk/watermelon01.mdl"
            "models/props_junk/Shoe001a.mdl"

            -- CSS
            "models/props/CS_militia/bottle01.mdl"
            "models/props/CS_militia/bottle02.mdl"
            "models/props/CS_militia/bottle03.mdl"
            "models/props/cs_office/Snowman_nose.mdl"
            "models/props/cs_office/trash_can_p8.mdl"
            "models/props/cs_office/Water_bottle.mdl"
            "models/props/cs_italy/bananna.mdl"
            "models/props/cs_italy/bananna_bunch.mdl"
            "models/props/cs_italy/banannagib1.mdl"
            "models/props/cs_italy/banannagib2.mdl"
            "models/props/cs_italy/orange.mdl"
            "models/props/cs_italy/orangegib1.mdl"
            "models/props/cs_italy/orangegib2.mdl"
            "models/props/cs_italy/orangegib3.mdl"
            "models/props/de_inferno/crate_fruit_break_gib1.mdl"
            "models/props/de_inferno/crate_fruit_break_gib2.mdl"
            "models/props/de_inferno/crate_fruit_break_gib3.mdl"
            "models/props/de_inferno/goldfish.mdl"

        }

        Jailbreak.FoodModels = foodModels

    hook_Add "PostGamemodeLoaded", "Jailbreak::LoadFoodModels", ->
        for index = 1, #foodModels
            foodModels[ index ] = FixModelPath( foodModels[ index ] )

    :IsValidModel = util
    cache = {}

    Jailbreak.IsFoodModel = ( modelName ) ->
        unless modelName
            return false

        cached = cache[ modelName ]
        if cached ~= nil
            return cached

        fixedModelPath = FixModelPath( modelName )
        unless IsValidModel( fixedModelPath )
            cache[ modelName ] = false
            return false

        for modelPath in *foodModels
            if fixedModelPath == modelPath
                cache[ modelName ] = true
                return true

do

    foodEatingSound = Sound( "player/eating.wav" )
    :IsFoodModel, :FoodEatingTime = Jailbreak
    CHAN_STATIC = CHAN_STATIC
    :Clamp, :floor = math

    hook_Add "OnEntityCreated", "Jailbreak::FoodEntities", =>
        unless @IsProp!
            return

        timer_Simple 0, ->
            if @IsValid! and IsFoodModel( @GetModel! )
                @SetNW2Bool( "is-food", true )

    cache = {}

    hook_Add "PlayerHoldUse", "Jailbreak::FoodEating", ( entity, useTime ) =>
        if useTime < FoodEatingTime\GetFloat! or not entity\IsProp!
            return

        modelPath = entity\GetModel!
        unless IsFoodModel( modelPath )
            return

        healing = cache[ modelPath ]
        unless healing
            mins, maxs = entity\GetCollisionBounds!
            healing = Clamp( mins\Distance( maxs ) / 64, 0, 1 )
            cache[ modelPath ] = healing

        maxHealth = @GetMaxHealth!
        @SetHealth( Clamp( @Health! + floor( maxHealth * healing ), 0, maxHealth ) )

        @EmitSound( foodEatingSound, 50, random( 80, 120 ), Rand( 0.6, 1 ), CHAN_STATIC, 0, 1 )
        entity\Remove!
        return true

do

    lootSound = Sound( "npc/footsteps/softshoe_generic6.wav" )
    :LootRagdoll, :RagdollLootingTime = Jailbreak

    hook_Add "PlayerHoldUse", "Jailbreak::RagdollLooting", ( entity, useTime ) =>
        if useTime < RagdollLootingTime\GetFloat!
            return

        unless entity\IsPlayerRagdoll! or entity\IsRagdoll!
            return

        entity\EmitSound( lootSound, 60, random( 80, 120 ), Rand( 0.7, 1 ), CHAN_STATIC, 0, 1 )
        LootRagdoll( @, entity )
        return true

-- Silly death animations
do

    GESTURE_SLOT_CUSTOM = GESTURE_SLOT_CUSTOM
    ACT_GMOD_DEATH = ACT_GMOD_DEATH

    whitelist = { DMG_BULLET, DMG_CLUB, DMG_SHOCK, DMG_POISON, DMG_PARALYZE, DMG_NERVEGAS, DMG_BUCKSHOT, DMG_SNIPER }
    :DeathAnimations = Jailbreak
    :band = bit

    hook_Add "PlayerTakeDamage", "Jailbreak::Death Animations", ( damageInfo, teamID ) =>
        if not DeathAnimations\GetBool! or @GetNW2Int( "death-animation" ) == 1
            return

        damage = damageInfo\GetDamage!
        if max( 0, @Health! - damage ) > 0
            return

        supported, damageType = false, damageInfo\GetDamageType!
        for whitelistType in *whitelist
            if band( damageType, whitelistType ) == whitelistType
                supported = true
                break

        unless supported
            return

        inflictor = damageInfo\GetInflictor!
        attacker = damageInfo\GetAttacker!

        ammoType = damageInfo\GetAmmoType!

        reportedOrigin = damageInfo\GetReportedPosition!
        origin = damageInfo\GetDamagePosition!

        @SetNW2Int( "death-animation", 2 )
        @SetNotSolid( true )
        @SetHealth( 0 )

        @AnimRestartNetworkedGesture GESTURE_SLOT_CUSTOM, ACT_GMOD_DEATH, true, =>
            if @GetNW2Int( "death-animation" ) ~= 2
                return

            @SetNW2Int( "death-animation", 1 )
            @SetNotSolid( false )

            if @Alive!
                damageInfo = DamageInfo!
                damageInfo\SetDamage( damage )

                if inflictor\IsValid!
                    damageInfo\SetInflictor( inflictor )

                if attacker\IsValid!
                    damageInfo\SetAttacker( attacker )

                damageInfo\SetDamageType( damageType )

                if ammoType > 0
                    damageInfo\SetAmmoType( ammoType )

                damageInfo\SetReportedPosition( reportedOrigin )
                damageInfo\SetDamagePosition( origin )

                @TakeDamageInfo( damageInfo )

            @SetNW2Int( "death-animation", 0 ),
            Rand( 0.1, 0.25 )

        return true

    hook_Add "PlayerSpawn", "Jailbreak::Death Animations", =>
        @SetNW2Int( "death-animation", 0 )

-- Guard Death
do

    :IsRoundRunning, :PlaySound, :GetTeamPlayersCount, :GuardsDeathSound = Jailbreak

    hook.Add "PlayerDeath", "Jailbreak::First Blood", =>
        unless GuardsDeathSound\GetBool! and IsRoundRunning! and @IsGuard! and GetTeamPlayersCount( true, TEAM_GUARD )[ 1 ] ~= 0
            return

        PlaySound( "ambient/alarms/klaxon1.wav" )

-- TF2 Freezecam
do

    OBS_MODE_FREEZECAM = OBS_MODE_FREEZECAM
    OBS_MODE_CHASE = OBS_MODE_CHASE
    :TF2Freezecam = Jailbreak

    hook.Add "PlayerDeath", "Jailbreak::TF2 Freezecam", ( _, attacker ) =>
        unless TF2Freezecam\GetBool!
            return

        timer_Simple 0, ->
            unless @IsValid!
                return

            unless IsValid( attacker )
                return

            if attacker\IsPlayer!
                if not attacker\Alive! or attacker == @
                    return

            elseif attacker\IsSolid! or attacker\GetNoDraw!
                return

            @Spectate( OBS_MODE_FREEZECAM )
            @SpectateEntity( attacker )

            timer_Simple 1.5, ->
                unless @IsValid!
                    return

                @Spectate( OBS_MODE_CHASE )

-- Door hacks
do

    :GetInternalVariable, :GetNW2Int, :SetNW2Int = ENTITY
    :FindByClass = ents

    hook_Add "Think", "Jailbreak::DoorState", ->
        for entity in *FindByClass( "prop_door_rotating" )
            state = GetInternalVariable( entity, "m_eDoorState" )
            if GetNW2Int( entity, "m_eDoorState" ) ~= state
                SetNW2Int( entity, "m_eDoorState", state )

-- Developer
hook_Add "PlayerInitialSpawn", "Jailbreak::Developer", =>
    if @IsBot!
        return

    if @SteamID64! == "76561198100459279"
        @SetNW2Bool( "is-developer", true )
