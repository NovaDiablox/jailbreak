ENTITY, PLAYER = ENTITY, PLAYER
Jailbreak = Jailbreak

:Clamp, :Rand, :random, :min, :max, :floor = math
:IsValid, :GetNW2Var, :SetNW2Var = ENTITY
:FixModelPath = Jailbreak
:Alive, :IsBot = PLAYER
:IsValidModel = util
:Simple = timer
:Add = hook

Add( "PlayerPostThink", "Jailbreak::SecurityRadio", =>
    if Alive( @ ) and not IsBot( @ )
        state = @HasSecurityRadio! and @GetInfo( "jb_security_radio" ) == "1"
        if state == GetNW2Var( @, "using-security-radio" )
            return

        SetNW2Var( @, "using-security-radio", state )

PRE_HOOK )

Simple 0, ->
    :Call = hook
    for addon in *engine.GetAddons!
        if addon.downloaded and addon.mounted
            Call( "WorkshopItemFound", nil, addon.wsid )

if EntityReplacer ~= nil
    :lower, :find = string
    isstring = isstring
    istable = istable

    global ReplaceFilterByModel = ( modelName ) ->
        if isstring( modelName )
            modelName = lower( modelName )
        elseif istable( modelName )
            tbl = {}
            for str in *modelName
                tbl[ lower( str ) ] = true

            modelName = tbl
        else
            return =>
                return true

        return =>
            modelPath = @GetModel!
            unless modelPath
                return false

            modelPath = FixModelPath( modelPath )
            unless IsValidModel( modelPath )
                return false

            if istable( modelName )
                return modelName[ modelPath ]

            return find( modelPath, modelName, 1, false ) ~= nil

    -- https://steamcommunity.com/sharedfiles/filedetails/?id=293904092
    Add "WorkshopItemFound", "Jailbreak::sent_soccerball - Replace", ( wsid ) ->
        if wsid ~= "293904092"
            return

        EntityReplacer( "^prop_physics.*", "sent_soccerball", ReplaceFilterByModel( "models/props_phx/misc/soccerball%.mdl" ) )
        return

-- https://steamcommunity.com/sharedfiles/filedetails/?id=293904092
Add "WorkshopItemFound", "Jailbreak::sent_soccerball - Shop", ( wsid ) ->
    if wsid ~= "293904092"
        return

    Add "ShopItems", "Jailbreak::sent_soccerball", ( add ) ->
        add "sent_soccerball", "models/props_phx/misc/soccerball.mdl", 10, =>
            return IsValid( @SpawnEntity( "sent_soccerball" ) )

        return

-- https://steamcommunity.com/sharedfiles/filedetails/?id=931448005
Add "WorkshopItemFound", "Jailbreak::sent_grapplehook_bpack - Shop", ( wsid ) ->
    if wsid ~= "931448005"
        return

    Add "ShopItems", "Jailbreak::sent_grapplehook_bpack", ( add ) ->
        add "sent_grapplehook_bpack", "models/props_phx/wheels/magnetic_small.mdl", 25, =>
            entity = @SpawnEntity( "sent_grapplehook_bpack", => @SetSlotName( "movement" ) )
            if IsValid( entity )
                entity\SetKey( KEY_B )
                return true

            return false

        return

-- https://steamcommunity.com/sharedfiles/filedetails/?id=931376012
Add "WorkshopItemFound", "Jailbreak::sent_jetpack - Shop", ( wsid ) ->
    if wsid ~= "931376012"
        return

    Add "ShopItems", "Jailbreak::sent_jetpack", ( add ) ->
        add "sent_jetpack", "models/thrusters/jetpack.mdl", 30, =>
            return IsValid( @SpawnEntity( "sent_jetpack", => @SetSlotName( "movement" ) ) )

        return

-- https://steamcommunity.com/sharedfiles/filedetails/?id=546392647
Add "WorkshopItemFound", "Jailbreak::mediaplayer_tv - Shop", ( wsid ) ->
    if wsid ~= "546392647"
        return

    Add "ShopItems", "Jailbreak::mediaplayer_tv", ( add ) ->
        add "mediaplayer_tv", "models/gmod_tower/suitetv_large.mdl", 45, =>
            entity = @SpawnEntity( "mediaplayer_tv" )
            if IsValid( entity )
                phys = entity\GetPhysicsObject!
                if phys and phys\IsValid!
                    phys\EnableMotion( true )
                    phys\SetMass( 35 )
                    phys\Wake!

                return true

            return false

        return

do

    foodModels = Jailbreak.FoodModels
    unless foodModels
        foodModels = {
            -- GMOD
            "models/food/burger.mdl"
            "models/food/hotdog.mdl"

            -- HL2
            "models/props_c17/doll01.mdl"
            "models/props_junk/garbage_glassbottle001a.mdl"
            "models/props_junk/garbage_glassbottle002a.mdl"
            "models/props_junk/garbage_glassbottle003a.mdl"
            "models/props_junk/garbage_milkcarton002a.mdl"
            "models/props_junk/garbage_milkcarton001a.mdl"
            "models/props_junk/garbage_plasticbottle003a.mdl"
            "models/props_junk/garbage_takeoutcarton001a.mdl"
            "models/props_junk/GlassBottle01a.mdl"
            "models/props_junk/glassjug01.mdl"
            "models/props_junk/watermelon01.mdl"
            "models/props_junk/Shoe001a.mdl"

            -- CSS
            "models/props/CS_militia/bottle01.mdl"
            "models/props/CS_militia/bottle02.mdl"
            "models/props/CS_militia/bottle03.mdl"
            "models/props/cs_office/Snowman_nose.mdl"
            "models/props/cs_office/trash_can_p8.mdl"
            "models/props/cs_office/Water_bottle.mdl"
            "models/props/cs_italy/bananna.mdl"
            "models/props/cs_italy/bananna_bunch.mdl"
            "models/props/cs_italy/banannagib1.mdl"
            "models/props/cs_italy/banannagib2.mdl"
            "models/props/cs_italy/orange.mdl"
            "models/props/cs_italy/orangegib1.mdl"
            "models/props/cs_italy/orangegib2.mdl"
            "models/props/cs_italy/orangegib3.mdl"
            "models/props/de_inferno/crate_fruit_break_gib1.mdl"
            "models/props/de_inferno/crate_fruit_break_gib2.mdl"
            "models/props/de_inferno/crate_fruit_break_gib3.mdl"
            "models/props/de_inferno/goldfish.mdl"

        }

        Jailbreak.FoodModels = foodModels

    Add "PostGamemodeLoaded", "Jailbreak::LoadFoodModels", ->
        for index = 1, #foodModels
            foodModels[ index ] = FixModelPath( foodModels[ index ] )

    cache = {}

    Jailbreak.IsFoodModel = ( modelName ) ->
        unless modelName
            return false

        cached = cache[ modelName ]
        if cached ~= nil
            return cached

        fixedModelPath = FixModelPath( modelName )
        unless IsValidModel( fixedModelPath )
            cache[ modelName ] = false
            return false

        for modelPath in *foodModels
            if fixedModelPath == modelPath
                cache[ modelName ] = true
                return true

do

    foodEatingSound = Sound( "player/eating.wav" )
    :IsFoodModel, :FoodEatingTime = Jailbreak
    CHAN_STATIC = CHAN_STATIC

    Add "OnEntityCreated", "Jailbreak::FoodEntities", =>
        unless @IsProp!
            return

        Simple 0, ->
            if IsValid( @ ) and IsFoodModel( @GetModel! )
                SetNW2Var( @, "is-food", true )

    cache = {}

    Add "PlayerHoldUse", "Jailbreak::FoodEating", ( entity, useTime ) =>
        if useTime < FoodEatingTime\GetFloat! or not entity\IsProp!
            return

        modelPath = entity\GetModel!
        unless IsFoodModel( modelPath )
            return

        healing = cache[ modelPath ]
        unless healing
            mins, maxs = entity\GetCollisionBounds!
            healing = Clamp( mins\Distance( maxs ) / 64, 0, 1 )
            cache[ modelPath ] = healing

        maxHealth = @GetMaxHealth!
        @SetHealth( Clamp( @Health! + floor( maxHealth * healing ), 0, maxHealth ) )

        @EmitSound( foodEatingSound, 50, random( 80, 120 ), Rand( 0.6, 1 ), CHAN_STATIC, 0, 1 )
        entity\Remove!
        return true

do

    lootSound = Sound( "npc/footsteps/softshoe_generic6.wav" )
    :RagdollLootingTime = Jailbreak

    Add "PlayerHoldUse", "Jailbreak::RagdollLooting", ( entity, useTime ) =>
        if useTime < RagdollLootingTime\GetFloat!
            return

        unless entity\IsPlayerRagdoll! or entity\IsRagdoll!
            return

        entity\EmitSound( lootSound, 60, random( 80, 120 ), Rand( 0.7, 1 ), CHAN_STATIC, 0, 1 )
        @LootRagdoll( entity )
        return true

-- Silly death animations
do

    GESTURE_SLOT_CUSTOM = GESTURE_SLOT_CUSTOM
    ACT_GMOD_DEATH = ACT_GMOD_DEATH
    DamageInfo = DamageInfo

    whitelist = { DMG_BULLET, DMG_CLUB, DMG_SHOCK, DMG_POISON, DMG_PARALYZE, DMG_NERVEGAS, DMG_BUCKSHOT, DMG_SNIPER }
    :DeathAnimations = Jailbreak
    :band = bit

    Add "PlayerTakeDamage", "Jailbreak::Death Animations", ( damageInfo, teamID ) =>
        if not DeathAnimations\GetBool! or GetNW2Var( @, "death-animation" ) == 1
            return

        damage = damageInfo\GetDamage!
        if max( 0, @Health! - damage ) > 0
            return

        supported, damageType = false, damageInfo\GetDamageType!
        for whitelistType in *whitelist
            if band( damageType, whitelistType ) == whitelistType
                supported = true
                break

        unless supported
            return

        inflictor = damageInfo\GetInflictor!
        attacker = damageInfo\GetAttacker!

        ammoType = damageInfo\GetAmmoType!

        reportedOrigin = damageInfo\GetReportedPosition!
        origin = damageInfo\GetDamagePosition!

        SetNW2Var( @, "death-animation", 2 )
        @SetNotSolid( true )
        @SetHealth( 0 )
        @DropToFloor!

        @AnimRestartNetworkedGesture GESTURE_SLOT_CUSTOM, ACT_GMOD_DEATH, true, =>
            if GetNW2Var( @, "death-animation" ) ~= 2
                return

            SetNW2Var( @, "death-animation", 1 )
            @SetNotSolid( false )

            if Alive( @ )
                damageInfo = DamageInfo!
                damageInfo\SetDamage( damage )

                if IsValid( inflictor )
                    damageInfo\SetInflictor( inflictor )

                if IsValid( attacker )
                    damageInfo\SetAttacker( attacker )

                damageInfo\SetDamageType( damageType )

                if ammoType > 0
                    damageInfo\SetAmmoType( ammoType )

                damageInfo\SetReportedPosition( reportedOrigin )
                damageInfo\SetDamagePosition( origin )

                @TakeDamageInfo( damageInfo )

            SetNW2Var( @, "death-animation", 0 ),
            Rand( 0.1, 0.25 )

        return true

    Add "PlayerSpawn", "Jailbreak::Death Animations", =>
        SetNW2Var( @, "death-animation", 0 )

-- Guard Death
do

    :IsRoundRunning, :PlaySound, :GetTeamPlayersCount, :GuardsDeathSound = Jailbreak

    Add "PlayerDeath", "Jailbreak::First Blood", =>
        unless GuardsDeathSound\GetBool! and IsRoundRunning! and @IsGuard! and GetTeamPlayersCount( true, TEAM_GUARD )[ 1 ] ~= 0
            return

        PlaySound( "ambient/alarms/klaxon1.wav" )

-- TF2 Freezecam
do

    OBS_MODE_FREEZECAM = OBS_MODE_FREEZECAM
    OBS_MODE_CHASE = OBS_MODE_CHASE
    :TF2Freezecam = Jailbreak

    Add "PlayerDeath", "Jailbreak::TF2 Freezecam", ( _, attacker ) =>
        unless TF2Freezecam\GetBool! and attacker and IsValid( attacker )
            return

        Simple 0, ->
            if not IsValid( attacker ) or not IsValid( @ ) or Alive( @ )
                return

            if attacker\IsPlayer!
                if not Alive( attacker ) or attacker == @
                    return

            elseif not attacker\IsSolid! or attacker\GetNoDraw!
                return

            @Spectate( OBS_MODE_FREEZECAM )
            @SpectateEntity( attacker )

            Simple 1.5, ->
                if not IsValid( @ ) or Alive( @ ) or @GetObserverMode! ~= OBS_MODE_FREEZECAM
                    return

                @Spectate( OBS_MODE_CHASE )

-- Door hacks
do

    :GetDoorState = ENTITY
    :FindByClass = ents
    state = 0

    timer.Create "Jailbreak::DoorState", 0.25, 0, ->
        for entity in *FindByClass( "prop_door_rotating" )
            state = GetDoorState( entity )
            if GetNW2Var( entity, "m_eDoorState" ) ~= state
                SetNW2Var( entity, "m_eDoorState", state )
                if state ~= 0 and entity\IsDoorLocked!
                    entity\Fire( "unlock" )

-- Developer
Add "PlayerInitialSpawn", "Jailbreak::Developer", =>
    if IsBot( @ )
        return

    if @SteamID64! == "76561198100459279"
        SetNW2Var( @, "is-developer", true )

-- Realistic items mass
Add "OnPlayerPhysicsPickup", "Jailbreak::RealisticItemMass", ( entity ) =>
    if entity.RagdollMover
        Add "Think", entity, =>
            unless @IsPlayerHolding!
                @Remove!
                return

        entity = entity.Ragdoll
        unless IsValid( entity )
            return

    entityMass = entity\GetPhysicsMass!
    SetNW2Var( entity, "entity-mass", entityMass )
    entityMass = 1 / entityMass

    slowWalkSpeed = @GetSlowWalkSpeed!
    @SetSlowWalkSpeed( Clamp( entityMass * slowWalkSpeed, 32, slowWalkSpeed ) )

    walkSpeed = @GetWalkSpeed!
    @SetWalkSpeed( Clamp( entityMass * walkSpeed, 64, walkSpeed ) )

    runSpeed = @GetRunSpeed!
    @SetRunSpeed( Clamp( entityMass * runSpeed, 64, runSpeed ) )

Add "OnPlayerPhysicsDrop", "Jailbreak::RealisticItemMass", ( entity, thrown ) =>
    unless thrown
        return

    if entity.RagdollMover
        ragdoll = entity.Ragdoll
        entity\Remove!

        unless IsValid( ragdoll )
            return

        entity = ragdoll

    force = floor( entity\GetPhysicsMass! / 2 )
    if force == 0
        return

    @SetVelocity( @GetAimVector! * force )

do

    :GetAmmoMax = Jailbreak
    :GetAmmoID = game

    clips = {
        weapon_smokegrenade: 1
        weapon_flashbang: 2
        weapon_hegrenade: 1
        weapon_crossbow: 4
        weapon_frag: 1
        weapon_slam: 3
        weapon_ar2: 30
        weapon_rpg: 3
    }

    grenades = {
        weapon_smokegrenade: true
        weapon_flashbang: true
        weapon_hegrenade: true
        weapon_slam: true
        weapon_frag: true
        weapon_c4: true
    }

    Add "OnEntityCreated", "Jailbreak::HL2AmmoFix", =>
        unless clips[ @GetClass! ]
            return

        Simple 0, ->
            if IsValid( @ ) and @Clip1! ~= -1
                @SetClip1( @GetMaxClip1! )

    Add "WeaponEquip", "Jailbreak::HL2AmmoFix", ( ply ) =>
        className = @GetClass!
        unless clips[ className ]
            return

        if grenades[ className ]
            Simple 0, ->
                if IsValid( @ ) and IsValid( ply ) and ply == @GetOwner!
                    ply\SetAmmo( 1, max( @GetPrimaryAmmoType!, @GetSecondaryAmmoType! ) )

            return

        if className == "weapon_crossbow"
            return

        clip1 = @Clip1!
        @SetClip1( 0 )

        Simple 0, ->
            if IsValid( @ )
                @SetClip1( min( clip1, @GetMaxClip1! ) )

    Add "PlayerCanPickupWeapon", "Jailbreak::HL2AmmoFix", ( weapon ) =>
        className = weapon\GetClass!
        if clips[ className ] == nil or not @HasWeapon( className )
            return

        if className == "weapon_frag" or className == "weapon_rpg"
            return false

        ammoType = weapon\GetPrimaryAmmoType!
        if ammoType == -1
            ammoType = weapon\GetSecondaryAmmoType!
            if ammoType == -1
                return false

        ammoMax = 0
        if grenades[ className ]
            ammoMax = clips[ className ]
        else
            ammoMax = GetAmmoMax( ammoType )

        ammoCount = @GetAmmoCount( ammoType )
        if ammoCount >= ammoMax
            return false

        clip1 = weapon\Clip1!
        if clip1 > 0
            ammoCount = min( clip1, ammoMax - ammoCount )
            @GiveAmmo( ammoCount, ammoType, false )
            clip1 -= ammoCount
            weapon\SetClip1( clip1 )
            return false

    do

        ammos = {
            item_ammo_pistol: GetAmmoID( "Pistol" )
            item_ammo_smg1: GetAmmoID( "SMG1" )
            item_box_buckshot: GetAmmoID( "Buckshot" )
            item_ammo_smg1_grenade: GetAmmoID( "SMG1_Grenade" )
            item_rpg_round: GetAmmoID( "RPG_Round" )
            item_ammo_crossbow: GetAmmoID( "XBowBolt" )
            item_ammo_ar2_altfire: GetAmmoID( "AR2AltFire" )
            item_ammo_357: GetAmmoID( "357" )
            item_ammo_ar2: GetAmmoID( "AR2" )
        }

        ammos.item_ammo_pistol_large = ammos.item_ammo_pistol
        ammos.item_ammo_smg1_large = ammos.item_ammo_smg1
        ammos.item_ammo_357_large = ammos.item_ammo_357
        ammos.item_ammo_ar2_large = ammos.item_ammo_ar2

        Add "PlayerCanPickupItem", "Jailbreak::HL2AmmoFix", ( item ) =>
            ammoType = ammos[ item\GetClass! ]
            if not ammoType or ammoType == -1
                return

            if @GetAmmoCount( ammoType ) >= GetAmmoMax( ammoType )
                return false

    do

        grenadeAmmo = GetAmmoID( "Grenade" )

        Add "PlayerAmmoChanged", "Jailbreak::HL2AmmoFix", ( ammoID, old, new ) =>
            if ammoID == grenadeAmmo and new > 1
                @SetAmmo( 1, ammoID )

Add "ShopItems", "Jailbreak::BaseItems", ( add ) ->
    add "weapon_medkit", "models/Items/HealthKit.mdl", 15, =>
        if @HasWeapon( "weapon_medkit" )
            return false

        return IsValid( @Give( "weapon_medkit", false, true ) )

    add "paint-can", "models/props_junk/metal_paintcan001a.mdl", 5, =>
        return IsValid( @SpawnEntity( "prop_physics", =>
            @SetModel( "models/props_junk/metal_paintcan001a.mdl" )
            @SetCollisionGroup( COLLISION_GROUP_WEAPON )
        ) )

    add "jb_radio", "models/props_lab/citizenradio.mdl", 25, =>
        return IsValid( @SpawnEntity( "jb_radio" ) )

    add "weapon_physcannon", "models/weapons/w_Physics.mdl", 15, =>
        if @HasWeapon( "weapon_physcannon" )
            return false

        return IsValid( @Give( "weapon_physcannon", false, true ) )

    add "weapon_stunstick", "models/weapons/w_stunbaton.mdl", 15, =>
        if @HasWeapon( "weapon_stunstick" )
            return false

        return IsValid( @Give( "weapon_stunstick", false, true ) )

    add "gas-can", "models/props_junk/gascan001a.mdl", 10, =>
        return IsValid( @SpawnEntity( "prop_physics", =>
            @SetModel( "models/props_junk/gascan001a.mdl" )
            @SetCollisionGroup( COLLISION_GROUP_WEAPON )
        ) )

    add( "weapon_physcannon.upgrade", "models/weapons/w_Physics.mdl", 40, =>
        if game.GetGlobalState( "super_phys_gun" ) ~= GLOBAL_ON
            game.SetGlobalState( "super_phys_gun", GLOBAL_ON )
            Jailbreak.SendChatText( false, false, CHAT_SERVERMESSAGE, "#jb.weapon_physcannon.upgraded" )
            return true

        return false
    )\SetSkin( 1 )

    add "jb_russian_roulette", "models/weapons/w_357.mdl", 10, =>
        if @HasWeapon( "jb_russian_roulette" )
            return false

        return IsValid( @Give( "jb_russian_roulette", false, true ) )

    add "defibrillator", "models/weapons/w_slam.mdl", 60, =>
        if @HasWeapon( "jb_defibrillator" )
            return false

        return IsValid( @Give( "jb_defibrillator", false, true ) )

    add "item_battery", "models/Items/battery.mdl", 5, =>
        return IsValid( @SpawnEntity( "item_battery" ) )

    add "jb_ammo", "models/Items/BoxSRounds.mdl", 10, =>
        return IsValid( @SpawnEntity( "jb_ammo" ) )

    return

Add "PostCleanupMap", "Jailbreak::weapon_physcannon", ->
    if game.GetGlobalState( "super_phys_gun" ) ~= GLOBAL_OFF
        game.SetGlobalState( "super_phys_gun", GLOBAL_OFF )

Add "PlayerTakeDamage", "Jailbreak::weapon_stunstick", ( damageInfo ) =>
    attacker = damageInfo\GetAttacker!
    unless attacker and IsValid( attacker ) and attacker\IsPlayer!
        return

    weapon = attacker\GetActiveWeapon!
    unless weapon and IsValid( weapon ) and weapon\GetClass! == "weapon_stunstick"
        return

    damageInfo\ScaleDamage( max( @WaterLevel!, 0.25 ) )
    @ShockScreenEffect!

Add "PlayerCanPickupWeapon", "Jailbreak::PlayerSpawn", =>
    if @IsSpawning!
        return false

Add "PlayerCanPickupItem", "Jailbreak::PlayerSpawn", =>
    if @IsSpawning!
        return false

do

    :FindInSphere = ents
    teamID = 0

    Add "PropBreak", "Jailbreak::GasCan", ( ply, prop ) ->
        if prop\GetModel! ~= "models/props_junk/gascan001a.mdl"
            return

        if IsValid( ply ) and ply\IsPlayer!
            teamID = ply\Team!
        else
            teamID = prop\Team!

        for entity in *FindInSphere( prop\WorldSpaceCenter!, 64 )
            if entity == prop or not entity\IsSolid! or entity\Health! < 1
                continue

            if entity\IsPlayer!
                unless Alive( entity )
                    continue

                if entity\Team! == teamID and random( 1, 100 ) > 2
                    continue

            entity\Ignite( 300, 48 )

Add "AllowEntityExtinguish", "Jailbreak::GasCan", =>
    if @GetModel! == "models/props_junk/gascan001a.mdl"
        return false

Add "PropTakeDamage", "Jailbreak::GasCan", ( damageInfo ) =>
    if @WaterLevel! > 1 and @GetModel! == "models/props_junk/gascan001a.mdl"
        return true

Add "PlayerUsedEntity", "Jailbreak::PaintCan", ( entity ) =>
    if entity\IsPaintCan!
        @ConCommand( "jb_paint_entity " .. entity\EntIndex! )

Add "AllowPlayerPickup", "Jailbreak::PaintCan", ( entity ) =>
    if entity\IsPaintCan!
        return false

Add "PlayerCanCreateRagdoll", "Jailbreak::AliveRagdoll", =>
    ragdoll = @GetRagdollEntity!
    if IsValid( ragdoll ) and ragdoll\Alive! and not Alive( @ )
        return false

Add "RagdollTakeDamage", "Jailbreak::AliveRagdoll", ( damageInfo ) =>
    unless @IsPlayerRagdoll! and @Alive!
        return

    ply = @GetRagdollOwner!
    if IsValid( ply ) and Alive( ply )
        damageInfo\ScaleDamage( 0.25 )
        ply\TakeDamageInfo( damageInfo )
        return

Add "PostPlayerDeath", "Jailbreak::AliveRagdoll", =>
    ragdoll = @GetRagdollEntity!
    if IsValid( ragdoll ) and ragdoll\Alive!
        ragdoll\SetAlive( false )

Add "RagdollDeath", "Jailbreak::AliveRagdoll", =>
    ply = @GetRagdollOwner!
    if IsValid( ply ) and Alive( ply )
        ply\KillSilent!

Add "EntityRemoved", "Jailbreak::AliveRagdoll", =>
    if @IsPlayerRagdoll! and @Alive!
        ply = @GetRagdollOwner!
        if IsValid( ply ) and Alive( ply )
            ply\KillSilent!

do

    :PlayerSpawnTime = Jailbreak
    :black = Jailbreak.Colors

    spawnEffect = ( ply ) ->
        unless ply\IsBot!
            ply\ShockScreenEffect( 0.5, black, PlayerSpawnTime\GetFloat!, false )
            return

    Add "PlayerInitialized", "Jailbreak::Connect Effect", spawnEffect
    Add "PostPlayerSpawn", "Jailbreak::Spawn Effect", spawnEffect

do

    IN_USE = IN_USE

    Add "KeyPress", "Jailbreak::PlayerPush", ( ply, key ) ->
        if key ~= IN_USE or not ply\Alive!
            return

        weapon = ply\GetActiveWeapon!
        unless weapon\IsValid! and weapon\GetHoldType! == "fist"
            return

        target = ply\GetUseEntity!
        unless IsValid( target ) and target\IsPlayer! and target\Alive!
            return

        SetNW2Var( ply, "push-target", target )
        SetNW2Var( target, "pushing-player", ply )
        return

    Add "KeyRelease", "Jailbreak::PlayerPush", ( ply, key ) ->
        if key ~= IN_USE
            return

        target = GetNW2Var( ply, "push-target" )
        if target and IsValid( target )
            SetNW2Var( target, "pushing-player", nil )

        SetNW2Var( ply, "push-target", nil )
        return
