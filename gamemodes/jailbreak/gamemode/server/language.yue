:char, :sub, :gsub, :gmatch, :find = string
Jailbreak = Jailbreak
IsValid = IsValid

global language = language or {}

getPhrase = ( languageCode, placeholder ) ->
    phrases = language[ languageCode ]
    unless phrases
        return placeholder

    return phrases[ placeholder ] or placeholder

language.GetPhrase = getPhrase

add = ( languageCode, placeholder, fulltext ) ->
    phrases = language[ languageCode ]
    unless phrases
        phrases = {}
        language[ languageCode ] = phrases

    phrases[ placeholder ] = fulltext

language.Add = add

do

    parseUnicode = nil
    do

        :bor, :band, :rshift = bit
        tonumber = tonumber

        parseUnicode = ( str ) ->
            return gsub str, "\\u([0-9a-f][0-9a-f][0-9a-f][0-9a-f])", ( value ) ->
                byte = tonumber( value, 16 )
                if byte < 0x80 -- Single-byte sequence
                    return char( byte )
                elseif byte < 0x800 -- Two-byte sequence
                    b1 = bor( 0xC0, band( rshift( byte, 6 ), 0x1F ) )
                    b2 = bor( 0x80, band( byte, 0x3F ) )
                    return char( b1, b2 )
                elseif byte < 0x10000 -- Three-byte sequence
                    b1 = bor( 0xE0, band( rshift( byte, 12 ), 0x0F ) )
                    b2 = bor( 0x80, band( rshift( byte, 6 ), 0x3F ) )
                    b3 = bor( 0x80, band( byte, 0x3F ) )
                    return char( b1, b2, b3 )
                else -- Four-byte sequence
                    b1 = bor( 0xF0, band( rshift( byte, 18 ), 0x07 ) )
                    b2 = bor( 0x80, band( rshift( byte, 12 ), 0x3F ) )
                    b3 = bor( 0x80, band( rshift( byte, 6 ), 0x3F ) )
                    b4 = bor( 0x80, band( byte, 0x3F ) )
                    return char( b1, b2, b3, b4 )

    string.ParseUnicode = parseUnicode

    parseEscapedChars = nil
    do

        escapedChars = {
            ["\\n"]: "\n"
            ["\\t"]: "\t"
            ["\\0"]: "\0"
        }

        parseEscapedChars = ( str ) ->
            return gsub str, "\\.", ( value ) ->
                escapedChars[ value ] or value[ 2 ]

    string.ParseEscapedChars = parseEscapedChars

    loadLocalization = nil
    do

        :AsyncRead, :Find = file
        select = select
        print = print

        loadLocalization = ( folderPath ) ->
            for languageCode in *select( 2, Find( folderPath .. "/*", "GAME" ) )
                if Jailbreak.Developer
                    print "[Jailbreak] Loading '" .. languageCode .. "' localization..."

                for fileName in *Find( folderPath .. "/" .. languageCode .. "/*.properties", "GAME" )
                    AsyncRead folderPath .. "/" .. languageCode .. "/" .. fileName, "GAME", ( _, __, status, data ) ->
                        if status ~= 0 or not data or #data < 3
                            return

                        for line in gmatch( data, "(.-)\n" )
                            if #line >= 3
                                separatorPos = find( line, "=" )
                                unless separatorPos
                                    continue

                                add( languageCode, sub( line, 1, separatorPos - 1 ), parseEscapedChars( parseUnicode( sub( line, separatorPos + 1 ) ) ) )

        Jailbreak.LoadLocalization = loadLocalization

    Jailbreak.ReloadLocalization = ->
        loadLocalization "resource/localization"
        loadLocalization "gamemodes/jailbreak/content/resource/localization"

Jailbreak.Translate = ( str ) =>
    unless IsValid( @ ) and @IsPlayer!
        return str

    languageCode = @GetInfo( "gmod_language" )
    if not languageCode or #languageCode == 0
        return str

    return gsub str, "#([%w%.-_]+)", ( placeholder ) ->
        fulltext = getPhrase( languageCode, placeholder )
        if fulltext == placeholder and sub( placeholder, 1, 3 ) == "jb."
            return sub( placeholder, 4 )

        return fulltext
