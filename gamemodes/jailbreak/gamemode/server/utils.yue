Jailbreak = Jailbreak
hook_Run = hook.Run
IsValid = IsValid

-- Networking
util.AddNetworkString( "Jailbreak::Networking" )

-- Workshop content
resource.AddWorkshop( "3093227948" )
resource.AddWorkshop( "2950445307" )
resource.AddWorkshop( "2661291057" )
resource.AddWorkshop( "643148462" )

-- https://wiki.facepunch.com/gmod/Enums/NOTIFY
global NOTIFY_GENERIC = 0
global NOTIFY_ERROR = 1
global NOTIFY_UNDO = 2
global NOTIFY_HINT = 3
global NOTIFY_CLEANUP = 4

-- TF2 teams to jailbreak teams
Jailbreak.TF2Team = ( teamID ) ->
    return teamID % 2 + 1

do

    :Start, :WriteUInt, :WriteString, :Broadcast = net

    Jailbreak.PlaySound = ( soundPath ) ->
        Start( "Jailbreak::Networking" )
        WriteUInt( 4, 3 )
        WriteString( soundPath )
        Broadcast!

-- Change player team
do

    :Teams, :TeamIsJoinable = Jailbreak
    NOTIFY_ERROR = NOTIFY_ERROR
    :Joinable = team

    Jailbreak.ChangeTeam = ( teamID ) =>
        unless Joinable( teamID )
            return

        oldTeamID = @Team!
        if oldTeamID == teamID
            @SendNotify( "#jb.error.already-on-team", NOTIFY_ERROR, 3 )
            return

        unless TeamIsJoinable( teamID )
            @SendNotify( "#jb.error.cant-do-that", NOTIFY_ERROR, 10 )
            return

        if @Alive!
            if Teams[ oldTeamID ]
                @Kill!
            else
                @KillSilent!

        @SetTeam( teamID )

-- Shock collar effect
do

    CHAN_STATIC = CHAN_STATIC
    EffectData = EffectData
    :random = math
    :Effect = util

    Jailbreak.ShockCollarEffect = ( origin, pitch ) =>
        unless origin
            boneID = @LookupBone( "ValveBiped.Bip01_Head1" )
            if boneID and boneID >= 0
                matrix = @GetBoneMatrix( boneID )
                if matrix
                    origin = matrix\GetTranslation!

        fx = EffectData!
        fx\SetScale( 0.5 )
        fx\SetOrigin( origin or @EyePos! )
        fx\SetMagnitude( random( 3, 5 ) )
        fx\SetRadius( random( 1, 5 ) )
        Effect( "ElectricSpark", fx )

        @EmitSound( "Jailbreak.Shock", 75, pitch or random( 80, 120 ), 1, CHAN_STATIC, 0, 1 )

do

    SetGlobal2Bool = SetGlobal2Bool

    -- Female prison
    do

        :IsFemalePrison = Jailbreak

        Jailbreak.SetFemalePrison = ( bool ) ->
            if bool == IsFemalePrison!
                return

            SetGlobal2Bool( "female-prison", bool )

    -- Shock collars
    do

        :IsShockCollarsActive = Jailbreak

        Jailbreak.SetShockCollars = ( bool, silent ) ->
            if bool == IsShockCollarsActive!
                return

            SetGlobal2Bool( "shock-collars", bool )

            unless silent
                hook_Run( "ShockCollars", bool )

-- Warden coins
do

    SetGlobal2Int = SetGlobal2Int
    :GetWardenCoins = Jailbreak

    Jailbreak.SetWardenCoins = ( value, silent ) ->
        oldValue = GetWardenCoins!
        if value == oldValue
            return

        SetGlobal2Int( "warden-coins", value )

        unless silent
            hook_Run( "WardenCoins", oldValue, value )

-- Entity metatable
do

    ENTITY = FindMetaTable( "Entity" )
    :GetClass = ENTITY

    -- Entity dissolve method
    do

        :Simple = timer

        ENTITY.Dissolve = =>
            dissolver = ENTITY.Dissolver
            unless IsValid( dissolver )
                dissolver = ents.Create( "env_entity_dissolver" )
                ENTITY.Dissolver = dissolver

                dissolver\SetKeyValue( "dissolvetype", 0 )
                dissolver\SetKeyValue( "magnitude", 0 )
                dissolver\Spawn!

            unless IsValid( dissolver )
                return false

            dissolver\SetPos( @WorldSpaceCenter! )

            temporaryName = "dissolver" .. dissolver\EntIndex! .. "_request" .. @EntIndex!
            @SetName( temporaryName )

            dissolver\Fire( "dissolve", temporaryName, 0 )

            Simple 0, ->
                if @IsValid!
                    @SetName( "" )

            return true

    -- Returns true if the entity is valid observe target
    ENTITY.IsValidObserveTarget = =>
        if @IsPlayer! and @IsInGame!
            return true

        if @IsPlayerRagdoll!
            return true

        return GetClass( @ ) == "info_observer_point"

    do

        :ObserveTargets = Jailbreak
        :remove = table

        -- Remove the entity from the list of observe targets
        removeAsObserveTarget = =>
            for index = 1, #ObserveTargets
                if ObserveTargets[ index ] == @
                    remove( ObserveTargets, index )
                    break

        ENTITY.RemoveFromObserveTargets = removeAsObserveTarget

        -- Add the entity to the list of observe targets
        ENTITY.AddToObserveTargets = =>
            removeAsObserveTarget( @ )
            ObserveTargets[] = @

    -- Check if the entity is a prop
    do

        classNames = list.GetForEdit( "prop-classnames" )
        classNames.prop_physics_multiplayer = true
        classNames.prop_physics_override = true
        classNames.prop_dynamic_override = true
        classNames.prop_dynamic = true
        classNames.prop_ragdoll = true
        classNames.prop_physics = true
        classNames.prop_detail = true
        classNames.prop_static = true

        ENTITY.IsProp = =>
            return classNames[ GetClass( @ ) ]

do

    CTakeDamageInfo = FindMetaTable( "CTakeDamageInfo" )
    :GetDamageType = CTakeDamageInfo
    :band, :bor = bit

    -- Returns true if the damage type is close range
    do

        DMG_CLOSE_RANGE = bor( DMG_SLASH, DMG_FALL, DMG_CLUB, DMG_CRUSH )

        CTakeDamageInfo.IsCloseRangeDamage = =>
            return band( GetDamageType( @ ), DMG_CLOSE_RANGE ) ~= 0

    -- Returns true if the damage type is dissolve
    do

        DMG_DISSOLVE = DMG_DISSOLVE

        CTakeDamageInfo.IsDissolveDamage = =>
            return band( GetDamageType( @ ), DMG_DISSOLVE ) == DMG_DISSOLVE

do

    istable = istable
    :Shuffle = table
    Vector = Vector
    pairs = pairs
    :min = math

    Jailbreak.LootRagdoll = ( ragdoll ) =>
        velocity = Vector!

        direction = @EyePos! - ragdoll\WorldSpaceCenter!
        direction\Normalize!

        if ragdoll.HasFlashlight and not @CanUseFlashlight!
            velocity += direction * 150
            @AllowFlashlight( true )
            @SendPickupNotify( "jb.flashlight" )
            ragdoll.HasFlashlight = nil

        if ragdoll.HasSecurityAccess and not @HasSecurityAccess!
            velocity += direction * 50
            @AllowSecurityAccess( true )
            @SendPickupNotify( "jb.access-card" )
            ragdoll.HasSecurityAccess = nil

        if ragdoll.HasSecurityRadio and not @HasSecurityRadio!
            velocity += direction * 50
            @AllowSecurityRadio( true )
            @SendPickupNotify( "jb.walkie-talkie" )
            ragdoll.HasSecurityRadio = nil

        weapons = ragdoll.Weapons
        if istable( weapons )
            for weapon in *weapons
                unless weapon\IsValid! and not IsValid( weapon\GetOwner! )
                    continue

                weapon\SetNotSolid( false )
                weapon\SetNoDraw( false )
                weapon\SetParent!

                weapon.PickupForbidden = nil
                @PickupWeapon( weapon )
                velocity += direction * 200
        ragdoll.Weapons = nil

        ammo = ragdoll.Ammo
        if istable( ammo )
            for ammoType, ammoCount in pairs( ammo )
                @GiveAmmo( ammoCount, ammoType )
                velocity += direction * 100
        ragdoll.Ammo = nil

        if velocity\Length! < 100
            return

        if ragdoll\IsRagdoll!
            physParts = {}
            for physNum = 1, ragdoll\GetPhysicsObjectCount! - 1 do
                phys = ragdoll\GetPhysicsObjectNum( physNum )
                if IsValid( phys )
                    physParts[] = phys

            Shuffle( physParts )

            for index = 1, min( #physParts, 4 )
                physParts[ index ]\ApplyForceCenter( velocity )

        else
            phys = ragdoll\GetPhysicsObject!
            if IsValid( phys )
                phys\ApplyForceCenter( velocity )
