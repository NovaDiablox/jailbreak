EffectData = EffectData
Jailbreak = Jailbreak
:ceil, :max = math
IsValid = IsValid
:Simple = timer
ENTITY = ENTITY
pairs = pairs
:Run = hook

util = util
:Effect = util
:GetClass = ENTITY

-- Networking
util.AddNetworkString( "Jailbreak::Networking" )

-- Workshop content
resource.AddWorkshop( "3211331044" )
resource.AddWorkshop( "3212160573" )
resource.AddWorkshop( "2950445307" )
resource.AddWorkshop( "2661291057" )
resource.AddWorkshop( "643148462" )

-- https://wiki.facepunch.com/gmod/Enums/NOTIFY
global NOTIFY_GENERIC = 0
global NOTIFY_ERROR = 1
global NOTIFY_UNDO = 2
global NOTIFY_HINT = 3
global NOTIFY_CLEANUP = 4

do

    :Start, :WriteUInt, :WriteString, :Broadcast = net

    Jailbreak.PlaySound = ( soundPath ) ->
        Start( "Jailbreak::Networking" )
        WriteUInt( 3, 4 )
        WriteString( soundPath )
        Broadcast!
        return

do

    :BlastDamage = util

    Jailbreak.Explosion = ( inflictor, attacker, origin, radius, damage ) ->
        fx = EffectData!
        fx\SetOrigin( origin )

        scale = ceil( radius / 125 )
        fx\SetRadius( scale )
        fx\SetScale( scale )

        fx\SetMagnitude( ceil( damage / 18.75 ) )

        Effect( "Sparks", fx )
        Effect( "Explosion", fx )

        BlastDamage( inflictor, attacker, origin, radius, damage )
        return

-- Change player team
do

    :Teams = Jailbreak

    changeTeam = ( teamID, force ) =>
        oldTeamID = @Team!

        unless force
            allowed, reason, lifetime = Run( "PlayerCanJoinTeam", @, teamID, oldTeamID )
            unless allowed
                @SendNotify( reason or "#jb.error.cant-do-that", NOTIFY_ERROR, lifetime or 3 )
                return

        if @Alive!
            if Teams[ oldTeamID ]
                @Kill!
            else
                @KillSilent!

        @SetTeam( teamID )
        return

    Jailbreak.ChangeTeam = changeTeam
    GM.PlayerRequestTeam = changeTeam

do

    SetGlobal2Bool = SetGlobal2Bool

    -- Female prison
    do

        :IsFemalePrison = Jailbreak

        Jailbreak.SetFemalePrison = ( bool ) ->
            if bool == IsFemalePrison!
                return

            SetGlobal2Bool( "female-prison", bool )
            return

    -- Shock collars
    do

        :IsShockCollarsActive = Jailbreak

        Jailbreak.SetShockCollars = ( bool, silent ) ->
            if bool == IsShockCollarsActive!
                return

            SetGlobal2Bool( "shock-collars", bool )

            unless silent
                Run( "ShockCollarsToggled", bool )

            return

do

    SetGlobal2Int = SetGlobal2Int
    :GetWardenCoins = Jailbreak

    -- Set warden coins
    setWardenCoins = ( value, silent ) ->
        oldValue = GetWardenCoins!
        if oldValue == value
            return

        SetGlobal2Int( "warden-coins", value )

        unless silent
            Run( "WardenCoins", oldValue, value )

        return

    Jailbreak.SetWardenCoins = setWardenCoins

    -- Take warden coins
    Jailbreak.TakeWardenCoins = ( value, silent ) ->
        setWardenCoins( max( 0, GetWardenCoins! - value ), silent )
        return

    -- Give warden coins
    Jailbreak.GiveWardenCoins = ( value, silent ) ->
        setWardenCoins( max( 0, GetWardenCoins! + value ), silent )
        return

do

    shopItems = Jailbreak.ShopItems
    unless shopItems
        shopItems = {}
        Jailbreak.ShopItems = shopItems

    class ShopItem
        new: ( name ) =>
            @title = "#jb." .. name
            @bodygroups = ""
            @name = name
            @skin = 0

        -- Item model
        GetModel: =>
            return @model

        SetModel: ( model ) =>
            @model = model or "models/weapons/w_bugbait.mdl"

        -- Item skin
        GetSkin: =>
            return @skin

        SetSkin: ( skin ) =>
            @skin = skin

        -- Item bodygroups
        GetBodygroups: =>
            return @bodygroups

        SetBodygroups: ( bodygroups ) =>
            @bodygroups = bodygroups

        -- Price in credits
        GetPrice: =>
            return @price

        SetPrice: ( price ) =>
            @price = max( 1, price )

        -- Action
        GetAction: =>
            return @action

        SetAction: ( action ) =>
            @action = action

    Jailbreak.ShopItem = ShopItem

    Jailbreak.AddShopItem = ( name, model, price, action ) ->
        if not name or #name == 0
            name = "shopitem"

        item = shopItems[ name ]
        if item == nil
            item = ShopItem( name )
            shopItems[ name ] = item
            shopItems[] = item

        item\SetModel( model )
        item\SetPrice( price )
        item\SetAction( action )

        return item

    Simple 0.5, ->
        table.Empty( shopItems )
        Run( "ShopItems", Jailbreak.AddShopItem )
        return

-- Cleanup's map safely
do

    timer_Create = timer.Create
    :CleanUpMap = game

    Jailbreak.SafeCleanUpMap = ->
        timer_Create "Jailbreak::CleanUpMap", 0.25, 1, ->
            CleanUpMap( false )
            return

-- Returns entity mass in kilograms
do

    :GetPhysicsObjectCount, :GetPhysicsObjectNum = ENTITY

    ENTITY.GetPhysicsMass = =>
        objectMass = 0

        for physNum = 0, GetPhysicsObjectCount( @ ) - 1
            phys = GetPhysicsObjectNum( @, physNum )
            if IsValid( phys )
                objectMass += phys\GetMass!

        return ceil( objectMass )

-- Entity dissolve method
ENTITY.Dissolve = =>
    dissolver = ENTITY.Dissolver
    unless IsValid( dissolver )
        dissolver = ents.Create( "env_entity_dissolver" )
        ENTITY.Dissolver = dissolver

        dissolver\SetKeyValue( "dissolvetype", 0 )
        dissolver\SetKeyValue( "magnitude", 0 )
        dissolver\Spawn!

    unless IsValid( dissolver )
        return false

    dissolver\SetPos( @WorldSpaceCenter! )

    temporaryName = "dissolver" .. dissolver\EntIndex! .. "_request" .. @EntIndex!
    @SetName( temporaryName )

    dissolver\Fire( "dissolve", temporaryName, 0 )

    timer.Create "Jailbreak::Dissolver", 0.25, 1, ->
        if @IsValid!
            @SetName( "" )

    return true

-- Returns true if the entity is valid observe target
do

    :AllowRagdollSpectate = Jailbreak

    ENTITY.IsValidObserveTarget = =>
        if @IsPlayer! and @Alive!
            return true

        if @IsPlayerRagdoll!
            return AllowRagdollSpectate\GetBool!

        return GetClass( @ ) == "info_observer_point"

do

    :ObserveTargets = Jailbreak
    :remove = table

    -- Remove the entity from the list of observe targets
    removeAsObserveTarget = =>
        for index = 1, #ObserveTargets
            if ObserveTargets[ index ] == @
                remove( ObserveTargets, index )
                break

    ENTITY.RemoveFromObserveTargets = removeAsObserveTarget

    -- Add the entity to the list of observe targets
    ENTITY.AddToObserveTargets = =>
        if @IsValidObserveTarget!
            removeAsObserveTarget( @ )
            ObserveTargets[] = @
            return true

        return false

    -- Clear observe targets
    Jailbreak.ClearObserveTargets = ->
        for key in pairs( ObserveTargets )
            ObserveTargets[ key ] = nil

do

    :GetInternalVariable = ENTITY

    -- Returns true if door entity is locked
    ENTITY.IsDoorLocked = =>
        return GetInternalVariable( @, "m_bLocked" )

    -- Returns door entity state
    ENTITY.GetDoorState = =>
        if GetClass( @ ) == "prop_door_rotating"
            return GetInternalVariable( @, "m_eDoorState" )

        return 0

-- Set entity team
ENTITY.SetTeam = ( teamID ) =>
    @SetNW2Int( "player-team", teamID )

ENTITY.SetAlive = ( alive ) =>
    @SetNW2Bool( "alive", alive )

do

    CTAKE_DAMAGE_INFO = CTAKE_DAMAGE_INFO
    :GetDamageType = CTAKE_DAMAGE_INFO
    :band = bit

    -- Returns true if the damage type is never gib damage
    do

        DMG_NEVERGIB = DMG_NEVERGIB

        CTAKE_DAMAGE_INFO.IsNeverGibDamage = =>
            return band( GetDamageType( @ ), DMG_NEVERGIB ) == DMG_NEVERGIB

    -- Returns true if the damage type is burn damage
    do

        DMG_BURN = DMG_BURN

        CTAKE_DAMAGE_INFO.IsBurnDamage = =>
            return band( GetDamageType( @ ), DMG_BURN ) ~= 0

    -- Returns true if the damage type is close range
    do

        DMG_CLOSE_RANGE = bit.bor( DMG_SLASH, DMG_FALL, DMG_CLUB, DMG_CRUSH )

        CTAKE_DAMAGE_INFO.IsCloseRangeDamage = =>
            return band( GetDamageType( @ ), DMG_CLOSE_RANGE ) ~= 0

    -- Returns true if the damage type is dissolve
    do

        DMG_DISSOLVE = DMG_DISSOLVE

        CTAKE_DAMAGE_INFO.IsDissolveDamage = =>
            return band( GetDamageType( @ ), DMG_DISSOLVE ) == DMG_DISSOLVE


    -- Returns true if the damage type is non physical
    do

        damageTypes = { DMG_DROWN, DMG_POISON, DMG_RADIATION, DMG_NERVEGAS, DMG_PARALYZE, DMG_SHOCK, DMG_SONIC, DMG_BURN }
        damageTypesLength = #damageTypes
        damageType = 0

        CTAKE_DAMAGE_INFO.IsNonPhysicalDamage = =>
            damageType = GetDamageType( @ )
            for index = 1, damageTypesLength
                if band( damageType, damageTypes[ index ] ) ~= 0
                    return true

            return false

    -- Returns true if the damage type is crush damage
    do

        DMG_CRUSH = DMG_CRUSH

        CTAKE_DAMAGE_INFO.IsCrushDamage = =>
            return band( GetDamageType( @ ), DMG_CRUSH ) == DMG_CRUSH

    -- Returns true if the damage type is shock damage
    do

        DMG_SHOCK = DMG_SHOCK

        CTAKE_DAMAGE_INFO.IsShockDamage = =>
            return band( GetDamageType( @ ), DMG_SHOCK ) == DMG_SHOCK

do

    tobool = tobool
    :lower = string

    GM.AcceptInput = ( entity, key ) =>
        className = GetClass( entity )
        if className == "prop_door_rotating" or className == "func_door_rotating"
            switch lower( key )
                when "lock"
                    entity\SetNW2Bool( "m_bLocked", true )

                when "unlock"
                    entity\SetNW2Bool( "m_bLocked", false )

    GM.EntityKeyValue = ( entity, key, value ) =>
        className = GetClass( entity )
        if ( className == "prop_door_rotating" or className == "func_door_rotating" ) and lower( key ) == "m_bLocked"
            entity\SetNW2Bool( key, tobool( value ) )
            return

do

    :TraceLine, :Decal = util

    traceResult = {}
    trace = { output: traceResult }

    Jailbreak.BloodSplashes = ( damageInfo, death, velocity ) =>
        unless velocity
            velocity = @GetVelocity! + damageInfo\GetDamageForce!

        damagePosition = damageInfo\GetDamagePosition!
        speed = velocity\Length!

        fx = EffectData!
        fx\SetNormal( velocity\GetNormalized! )
        fx\SetMagnitude( speed / 100 )
        fx\SetScale( 10 )
        fx\SetFlags( 3 )
        fx\SetColor( 0 )
        fx\SetOrigin( damagePosition )
        Effect( "BloodImpact", fx, true, true )

        trace.start = damagePosition
        trace.filter = @

        unless death
            trace.endpos = damagePosition + velocity
            TraceLine( trace )

            unless traceResult.Hit
                return

            Decal( "Blood", traceResult.HitPos + traceResult.HitNormal, traceResult.HitPos - traceResult.HitNormal )
            return

        decal = damageInfo\IsShockDamage! and "FadingScorch" or "Blood"

        for bone = 0, @GetBoneCount! - 1
            origin = @GetBonePosition( bone )

            trace.endpos = origin + ( origin - damagePosition ) * speed
            TraceLine( trace )

            if traceResult.Hit
                Decal( decal, traceResult.HitPos + traceResult.HitNormal, traceResult.HitPos - traceResult.HitNormal )
