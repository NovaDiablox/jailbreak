Jailbreak = Jailbreak
:TraceLine = util
:Create = ents
:Run = hook
NULL = NULL

PLAYER = FindMetaTable( "Player" )
PLAYER.ChangeTeam = Jailbreak.ChangeTeam

-- Flashlight
PLAYER.HasFlashlight = PLAYER.CanUseFlashlight

PLAYER.GiveFlashlight = ( silent ) =>
    if @HasFlashlight!
        return

    if @FlashlightIsOn!
        @Flashlight( false )

    @AllowFlashlight( true )

    unless @IsBot! or silent
        @SendPickupNotify( "jb.flashlight" )

PLAYER.TakeFlashlight = ( silent ) =>
    unless @HasFlashlight!
        return

    if @FlashlightIsOn!
        @Flashlight( false )

    @AllowFlashlight( false )

    unless @IsBot! or silent
        @SendNotify( "#jb.flashlight.lost", NOTIFY_UNDO, 5 )

-- Security keys
PLAYER.GiveSecurityKeys = ( silent ) =>
    if @HasSecurityKeys!
        return

    @SetNW2Bool( "security-keys", true )

    unless @IsBot! or silent
        @SendPickupNotify( "jb.security.keys" )

PLAYER.TakeSecurityKeys = ( silent ) =>
    unless @HasSecurityKeys!
        return

    @SetNW2Bool( "security-keys", false )

    unless @IsBot! or silent
        @SendNotify( "#jb.security.keys.lost", NOTIFY_UNDO, 5 )

-- Security radio
PLAYER.GiveSecurityRadio = ( silent ) =>
    if @HasSecurityRadio!
        return

    @SetNW2Bool( "security-radio", true )

    unless @IsBot! or silent
        @SendPickupNotify( "jb.walkie-talkie" )

PLAYER.TakeSecurityRadio = ( silent ) =>
    unless @HasSecurityRadio!
        return

    @SetNW2Bool( "security-radio", false )

    unless @IsBot! or silent
        @SendNotify( "#jb.walkie-talkie.lost", NOTIFY_UNDO, 5 )

-- Shock collar
PLAYER.GiveShockCollar = ( silent ) =>
    if @HasShockCollar!
        return

    @SetNW2Bool( "shock-collar", true )
    @SetShockCollar( false, true )

    unless @IsBot! or silent
        @SendPickupNotify( "jb.shock-collar" )

PLAYER.TakeShockCollar = ( silent ) =>
    unless @HasShockCollar!
        return

    @SetShockCollar( false, true )
    @SetNW2Bool( "shock-collar", false )

    unless @IsBot! or silent
        @SendNotify( "#jb.shock-collar.lost", NOTIFY_UNDO, 5 )

PLAYER.SetShockCollar = ( bool, silent ) =>
    if bool == @ShockCollarIsEnabled!
        return

    @SetNW2Bool( "shock-collar-enabled", bool )

    if silent
        return

    Run( "ShockCollarToggled", @, bool )

-- Warden
PLAYER.SetWarden = ( bool, silent ) =>
    if bool == @IsWarden!
        return

    @SetNW2Bool( "is-warden", bool )

    if silent
        return

    Run( "WardenChanged", @, bool )

-- Allows player use of flight
PLAYER.AllowFlight = ( bool ) =>
    @SetNW2Bool( "flight-allowed", bool )

do

    :PlayerSlowWalkSpeed, :PlayerWalkSpeed, :PlayerRunSpeed, :PlayerJumpPower = Jailbreak

    PLAYER.SetupMovement = =>
        @SetSlowWalkSpeed( PlayerSlowWalkSpeed\GetInt! )
        @SetWalkSpeed( PlayerWalkSpeed\GetInt! )
        @SetRunSpeed( PlayerRunSpeed\GetInt! )
        @SetJumpPower( PlayerJumpPower\GetInt! )
        Run( "SetupPlayerMovement", @ )

do

    :Start, :WriteUInt, :WriteTable, :WriteString, :WriteBool, :WriteEntity, :Send = net

    PLAYER.PlaySound = ( soundPath ) =>
        Start( "Jailbreak::Networking" )
        WriteUInt( 3, 4 )
        WriteString( soundPath )
        Send( @ )

    PLAYER.SendPickupNotify = ( itemName ) =>
        Start( "Jailbreak::Networking" )
        WriteUInt( 1, 4 )
        WriteString( itemName )
        Send( @ )

    do

        util.AddNetworkString( "Jailbreak::Shop" )
        :ShopItems = Jailbreak

        PLAYER.SendShopItems = =>
            Start( "Jailbreak::Shop" )

            length = #ShopItems
            WriteUInt( length, 16 )

            for index = 1, length
                item = ShopItems[ index ]
                if item ~= nil
                    WriteString( item.name )
                    WriteString( item.model )
                    WriteUInt( item.price, 16 )
                    WriteUInt( item.skin, 8 )
                    WriteString( item.bodygroups )

            Send( @ )

    PLAYER.ResetToggles = =>
        Start( "Jailbreak::Networking" )
        WriteUInt( 5, 4 )
        Send( @ )

    do

        RecipientFilter = RecipientFilter
        isfunction = isfunction
        :Simple = timer

        PLAYER.AnimRestartNetworkedGesture = ( slot, activity, autokill, finished, frac ) =>
            sequenceID = @SelectWeightedSequence( activity )
            if sequenceID < 0
                return

            rf = RecipientFilter!
            rf\AddPVS( @WorldSpaceCenter! )
            if rf\GetCount! > 0
                Start( "Jailbreak::Networking" )
                WriteUInt( 4, 4 )
                WriteEntity( @ )
                WriteUInt( slot, 3 )
                WriteUInt( activity, 11 )
                WriteBool( autokill or false )
                Send( rf )

            if isfunction( finished )
                duration = @SequenceDuration( sequenceID )
                Simple duration - duration * ( frac or 0 ), ->
                    if @IsValid!
                        finished( @ )

            @AnimRestartGesture( slot, activity, autokill )

    do

        sounds = {
            [ NOTIFY_GENERIC ]: "buttons/button9.wav"
            [ NOTIFY_ERROR ]: "player/suit_denydevice.wav"
            [ NOTIFY_HINT ]: "buttons/button24.wav"
            [ NOTIFY_CLEANUP ]: "buttons/button6.wav"
            [ NOTIFY_UNDO ]: "buttons/button9.wav"
        }

        PLAYER.SendNotify = ( text, typeID, length, ... ) =>
            Start( "Jailbreak::Networking" )
            WriteUInt( 2, 4 )
            WriteString( text )
            WriteTable( { ... }, true )
            WriteUInt( typeID, 3 )
            WriteUInt( length, 16 )
            Send( @ )

            soundPath = sounds[ typeID ]
            if soundPath ~= nil
                @PlaySound( soundPath )

do

    OBS_MODE_ROAMING = OBS_MODE_ROAMING
    OBS_MODE_CHASE = OBS_MODE_CHASE

    PLAYER.ObserveEntity = ( entity ) =>
        if @Alive!
            @UnSpectate!
            return

        unless entity and entity\IsValid!
            if @GetObserverMode! ~= OBS_MODE_ROAMING
                @Spectate( OBS_MODE_ROAMING )

            return

        if @GetObserverTarget! ~= entity
            @SpectateEntity( entity )

        if @GetObserverMode! ~= OBS_MODE_CHASE
            @Spectate( OBS_MODE_CHASE )

    do

        :ObserveTargets = Jailbreak

        PLAYER.MoveObserveIndex = ( move, players ) =>
            if @Alive! or #ObserveTargets == 0
                return

            index, length = ( @LastSpectatedIndex or 0 ) + move, #ObserveTargets
            if index > length
                index = 1
            elseif index < 1
                index = length

            entity = ObserveTargets[ index ]
            if entity\IsPlayer! or entity\IsRagdoll!
                @ObserveEntity( entity )
            else

                if @GetObserverMode! ~= OBS_MODE_ROAMING
                    @Spectate( OBS_MODE_ROAMING )

                angles = entity\GetAngles!
                angles[ 3 ] = 0

                @SetEyeAngles( angles )
                @SetPos( entity\GetPos! )

            @LastSpectatedIndex = index

PLAYER.UsingMegaphone = =>
    return @IsWarden! and @GetInfo( "jb_megaphone" ) == "1"

do

    WeaponHandlers = WeaponHandlers or {}

    PLAYER.Give = ( className, noAmmo ) =>
        handler = WeaponHandlers[ className ]
        if handler
            className = handler.Alternative or className

        if @HasWeapon( className )
            return NULL

        weapon = Create( className )
        unless IsValid( weapon )
            return NULL

        weapon\SetAngles( @GetAngles! )
        weapon\SetPos( @GetPos! )

        weapon\Spawn!
        weapon\Activate!

        unless weapon\IsWeapon!
            return weapon

        if Run( "PlayerCanPickupWeapon", @, weapon ) == false
            weapon\Remove!
            return NULL

        if noAmmo
            weapon\SetClip1( 0 )
            weapon\SetClip2( 0 )

        @PickupWeapon( weapon, false )
        return weapon

PLAYER.SetMutedByWarden = ( bool ) =>
    @SetNW2Bool( "warden-mute", bool )

PLAYER.RemoveRagdoll = =>
    ragdoll = @GetRagdollEntity!
    if ragdoll\IsValid!
        ragdoll\Remove!

do

    :ceil = math

    PLAYER.Heal = ( frac ) =>
        amount = ceil( @GetMaxHealth! * ( frac or 1 ) )
        @SetHealth( amount )
        return amount

do

    :max = math

    PLAYER.AddHealth = ( amount ) =>
        amount = max( @GetHealth! + amount, @GetMaxHealth! )
        @SetHealth( amount )
        return amount

    PLAYER.TakeHealth = ( amount ) =>
        amount = max( 0, @GetHealth! - amount )
        @SetHealth( amount )
        if amount == 0
            @Kill!

        return amount

PLAYER.CreateClientsideRagdoll = PLAYER.CreateClientsideRagdoll or PLAYER.CreateRagdoll
COLLISION_GROUP_PASSABLE_DOOR = COLLISION_GROUP_PASSABLE_DOOR

do

    :RagdollRemove, :FixModelPath = Jailbreak
    :IsInWorld, :IsValidModel = util
    IsValid = IsValid
    trace = {}

    PLAYER.CreateRagdoll = ( putItems ) =>
        if RagdollRemove\GetBool!
            @RemoveRagdoll!

        spawnOrigin = @GetPos!
        unless IsInWorld( spawnOrigin )
            return NULL

        modelPath = @GetModel!
        unless modelPath
            return NULL

        modelPath = FixModelPath( modelPath )
        unless IsValidModel( modelPath )
            return NULL

        ragdoll = Create( @GetBoneCount! > 1 and "prop_ragdoll" or "prop_physics" )
        ragdoll\SetAngles( @GetAngles! )
        ragdoll\SetModel( modelPath )
        ragdoll\SetPos( spawnOrigin )
        ragdoll\Spawn!

        ragdoll.Team = @Team!

        if @Alive!
            ragdoll.Alive = true

            angles = @EyeAngles!
            angles[ 1 ] = 0
            angles[ 3 ] = 0
            ragdoll.PlayerAngles = angles

            ragdoll\SetMaxHealth( @GetMaxHealth! )
            ragdoll\SetHealth( @Health! )

            ragdoll.MaxArmor = @GetMaxArmor!
            ragdoll.Armor = @Armor!
        else
            ragdoll.Alive = false

            health = @GetMaxHealth!
            ragdoll\SetMaxHealth( health )
            ragdoll\SetHealth( health )

        for bodygroup in *@GetBodyGroups!
            ragdoll\SetBodygroup( bodygroup.id, @GetBodygroup( bodygroup.id ) )

        ragdoll\SetFlexScale( @GetFlexScale! )
        for flexID = 0, @GetFlexNum!
            ragdoll\SetFlexWeight( flexID, @GetFlexWeight( flexID ) )

        ragdoll\SetPlayerColor( @GetPlayerColor! )
        ragdoll\SetMaterial( @GetMaterial! )
        ragdoll\SetColor( @GetColor! )
        ragdoll\SetSkin( @GetSkin! )

        for index = 1, #@GetMaterials!
            materialPath = @GetSubMaterial( index )
            if materialPath ~= ""
                ragdoll\SetSubMaterial( index, materialPath )

        ragdoll\SetCollisionGroup( COLLISION_GROUP_PASSABLE_DOOR )
        ragdoll\SetNW2Bool( "is-player-ragdoll", true )
        ragdoll\SetNW2Entity( "ragdoll-owner", @ )
        @SetNW2Entity( "player-ragdoll", ragdoll )

        unless @IsBot!
            ragdoll\SetNW2String( "owner-steamid64", @SteamID64! )
        ragdoll\SetNW2String( "owner-nickname", @Nick! )

        for bone = 0, @GetBoneCount! - 1
            ragdoll\ManipulateBonePosition( bone, @GetManipulateBonePosition( bone ) )
            ragdoll\ManipulateBoneAngles( bone, @GetManipulateBoneAngles( bone ) )
            ragdoll\ManipulateBoneJiggle( bone, @GetManipulateBoneJiggle( bone ) )
            ragdoll\ManipulateBoneScale( bone, @GetManipulateBoneScale( bone ) )

        if ragdoll\IsRagdoll!
            velocity = @LastVelocity
            for physNum = 0, ragdoll\GetPhysicsObjectCount! - 1 do
                phys = ragdoll\GetPhysicsObjectNum( physNum )
                unless IsValid( phys )
                    continue

                bone = ragdoll\TranslatePhysBoneToBone( physNum )
                if bone < 0
                    continue

                origin, angles = @GetBonePosition( bone )
                if origin ~= nil
                    phys\SetAngles( angles )
                    unless IsInWorld( origin )
                        continue

                    trace.start = origin
                    trace.endpos = origin
                    trace.filter = { ragdoll, @ }

                    if TraceLine( trace ).Hit
                        continue

                    phys\SetPos( origin )

                phys\SetVelocity( velocity )
                phys\Wake!

        else
            phys = ragdoll\GetPhysicsObject!
            if IsValid( phys )
                phys\SetVelocity( @LastVelocity )
                phys\Wake!

        if @IsOnFire!
            ragdoll\Ignite( 5, 64 )
            @Extinguish!

        Run( "PlayerRagdollCreated", @, ragdoll )

        if putItems ~= false
            ragdoll.HasSecurityRadio = @HasSecurityRadio!
            ragdoll.HasSecurityKeys = @HasSecurityKeys!
            ragdoll.HasFlashlight = @CanUseFlashlight!
            ragdoll.HasShockCollar = @HasShockCollar!

            weapons, length = {}, 0
            for weapon in *@GetWeapons!
                if #weapon\GetWeaponWorldModel! == 0
                    continue

                @DropWeapon( weapon )
                unless weapon\IsValid!
                    continue

                weapon.PickupForbidden = true
                weapon\SetPos( spawnOrigin )
                weapon\SetParent( ragdoll )
                weapon\SetNotSolid( true )
                weapon\SetNoDraw( true )

                length += 1
                weapons[ length ] = weapon

            if length ~= 0
                ragdoll.Weapons = weapons

            ragdoll.Ammo = @GetAmmo!

        if ragdoll\IsValidObserveTarget!
            ragdoll\AddToObserveTargets!

        return ragdoll

do

    trace = {}

    fixupProp = ( entity, origin, mins, maxs ) =>
        downEndPos, upEndPos = entity\LocalToWorld( mins ), entity\LocalToWorld( maxs )
        trace.filter = { entity, @ }

        trace.start = origin
        trace.endpos = downEndPos
        traceResultDown = TraceLine( trace )

        trace.start = origin
        trace.endpos = upEndPos
        traceResultUp = TraceLine( trace )

        -- Both traces hit meaning we are probably inside a wall on both sides, do nothing
        if traceResultUp.Hit and traceResultDown.Hit
            return

        if traceResultDown.Hit
            entity\SetPos( origin + ( traceResultDown.HitPos - downEndPos ) )

        if traceResultUp.Hit
            entity\SetPos( origin + ( traceResultUp.HitPos - upEndPos ) )

    tryFixPosition = ( entity, origin ) =>
        mins, maxs = entity\GetCollisionBounds!
        mins[ 2 ], mins[ 3 ] = 0, 0
        maxs[ 2 ], maxs[ 3 ] = 0, 0

        fixupProp( @, entity, origin, mins, maxs )

        mins, maxs = entity\GetCollisionBounds!
        mins[ 1 ], mins[ 3 ] = 0, 0
        maxs[ 1 ], maxs[ 3 ] = 0, 0

        fixupProp( @, entity, origin, mins, maxs )

        mins, maxs = entity\GetCollisionBounds!
        mins[ 1 ], mins[ 2 ] = 0, 0
        maxs[ 1 ], maxs[ 2 ] = 0, 0

        fixupProp( @, entity, origin, mins, maxs )

    NOTIFY_ERROR = NOTIFY_ERROR

    PLAYER.SpawnEntity = ( className, preSpawn ) =>
        trace.start = @GetShootPos!
        trace.endpos = trace.start + ( @GetAimVector! * 2048 )
        trace.filter = @

        traceResult = TraceLine( trace )
        if not traceResult.Hit or traceResult.Fraction < 0.025
            @SendNotify( "#jb.error.cant-do-that", NOTIFY_ERROR, 10 )
            return NULL

        entity = Create( className )
        unless entity and entity\IsValid!
            return NULL

        ang = @EyeAngles!
        ang[ 1 ] = 0
        ang[ 2 ] += 180
        ang[ 3 ] = 0

        origin = traceResult.HitPos
        entity\SetPos( origin )
        entity\SetAngles( ang )

        if preSpawn ~= nil
            preSpawn( @, entity )

        entity\Spawn!
        entity\Activate!

        origin = entity\NearestPoint( origin - ( traceResult.HitNormal * entity\OBBMins! ) )
        entity\SetPos( origin )

        tryFixPosition( @, entity, origin )
        return entity
