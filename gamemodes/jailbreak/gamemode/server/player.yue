Jailbreak = Jailbreak
hook_Run = hook.Run
:Create = ents
NULL = NULL

PLAYER = FindMetaTable( "Player" )
PLAYER.ChangeTeam = Jailbreak.ChangeTeam

do

    :Start, :WriteUInt, :WriteTable, :WriteString, :WriteBool, :WriteEntity, :Send = net

    PLAYER.PlaySound = ( soundPath ) =>
        Start( "Jailbreak::Networking" )
        WriteUInt( 4, 3 )
        WriteString( soundPath )
        Send( @ )

    PLAYER.SendPickupNotify = ( itemName ) =>
        Start( "Jailbreak::Networking" )
        WriteUInt( 1, 3 )
        WriteString( itemName )
        Send( @ )

    PLAYER.ResetToggles = =>
        Start( "Jailbreak::Networking" )
        WriteUInt( 6, 3 )
        Send( @ )

    do

        RecipientFilter = RecipientFilter
        isfunction = isfunction
        :Simple = timer

        PLAYER.AnimRestartNetworkedGesture = ( slot, activity, autokill, finished, frac ) =>
            sequenceID = @SelectWeightedSequence( activity )
            if sequenceID < 0
                return

            rf = RecipientFilter!
            rf\AddPVS( @WorldSpaceCenter! )
            if rf\GetCount! > 0
                Start( "Jailbreak::Networking" )
                WriteUInt( 5, 3 )
                WriteEntity( @ )
                WriteUInt( slot, 3 )
                WriteUInt( activity, 11 )
                WriteBool( autokill or false )
                Send( rf )

            if isfunction( finished )
                duration = @SequenceDuration( sequenceID )
                Simple duration - duration * ( frac or 0 ), ->
                    if @IsValid!
                        finished( @ )

            @AnimRestartGesture( slot, activity, autokill )

    do

        sounds = {
            [ NOTIFY_GENERIC ]: "buttons/button9.wav"
            [ NOTIFY_ERROR ]: "player/suit_denydevice.wav"
            [ NOTIFY_HINT ]: "buttons/button24.wav"
            [ NOTIFY_CLEANUP ]: "buttons/button6.wav"
            [ NOTIFY_UNDO ]: "buttons/button8.wav"
        }

        PLAYER.SendNotify = ( text, typeID, length, ... ) =>
            Start( "Jailbreak::Networking" )
            WriteUInt( 2, 3 )
            WriteString( text )
            WriteTable( { ... }, true )
            WriteUInt( typeID, 3 )
            WriteUInt( length, 16 )
            Send( @ )

            soundPath = sounds[ typeID ]
            if soundPath ~= nil
                @PlaySound( soundPath )

PLAYER.SetWarden = ( bool, silent ) =>
    if bool == @IsWarden!
        return

    @SetNW2Bool( "is-warden", bool )
    unless silent
        hook_Run( "WardenChanged", @, bool )

PLAYER.SetShockCollar = ( bool, silent ) =>
    if bool == @HasShockCollar!
        return

    @SetNW2Bool( "shock-collar", bool )
    unless silent
        hook_Run( "ShockCollarChanged", @, bool )

-- Allows player to open security doors and lock them
PLAYER.AllowSecurityAccess = ( bool ) =>
    @SetNW2Bool( "security-access", bool )

-- Allows player to use security radio
PLAYER.AllowSecurityRadio = ( bool ) =>
    @SetNW2Bool( "security-radio", bool )

-- Allows player to fly
PLAYER.AllowFlight = ( bool ) =>
    @SetNW2Bool( "flight-allowed", bool )

do

    OBS_MODE_ROAMING = OBS_MODE_ROAMING
    OBS_MODE_CHASE = OBS_MODE_CHASE

    PLAYER.ObserveEntity = ( entity ) =>
        unless entity and entity\IsValid!
            if @GetObserverMode! ~= OBS_MODE_ROAMING
                @Spectate( OBS_MODE_ROAMING )

            return

        if @GetObserverTarget! ~= entity
            @SpectateEntity( entity )

        if @GetObserverMode! ~= OBS_MODE_CHASE
            @Spectate( OBS_MODE_CHASE )

    do

        :ObserveTargets = Jailbreak

        PLAYER.MoveObserveIndex = ( move, players ) =>
            if #ObserveTargets == 0
                return

            index, length = ( @LastSpectatedIndex or 0 ) + move, #ObserveTargets
            if index > length
                index = 1
            elseif index < 1
                index = length

            entity = ObserveTargets[ index ]
            if entity\IsPlayer! or entity\IsRagdoll!
                @ObserveEntity( entity )
            else

                if @GetObserverMode! ~= OBS_MODE_ROAMING
                    @Spectate( OBS_MODE_ROAMING )

                angles = entity\GetAngles!
                angles[ 3 ] = 0

                @SetEyeAngles( angles )
                @SetPos( entity\GetPos! )

            @LastSpectatedIndex = index

PLAYER.UsingMegaphone = =>
    return @IsWarden! and @GetInfo( "jb_megaphone" ) == "1"

do

    WeaponHandlers = WeaponHandlers or {}

    PLAYER.Give = ( className, noAmmo ) =>
        handler = WeaponHandlers[ className ]
        if handler
            className = handler.Alternative or className

        if @HasWeapon( className )
            return NULL

        weapon = Create( className )
        unless IsValid( weapon )
            return NULL

        weapon\SetAngles( @GetAngles! )
        weapon\SetPos( @GetPos! )

        weapon\Spawn!
        weapon\Activate!

        unless weapon\IsWeapon!
            return weapon

        if hook_Run( "PlayerCanPickupWeapon", @, weapon ) == false
            weapon\Remove!
            return NULL

        if noAmmo
            weapon\SetClip1( 0 )
            weapon\SetClip2( 0 )

        @PickupWeapon( weapon, false )
        return weapon

PLAYER.SetMutedByWarden = ( bool ) =>
    @SetNW2Bool( "warden-mute", bool )

PLAYER.RemoveRagdoll = =>
    ragdoll = @GetRagdollEntity!
    if ragdoll\IsValid!
        ragdoll\Remove!

PLAYER.CreateClientsideRagdoll = PLAYER.CreateClientsideRagdoll or PLAYER.CreateRagdoll
COLLISION_GROUP_PASSABLE_DOOR = COLLISION_GROUP_PASSABLE_DOOR

do

    :IsInWorld, :IsValidModel, :TraceLine = util
    :RagdollRemove, :FixModelPath = Jailbreak
    trace = {}

    PLAYER.CreateRagdoll = =>
        if RagdollRemove\GetBool!
            @RemoveRagdoll!

        spawnOrigin = @GetPos!
        unless IsInWorld( spawnOrigin )
            return NULL

        modelPath = @GetModel!
        unless modelPath
            return NULL

        modelPath = FixModelPath( modelPath )
        unless IsValidModel( modelPath )
            return NULL

        ragdoll = Create( @GetBoneCount! > 1 and "prop_ragdoll" or "prop_physics" )
        ragdoll\SetAngles( @GetAngles! )
        ragdoll\SetModel( modelPath )
        ragdoll\SetPos( spawnOrigin )
        ragdoll\Spawn!

        ragdoll.Team = @Team!

        if @Alive!
            ragdoll.Alive = true

            angles = @EyeAngles!
            angles[ 1 ] = 0
            angles[ 3 ] = 0
            ragdoll.PlayerAngles = angles

            ragdoll\SetMaxHealth( @GetMaxHealth! )
            ragdoll\SetHealth( @Health! )

            ragdoll.MaxArmor = @GetMaxArmor!
            ragdoll.Armor = @Armor!
        else
            ragdoll.Alive = false

            health = @GetMaxHealth!
            ragdoll\SetMaxHealth( health )
            ragdoll\SetHealth( health )

        for bodygroup in *@GetBodyGroups!
            ragdoll\SetBodygroup( bodygroup.id, @GetBodygroup( bodygroup.id ) )

        ragdoll\SetFlexScale( @GetFlexScale! )
        for flexID = 0, @GetFlexNum!
            ragdoll\SetFlexWeight( flexID, @GetFlexWeight( flexID ) )

        ragdoll\SetPlayerColor( @GetPlayerColor! )
        ragdoll\SetMaterial( @GetMaterial! )
        ragdoll\SetColor( @GetColor! )
        ragdoll\SetSkin( @GetSkin! )

        for index = 1, #@GetMaterials!
            materialPath = @GetSubMaterial( index )
            if materialPath ~= ""
                ragdoll\SetSubMaterial( index, materialPath )

        ragdoll\SetCollisionGroup( COLLISION_GROUP_PASSABLE_DOOR )
        ragdoll\SetNW2Bool( "is-player-ragdoll", true )
        ragdoll\SetNW2Entity( "ragdoll-owner", @ )
        @SetNW2Entity( "player-ragdoll", ragdoll )

        unless @IsBot!
            ragdoll\SetNW2String( "owner-steamid64", @SteamID64! )
        ragdoll\SetNW2String( "owner-nickname", @Nick! )

        for bone = 0, @GetBoneCount! - 1
            ragdoll\ManipulateBonePosition( bone, @GetManipulateBonePosition( bone ) )
            ragdoll\ManipulateBoneAngles( bone, @GetManipulateBoneAngles( bone ) )
            ragdoll\ManipulateBoneJiggle( bone, @GetManipulateBoneJiggle( bone ) )
            ragdoll\ManipulateBoneScale( bone, @GetManipulateBoneScale( bone ) )

        if ragdoll\IsRagdoll!
            velocity = @LastVelocity
            for physNum = 0, ragdoll\GetPhysicsObjectCount! - 1 do
                phys = ragdoll\GetPhysicsObjectNum( physNum )
                unless IsValid( phys )
                    continue

                bone = ragdoll\TranslatePhysBoneToBone( physNum )
                if bone < 0
                    continue

                origin, angles = @GetBonePosition( bone )
                if origin ~= nil
                    phys\SetAngles( angles )
                    unless IsInWorld( origin )
                        continue

                    trace.start = origin
                    trace.endpos = origin
                    trace.filter = { ragdoll, @ }

                    if TraceLine( trace ).Hit
                        continue

                    phys\SetPos( origin )

                phys\SetVelocity( velocity )
                phys\Wake!

        else
            phys = ragdoll\GetPhysicsObject!
            if IsValid( phys )
                phys\SetVelocity( @LastVelocity )
                phys\Wake!

        if @IsOnFire!
            ragdoll\Ignite( 5, 64 )
            @Extinguish!

        hook_Run( "PlayerRagdollCreated", @, ragdoll )

        ragdoll.HasSecurityAccess = @HasSecurityAccess!
        ragdoll.HasSecurityRadio = @HasSecurityRadio!
        ragdoll.HasFlashlight = @CanUseFlashlight!
        ragdoll.HasShockCollar = @HasShockCollar!

        weapons = {}
        for weapon in *@GetWeapons!
            @DropWeapon( weapon )

            weapon\SetPos( spawnOrigin )
            weapon\SetParent( ragdoll )
            weapon\SetNotSolid( true )
            weapon\SetNoDraw( true )

            weapon.PickupForbidden = true
            weapons[] = weapon
        ragdoll.Weapons = weapons
        ragdoll.Ammo = @GetAmmo!

        ragdoll\AddToObserveTargets!
        return ragdoll
