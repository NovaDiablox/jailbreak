ENTITY, PLAYER = ENTITY, PLAYER
NOTIFY_UNDO = NOTIFY_UNDO
Jailbreak = Jailbreak

:IsInWorld, :IsValidModel, :TraceLine = util
vector_origin = vector_origin
:FixModelPath = Jailbreak
:Add, :Run = hook
:Simple = timer
:Create = ents

OBS_MODE_ROAMING = OBS_MODE_ROAMING
NULL = NULL

PLAYER.ChangeTeam = Jailbreak.ChangeTeam
:SetNW2Var = ENTITY

-- Flashlight
PLAYER.HasFlashlight = PLAYER.CanUseFlashlight

PLAYER.GiveFlashlight = ( ply, silent ) ->
    if ply\HasFlashlight!
        return false

    if ply\FlashlightIsOn!
        ply\Flashlight( false )

    ply\AllowFlashlight( true )

    unless ply\IsBot! or silent
        ply\SendPickupNotify( "jb.flashlight" )

    return true

PLAYER.TakeFlashlight = ( ply, silent ) ->
    unless ply\HasFlashlight!
        return false

    if ply\FlashlightIsOn!
        ply\Flashlight( false )

    ply\AllowFlashlight( false )

    unless ply\IsBot! or silent
        ply\SendNotify( "#jb.flashlight.lost", NOTIFY_UNDO, 5 )

    return true

-- Security keys
PLAYER.GiveSecurityKeys = ( ply, silent ) ->
    if ply\HasSecurityKeys!
        return false

    SetNW2Var( ply, "security-keys", true )

    unless ply\IsBot! or silent
        ply\SendPickupNotify( "jb.security.keys" )

    return true

PLAYER.TakeSecurityKeys = ( ply, silent ) ->
    unless ply\HasSecurityKeys!
        return false

    SetNW2Var( ply, "security-keys", false )

    unless ply\IsBot! or silent
        ply\SendNotify( "#jb.security.keys.lost", NOTIFY_UNDO, 5 )

    return true

-- Security radio
PLAYER.GiveSecurityRadio = ( ply, silent ) ->
    if ply\HasSecurityRadio!
        return false

    SetNW2Var( ply, "security-radio", true )

    unless ply\IsBot! or silent
        ply\SendPickupNotify( "jb.walkie-talkie" )

    return true

PLAYER.TakeSecurityRadio = ( ply, silent ) ->
    unless ply\HasSecurityRadio!
        return false

    SetNW2Var( ply, "security-radio", false )

    unless ply\IsBot! or silent
        ply\SendNotify( "#jb.walkie-talkie.lost", NOTIFY_UNDO, 5 )

    return true

do

    setShockCollar = ( ply, bool, silent ) ->
        bool = bool == true

        if bool == ply\ShockCollarIsEnabled!
            return

        SetNW2Var( ply, "shock-collar-enabled", bool )

        unless silent
            Run( "ShockCollarToggled", ply, bool )

        return

    PLAYER.SetShockCollar = setShockCollar

    PLAYER.GiveShockCollar = ( ply, silent ) ->
        if ply\HasShockCollar!
            return

        SetNW2Var( ply, "shock-collar", true )
        setShockCollar( ply, false, true )

        unless ply\IsBot! or silent
            ply\SendPickupNotify( "jb.shock-collar" )

        return

    PLAYER.TakeShockCollar = ( ply, silent ) ->
        if ply\HasShockCollar!
            setShockCollar( ply, false, true )
            SetNW2Var( ply, "shock-collar", false )

            unless ply\IsBot! or silent
                ply\SendNotify( "#jb.shock-collar.lost", NOTIFY_UNDO, 5 )

        return

do

    setWarden = ( ply, bool, silent ) ->
        bool = bool == true

        if bool == ply\IsWarden!
            return

        SetNW2Var( ply, "is-warden", bool )

        unless silent
            Run( "WardenChanged", ply, bool )

        return

    PLAYER.SetWarden = setWarden

    Add "PostPlayerDeath", "Jailbreak::WardenDeath", ( ply ) ->
        setWarden( ply, false )
        return

do

    allowFlight = ( ply, bool ) ->
        bool = bool == true

        if bool == false
            SetNW2Var( ply, "in-flight", bool )

        SetNW2Var( ply, "flight-allowed", bool )
        return

    PLAYER.AllowFlight = allowFlight

    Add "PostPlayerDeath", "Jailbreak::DisallowFlight", ( ply ) ->
        allowFlight( ply, false )
        return

do

    :PlayerSlowWalkSpeed, :PlayerWalkSpeed, :PlayerRunSpeed, :PlayerJumpPower = Jailbreak

    PLAYER.SetupMovement = ( ply ) ->
        ply\SetSlowWalkSpeed( PlayerSlowWalkSpeed\GetInt! )
        ply\SetWalkSpeed( PlayerWalkSpeed\GetInt! )
        ply\SetRunSpeed( PlayerRunSpeed\GetInt! )
        ply\SetJumpPower( PlayerJumpPower\GetInt! )
        Run( "SetupPlayerMovement", ply )
        return

do

    :Start, :WriteUInt, :WriteTable, :WriteString, :WriteBool, :WriteEntity, :Send = net

    PLAYER.PlaySound = ( ply, soundPath ) ->
        Start( "Jailbreak::Networking" )
        WriteUInt( 3, 4 )
        WriteString( soundPath )
        Send( ply )
        return

    PLAYER.SendPickupNotify = ( ply, itemName, pickupType, amount ) ->
        Start( "Jailbreak::Networking" )
        WriteUInt( 1, 4 )
        WriteString( itemName )
        WriteUInt( pickupType or 0, 6 )
        WriteUInt( amount or 1, 16 )
        Send( ply )
        return

    do

        util.AddNetworkString( "Jailbreak::Shop" )
        :ShopItems = Jailbreak
        length = 0

        PLAYER.SendShopItems = ( ply ) ->
            Start( "Jailbreak::Shop" )

            length = #ShopItems
            WriteUInt( length, 16 )

            for index = 1, length
                item = ShopItems[ index ]
                if item ~= nil
                    WriteString( item.name )
                    WriteString( item.model )
                    WriteUInt( item.price, 16 )
                    WriteUInt( item.skin, 8 )
                    WriteString( item.bodygroups )

            Send( ply )
            return

    PLAYER.ResetToggles = ( ply ) ->
        Start( "Jailbreak::Networking" )
        WriteUInt( 5, 4 )
        Send( ply )
        return

    do

        RecipientFilter = RecipientFilter
        isfunction = isfunction

        PLAYER.AnimRestartNetworkedGesture = ( ply, slot, activity, autokill, finished, frac ) ->
            sequenceID = ply\SelectWeightedSequence( activity )
            if sequenceID < 0
                return

            rf = RecipientFilter!
            rf\AddPVS( ply\WorldSpaceCenter! )

            if rf\GetCount! > 0
                Start( "Jailbreak::Networking" )
                WriteUInt( 4, 4 )
                WriteEntity( ply )
                WriteUInt( slot, 3 )
                WriteUInt( activity, 11 )
                WriteBool( autokill or false )
                Send( rf )

            if isfunction( finished )
                duration = ply\SequenceDuration( sequenceID )
                Simple duration - duration * ( frac or 0 ), ->
                    if ply\IsValid!
                        finished( ply )

            ply\AnimRestartGesture( slot, activity, autokill )
            return

    do

        sounds = {
            [ NOTIFY_GENERIC ]: "buttons/button9.wav"
            [ NOTIFY_ERROR ]: "player/suit_denydevice.wav"
            [ NOTIFY_HINT ]: "buttons/button9.wav"
            [ NOTIFY_CLEANUP ]: "buttons/button6.wav"
            [ NOTIFY_UNDO ]: "buttons/button9.wav"
        }

        PLAYER.SendNotify = ( ply, text, typeID, length, ... ) ->
            Start( "Jailbreak::Networking" )
            WriteUInt( 2, 4 )
            WriteString( text )
            WriteTable( { ... }, true )
            WriteUInt( typeID, 3 )
            WriteUInt( length, 16 )
            Send( ply )

            soundPath = sounds[ typeID ]
            if soundPath ~= nil
                ply\PlaySound( soundPath )

            return

PLAYER.ObserveEntity = ( ply, entity ) ->
    if ply\Alive!
        return

    if entity and entity\IsValid!
        ply\Spectate( OBS_MODE_CHASE )
        ply\SpectateEntity( entity )
        return

    eyeAngles = ply\EyeAngles!
    ply\SpectateEntity!
    ply\Spectate( OBS_MODE_ROAMING )
    ply\SetEyeAngles( eyeAngles )
    return

do

    :ObserveTargets = Jailbreak
    index, length = 0, 0

    PLAYER.MoveObserveIndex = ( ply, step, players ) ->
        length = #ObserveTargets
        if length == 0
            return

        index = ( ply.m_iLastSpectatedIndex or 0 ) + step
        if index > length
            index = 1
        elseif index < 1
            index = length

        entity = ObserveTargets[ index ]
        unless entity\IsValid!
            if ply\GetObserverMode! ~= OBS_MODE_ROAMING
                ply\Spectate( OBS_MODE_ROAMING )

            ply.m_iLastSpectatedIndex = 0
            return

        ply.m_iLastSpectatedIndex = index

        if entity\IsPlayer! or entity\IsRagdoll!
            ply\ObserveEntity( entity )
            return

        if ply\GetObserverMode! ~= OBS_MODE_ROAMING
            ply\Spectate( OBS_MODE_ROAMING )

        angles = entity\GetAngles!
        angles[ 3 ] = 0

        ply\SetEyeAngles( angles )
        ply\SetPos( entity\GetPos! )
        return

PLAYER.UsingMegaphone = ( ply ) ->
    return ply\IsWarden! and ply\Alive! and ply\GetInfo( "jb_megaphone" ) == "1"

do

    white = Color( 255, 255, 255, 240 )
    CurTime = CurTime
    :IN = SCREENFADE

    PLAYER.ShockScreenEffect = ( ply, time, color, fadeTime, blockMovement ) ->
        if blockMovement ~= false
            SetNW2Var( ply, "shock-time", CurTime! + ( time or 3 ) )

        ply\ScreenFade( IN, color or white, fadeTime or 0.25, time or 3 )
        return

do

    WeaponHandlers = WeaponHandlers or {}

    PLAYER.Give = ( ply, className, noAmmo, force ) ->
        handler = WeaponHandlers[ className ]
        if handler
            className = handler.Alternative or className

        if ply\HasWeapon( className )
            return NULL

        weapon = Create( className )
        unless weapon and weapon\IsValid!
            return NULL

        weapon\SetAngles( ply\GetAngles! )
        weapon\SetPos( ply\GetPos! )

        weapon\Spawn!
        weapon\Activate!

        unless weapon\IsWeapon!
            return weapon

        if not force and Run( "PlayerCanPickupWeapon", ply, weapon ) == false
            weapon\Remove!
            return NULL

        if noAmmo
            weapon\SetClip1( 0 )
            weapon\SetClip2( 0 )

        ply\PickupWeapon( weapon, false )
        return weapon

PLAYER.SetMutedByWarden = ( ply, state ) ->
    SetNW2Var( ply, "warden-mute", state ~= false )

PLAYER.RemoveRagdoll = ( ply ) ->
    ragdoll = ply\GetRagdollEntity!
    if ragdoll and ragdoll\IsValid!
        ragdoll\Remove!

    return

do

    :ceil = math

    PLAYER.Heal = ( ply, frac ) ->
        amount = ceil( ply\GetMaxHealth! * ( frac or 1 ) )
        ply\SetHealth( amount )
        return amount

do

    :max = math

    PLAYER.AddHealth = ( ply, amount ) ->
        amount = max( ply\GetHealth! + amount, ply\GetMaxHealth! )
        ply\SetHealth( amount )
        return amount

    PLAYER.TakeHealth = ( ply, amount ) ->
        amount = max( 0, ply\GetHealth! - amount )
        ply\SetHealth( amount )
        return amount

PLAYER.CreateClientsideRagdoll = PLAYER.CreateClientsideRagdoll or PLAYER.CreateRagdoll
COLLISION_GROUP_PASSABLE_DOOR = COLLISION_GROUP_PASSABLE_DOOR

do

    :RagdollRemove, :RagdollHealth, :IsRoundPreparing, :DropActiveWeaponOnDeath = Jailbreak

    Add "PlayerCanCreateRagdoll", "Jailbreak::NoRagdollsOnPreparing", ->
        if IsRoundPreparing!
            return false

    traceResult = {}
    trace = { output: traceResult }

    PLAYER.CreateRagdoll = ( ply, putItems ) ->
        putItems = putItems ~= false

        if Run( "PlayerCanCreateRagdoll", ply, putItems ) == false
            return NULL

        if RagdollRemove\GetBool!
            ply\RemoveRagdoll!

        spawnOrigin = ply\GetPos!
        unless IsInWorld( spawnOrigin )
            return NULL

        modelPath = ply\GetModel!
        unless modelPath
            return NULL

        modelPath = FixModelPath( modelPath )
        unless IsValidModel( modelPath )
            return NULL

        ragdoll = Create( ply\GetBoneCount! > 1 and "prop_ragdoll" or "prop_physics" )
        ragdoll\SetAngles( ply\GetAngles! )
        ragdoll\SetModel( modelPath )
        ragdoll\SetPos( spawnOrigin )
        ragdoll\Spawn!

        ragdoll\SetHealth( RagdollHealth\GetInt! )
        ragdoll\SetMaxHealth( ragdoll\Health! )
        ragdoll\SetTeam( ply\Team! )

        if ply\Alive!
            ragdoll\SetAlive( true )

            ragdoll.MaxArmor = ply\GetMaxArmor!
            ragdoll.Armor = ply\Armor!

            angles = ply\EyeAngles!
            angles[ 1 ], angles[ 3 ] = 0, 0
            ragdoll.PlayerAngles = angles

        for bodygroup in *ply\GetBodyGroups!
            ragdoll\SetBodygroup( bodygroup.id, ply\GetBodygroup( bodygroup.id ) )

        ragdoll\SetFlexScale( ply\GetFlexScale! )
        for flexID = 0, ply\GetFlexNum!
            ragdoll\SetFlexWeight( flexID, ply\GetFlexWeight( flexID ) )

        ragdoll\SetPlayerColor( ply\GetPlayerColor! )
        ragdoll\SetModelScale( ply\GetModelScale! )
        ragdoll\SetMaterial( ply\GetMaterial! )
        ragdoll\SetColor( ply\GetColor! )
        ragdoll\SetSkin( ply\GetSkin! )

        for index = 1, #ply\GetMaterials!
            materialPath = ply\GetSubMaterial( index )
            if materialPath and #materialPath ~= 0
                ragdoll\SetSubMaterial( index, materialPath )

        ragdoll\SetCollisionGroup( COLLISION_GROUP_PASSABLE_DOOR )
        SetNW2Var( ragdoll, "is-player-ragdoll", true )
        SetNW2Var( ply, "player-ragdoll", ragdoll )
        SetNW2Var( ragdoll, "ragdoll-owner", ply )

        unless ply\IsBot!
            SetNW2Var( ragdoll, "owner-steamid64", ply\SteamID64! )

        SetNW2Var( ragdoll, "owner-nickname", ply\Nick! )

        for bone = 0, ply\GetBoneCount! - 1
            ragdoll\ManipulateBonePosition( bone, ply\GetManipulateBonePosition( bone ) )
            ragdoll\ManipulateBoneAngles( bone, ply\GetManipulateBoneAngles( bone ) )
            ragdoll\ManipulateBoneJiggle( bone, ply\GetManipulateBoneJiggle( bone ) )
            ragdoll\ManipulateBoneScale( bone, ply\GetManipulateBoneScale( bone ) )

        if ragdoll\IsRagdoll!
            velocity = ply.m_vLastVelocity
            for physNum = 0, ragdoll\GetPhysicsObjectCount! - 1
                phys = ragdoll\GetPhysicsObjectNum( physNum )
                unless phys and phys\IsValid!
                    continue

                bone = ragdoll\TranslatePhysBoneToBone( physNum )
                if bone < 0
                    continue

                origin, angles = ply\GetBonePosition( bone )
                if origin
                    phys\SetAngles( angles )
                    unless IsInWorld( origin )
                        continue

                    trace.start = origin
                    trace.endpos = origin
                    trace.filter = { ragdoll, ply }
                    TraceLine( trace )

                    if traceResult.Hit
                        continue

                    phys\SetPos( origin )

                phys\SetVelocity( velocity )
                phys\Wake!

        else

            phys = ragdoll\GetPhysicsObject!
            if phys and phys\IsValid!
                phys\SetVelocity( ply.m_vLastVelocity )
                phys\Wake!

        if ply\IsOnFire!
            ragdoll\Ignite( 5, 64 )
            ply\Extinguish!

        Run( "PlayerRagdollCreated", ply, ragdoll )

        if putItems
            boolean = DropActiveWeaponOnDeath\GetBool!
            if boolean
                ply\DropWeapon!

            boolean = ply\HasSecurityRadio!
            ragdoll.HasSecurityRadio = boolean
            if boolean
                ply\TakeSecurityRadio!

            boolean = ply\HasSecurityKeys!
            ragdoll.HasSecurityKeys = boolean
            if boolean
                ply\TakeSecurityKeys!

            boolean = ply\CanUseFlashlight!
            ragdoll.HasFlashlight = boolean
            if boolean
                ply\TakeFlashlight!

            boolean = ply\HasShockCollar!
            ragdoll.HasShockCollar = boolean
            if boolean
                ply\TakeShockCollar!

            weapons, length = {}, 0
            for weapon in *ply\GetWeapons!
                if #weapon\GetWeaponWorldModel! == 0
                    continue

                ply\DropWeapon( weapon )
                unless weapon\IsValid!
                    continue

                weapon.m_bPickupForbidden = true
                weapon\SetPos( spawnOrigin )
                weapon\SetParent( ragdoll )
                weapon\SetNotSolid( true )
                weapon\SetNoDraw( true )

                length += 1
                weapons[ length ] = weapon

            if length ~= 0
                ragdoll.Weapons = weapons

            ragdoll.Ammo = ply\GetAmmo!
            ply\RemoveAllAmmo!

        ragdoll\AddToObserveTargets!
        return ragdoll

do

    :Shuffle = table
    pairs = pairs
    :min = math

    PLAYER.LootRagdoll = ( ply, ragdoll ) ->
        velocity = vector_origin

        direction = ply\EyePos! - ragdoll\WorldSpaceCenter!
        direction\Normalize!

        if ragdoll.HasFlashlight and not ply\HasFlashlight!
            ragdoll.HasFlashlight = nil
            velocity += direction * 150
            ply\GiveFlashlight!

        if ragdoll.HasSecurityKeys and not ply\HasSecurityKeys!
            ragdoll.HasSecurityKeys = nil
            velocity += direction * 50
            ply\GiveSecurityKeys!

        if ragdoll.HasSecurityRadio and not ply\HasSecurityRadio!
            ragdoll.HasSecurityRadio = nil
            velocity += direction * 50
            ply\GiveSecurityRadio!

        :Weapons = ragdoll
        if Weapons ~= nil
            spawnOrigin = ply\WorldSpaceCenter!
            weapon = NULL

            for index = 1, #Weapons
                weapon = Weapons[ index ]
                if not weapon\IsValid! or weapon\GetOwner!\IsValid! or weapon\GetParent! ~= ragdoll
                    continue

                weapon\SetParent!
                weapon\SetNoDraw( false )
                weapon\SetNotSolid( false )
                weapon.m_bPickupForbidden = nil

                if Run( "PlayerCanPickupWeapon", ply, weapon ) == false
                    weapon\SetPos( spawnOrigin )
                else
                    ply\PickupWeapon( weapon )

                velocity += direction * 200

            ragdoll.Weapons = nil

        :Ammo = ragdoll
        if Ammo ~= nil
            count, amount = 0, 0
            for ammoType, ammoCount in pairs( Ammo )
                amount = min( ammoCount, ply\GetPickupAmmoCount( ammoType ) )
                if amount < 1
                    continue

                ply\GiveAmmo( amount, ammoType )
                velocity += direction * 100
                ammoCount -= amount

                if ammoCount > 0
                    Ammo[ ammoType ] = ammoCount
                    count += 1
                else
                    Ammo[ ammoType ] = nil

            if count == 0
                ragdoll.Ammo = nil

        if velocity\Length! < 100
            return

        if ragdoll\IsRagdoll!
            physParts, length = {}, 0
            for physNum = 1, ragdoll\GetPhysicsObjectCount! - 1
                phys = ragdoll\GetPhysicsObjectNum( physNum )
                if phys and phys\IsValid!
                    length += 1
                    physParts[ length ] = phys

            Shuffle( physParts )

            for index = 1, min( length, 6 )
                physParts[ index ]\ApplyForceCenter( velocity )

        else

            phys = ragdoll\GetPhysicsObject!
            if phys and phys\IsValid!
                phys\ApplyForceCenter( velocity )

        Run( "PlayerLootedRagdoll", ply, ragdoll )
        return

do

    angle_zero = angle_zero
    :Clamp = math

    PLAYER.SpawnFromRagdoll = ( ply, ragdoll, ignoreHealth ) ->
        if ply\Team! ~= ragdoll\Team!
            ply\SetTeam( ragdoll\Team! )

        unless ragdoll\Alive!
            if ply\Alive!
                ply\KillSilent!

            Simple 0, ->
                if ply\IsValid! and ply\Alive!
                    ply\ObserveEntity( ragdoll )
                    return

            return false

        ply\SetModel( ragdoll\GetModel! )
        ply\SetPos( ragdoll\WorldSpaceCenter! )
        ply\SetEyeAngles( ragdoll.PlayerAngles or angle_zero )

        if ignoreHealth ~= true
            ply\SetHealth( ply\GetMaxHealth! * Clamp( ragdoll\Health! - ( ragdoll\GetMaxHealth! * 0.75 ) / ( ragdoll\GetMaxHealth! * 0.25 ), 0, 1 ) )
            ply\SetArmor( ply\GetMaxArmor! * ( ( ragdoll.Armor or 0 ) / ( ragdoll.MaxArmor or 100 ) ) )

        ply\SetPlayerColor( ragdoll\GetPlayerColor! )
        ply\SetModelScale( ragdoll\GetModelScale! )
        ply\SetMaterial( ragdoll\GetMaterial! )
        ply\SetColor( ragdoll\GetColor! )
        ply\SetSkin( ragdoll\GetSkin! )

        for bodygroup in *ply\GetBodyGroups!
            ply\SetBodygroup( bodygroup.id, ragdoll\GetBodygroup( bodygroup.id ) )

        for index = 1, #ply\GetMaterials!
            materialPath = ragdoll\GetSubMaterial( index )
            if materialPath ~= ""
                ply\SetSubMaterial( index, materialPath )

        if ragdoll\IsOnFire!
            ragdoll\Extinguish!
            ply\Ignite( 5, 16 )

        for bone = 0, ply\GetBoneCount! - 1
            ply\ManipulateBonePosition( bone, ragdoll\GetManipulateBonePosition( bone ) )
            ply\ManipulateBoneAngles( bone, ragdoll\GetManipulateBoneAngles( bone ) )
            ply\ManipulateBoneJiggle( bone, ragdoll\GetManipulateBoneJiggle( bone ) )
            ply\ManipulateBoneScale( bone, ragdoll\GetManipulateBoneScale( bone ) )

        if ragdoll\IsRagdoll!
            velocity = vector_origin

            count = ragdoll\GetPhysicsObjectCount!
            for physNum = 0, count - 1
                phys = ragdoll\GetPhysicsObjectNum( physNum )
                if phys and phys\IsValid!
                    velocity += phys\GetVelocity!

            velocity /= count
            ply\SetVelocity( velocity )

        else

            phys = ragdoll\GetPhysicsObject!
            if phys and phys\IsValid!
                ply\SetVelocity( phys\GetVelocity! )

        if ragdoll.HasShockCollar
            ragdoll.HasShockCollar = nil
            ply\GiveShockCollar!

        ply\Give( "jb_hands", false, true )
        ply\LootRagdoll( ragdoll )
        return true

Add "PlayerSelectSpawn", "Jailbreak::AliveRagdoll", ( ply ) ->
    ragdoll = ply\GetRagdollEntity!
    if ragdoll and ragdoll\IsValid! and ragdoll\Alive!
        return ragdoll

PLAYER.SetLoseConsciousness = ( ply, state ) ->
    if state
        ragdoll = ply\CreateRagdoll( true )
        if ragdoll\IsValid!
            ply\DropObject!
            ply\SetMoveType( MOVETYPE_NONE )
            ply\DrawWorldModel( false )
            ply\SetNoDraw( true )
            ply\SetNotSolid( true )
            ply\SetCollisionGroup( 12 )
            SetNW2Var( ply, "lost-consciousness", true )

        return

    ragdoll = ply\GetRagdollEntity!
    if ragdoll\IsValid! and ragdoll\Alive!
        SetNW2Var( ply, "lost-consciousness", false )
        ply\SpawnFromRagdoll( ragdoll, true, true )
        ply\SetNoDraw( false )
        ply\DrawWorldModel( true )
        ply\SetCollisionGroup( 5 )
        ply\SetNotSolid( false )
        ply\SetMoveType( MOVETYPE_WALK )
        ragdoll\SetAlive( false )
        ragdoll\Remove!

    return

Add "PostPlayerDeath", "Jailbreak::LostConsciousness", ( ply ) ->
    SetNW2Var( ply, "lost-consciousness", false )
    return

do

    traceResultDown, traceResultUp = {}, {}
    trace = {}

    fixupProp = ( ply, entity, origin, mins, maxs ) ->
        downEndPos, upEndPos = entity\LocalToWorld( mins ), entity\LocalToWorld( maxs )
        trace.filter = { entity, ply }

        trace.start = origin
        trace.endpos = downEndPos
        trace.output = traceResultDown
        TraceLine( trace )

        trace.start = origin
        trace.endpos = upEndPos
        trace.output = traceResultUp
        TraceLine( trace )

        -- Both traces hit meaning we are probably inside a wall on both sides, do nothing
        if traceResultUp.Hit and traceResultDown.Hit
            return

        if traceResultDown.Hit
            entity\SetPos( origin + ( traceResultDown.HitPos - downEndPos ) )

        if traceResultUp.Hit
            entity\SetPos( origin + ( traceResultUp.HitPos - upEndPos ) )

        return

    tryFixPosition = ( ply, entity, origin ) ->
        mins, maxs = entity\GetCollisionBounds!
        mins[ 2 ], mins[ 3 ] = 0, 0
        maxs[ 2 ], maxs[ 3 ] = 0, 0

        fixupProp( ply, entity, origin, mins, maxs )

        mins, maxs = entity\GetCollisionBounds!
        mins[ 1 ], mins[ 3 ] = 0, 0
        maxs[ 1 ], maxs[ 3 ] = 0, 0

        fixupProp( ply, entity, origin, mins, maxs )

        mins, maxs = entity\GetCollisionBounds!
        mins[ 1 ], mins[ 2 ] = 0, 0
        maxs[ 1 ], maxs[ 2 ] = 0, 0

        fixupProp( ply, entity, origin, mins, maxs )
        return

    PLAYER.SpawnEntity = ( ply, className, preSpawn ) ->
        trace.start = ply\GetShootPos!
        unless IsInWorld( trace.start )
            return NULL

        entity = Create( className )
        unless entity and entity\IsValid!
            return NULL

        trace.endpos = trace.start + ( ply\GetAimVector! * 128 )
        trace.output = traceResultDown
        trace.filter = ply
        TraceLine( trace )

        origin = traceResultDown.HitPos
        entity\SetTeam( ply\Team! )
        entity\SetPos( origin )
        entity\SetCreator( ply )

        angles = ply\EyeAngles!
        angles[ 1 ] = 0
        angles[ 2 ] += 180
        angles[ 3 ] = 0

        entity\SetAngles( angles )

        if preSpawn ~= nil
            preSpawn( entity, ply )

        entity\Spawn!
        entity\Activate!

        origin = entity\NearestPoint( origin - ( traceResultDown.HitNormal * entity\OBBMins! ) )
        entity\SetPos( origin )

        tryFixPosition( ply, entity, origin )
        entity\PhysWake!
        return entity

do

    :PrecacheModel, :IsValidModel = util
    :SetModel = ENTITY

    PLAYER.SetModel = ( ply, modelPath ) ->
        modelPath = FixModelPath( modelPath )
        if IsValidModel( modelPath )
            PrecacheModel( modelPath )
            SetModel( ply, modelPath )
            Run( "PlayerModelChanged", ply, modelPath )
            ply\SetupHands!
            return true

        return false

do

    :GetNW2Int = ENTITY

    PLAYER.GetSpawnTime = ( ply ) ->
        return GetNW2Int( ply, "spawn-time" )

    PLAYER.GetAliveTime = ( ply ) ->
        return CurTime! - GetNW2Int( ply, "spawn-time" )

do

    :AvaliableWeapons = Jailbreak
    :Give, :HasWeapon = PLAYER
    :Random = table

    PLAYER.GiveRandomWeapons = ( ply, count ) ->
        unless count
            count = 4

        gived = {}
        for i = 1, count * 2
            if count == 0
                break

            className = Random( AvaliableWeapons, true )
            if HasWeapon( ply, className ) or gived[ className ] == true
                continue

            if Give( ply, className, false )\IsValid!
                gived[ className ] = true
                count -= 1

PLAYER.SetEscaped = ( ply, state ) ->
    SetNW2Var( ply, "escaped", state == true )
    return

Add "PostPlayerDeath", "Jailbreak::Escape", ( ply ) ->
    SetNW2Var( ply, "escaped", false )
    return
