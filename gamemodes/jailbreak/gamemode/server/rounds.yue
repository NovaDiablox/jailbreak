Jailbreak = Jailbreak
GM = GM

:GetTeamPlayersCount, :Teams, :PrepareTime, :RoundTime, :PlaySound = Jailbreak
hook_Run = hook.Run
CurTime = CurTime

ROUND_WAITING_PLAYERS = ROUND_WAITING_PLAYERS
ROUND_RUNNING = ROUND_RUNNING
ROUND_ENDED = ROUND_ENDED

TEAM_PRISONER = TEAM_PRISONER
TEAM_GUARD = TEAM_GUARD

setRoundState, setWinningTeam, setRoundTime = nil, nil, nil
do

    SetGlobal2Int = SetGlobal2Int

    -- Set the round state
    do

        :GetRoundState = Jailbreak

        setRoundState = ( state, silent ) ->
            oldState = GetRoundState!
            SetGlobal2Int( "round-state", state )
            unless silent
                hook_Run( "RoundStateChanged", oldState, state )

    Jailbreak.SetRoundState = setRoundState

    -- Set the winning team
    setWinningTeam = ( teamID ) ->
        if Teams[ teamID ]
            team.AddScore( teamID, 1 )

        SetGlobal2Int( "winning-team", teamID )

    Jailbreak.SetWinningTeam = setWinningTeam

    -- Set the round time
    setRoundTime = ( int ) ->
        SetGlobal2Int( "next-round-state", CurTime! + int )

    Jailbreak.SetRoundTime = setRoundTime

do

    :IsRoundRunning = Jailbreak
    :Create = timer

    playerChangedTeam = =>
        isWarden = @IsWarden!
        if isWarden
            @SetWarden( false, true )

        teamID = @Team!

        Create "Jailbreak::TeamPlayerCountChanged", 0.25, 1, ->
            unless IsRoundRunning!
                return

            teams = GetTeamPlayersCount( true, TEAM_GUARD, TEAM_PRISONER )
            if teams[ 1 ] == 0 or teams[ 2 ] == 0
                setRoundState( ROUND_ENDED )
            else

                if teamID == TEAM_PRISONER and teams[ 2 ] == 1
                    PlaySound( "ambient/levels/caves/ol04_gearengage.wav" )

                if isWarden and @IsValid!
                    hook_Run( "WardenChanged", ply, false )

    Jailbreak.PlayerChangedTeam = playerChangedTeam

    hook.Add "TeamPlayerDeath", "Jailbreak::TeamPlayerCountChanged", playerChangedTeam
    hook.Add "PlayerChangedTeam", "Jailbreak::TeamPlayerCountChanged", playerChangedTeam
    hook.Add "TeamPlayerDisconnected", "Jailbreak::TeamPlayerCountChanged", playerChangedTeam

-- Perform a round state change
do

    :RunEvents, :SetShockCollars, :ObserveTargets, :TeamIsJoinable, :GuardsDiff, :GetWarden, :PermanentGuards = Jailbreak
    timer_Simple = timer.Simple
    :ceil, :random = math
    :CleanUpMap = game
    :GetAll = player
    pairs = pairs

    GM.RoundStateChanged = ( old, new ) =>
        RunEvents( new )

        switch ( new )
            when ROUND_WAITING_PLAYERS
                SetShockCollars( false )

                for key in pairs( ObserveTargets )
                    ObserveTargets[ key ] = nil

                for ply in *GetAll!
                    if ply\IsInGame!
                        ply\KillSilent!

                    if ply\IsBot! or ( ply\IsGuard! and not PermanentGuards\GetBool! )
                        ply\SetTeam( TEAM_PRISONER )

                timer_Simple( 0, CleanUpMap )

            when ROUND_PREPARING
                SetShockCollars( true )

                for ply in *GetAll!
                    if ply\IsBot!
                        ply\SetTeam( TEAM_PRISONER )

                    if Teams[ ply\Team! ]
                        ply\Spawn!

                timer_Simple( 0, CleanUpMap )

            when ROUND_RUNNING
                PlaySound( "ambient/alarms/warningbell1.wav" )
                players = GetAll!

                for ply in *players
                    if ply\IsBot!
                        teamID = ply\Team!
                        for index = 1, 2
                            if index ~= teamID and TeamIsJoinable( index )
                                ply\SetTeam( index )
                                ply\KillSilent!
                                break

                teams = GetTeamPlayersCount( true, TEAM_GUARD, TEAM_PRISONER )
                if teams[ 1 ] == 0 or teams[ 2 ] == 0
                    setRoundState( ROUND_WAITING_PLAYERS )
                    return

                guards = {}
                for ply in *players
                    teamID = ply\Team!
                    if Teams[ teamID ]
                        if teamID == TEAM_GUARD
                            guards[] = ply
                        elseif teamID == TEAM_PRISONER
                            ply\SetShockCollar( true )

                        unless ply\Alive!
                            ply\Spawn!

                if #guards == 1
                    guards[ 1 ]\SetWarden( true )

                SetShockCollars( true )

                roundTime = RoundTime\GetInt!
                if roundTime > 0
                    setRoundTime( roundTime )

            when ROUND_ENDED
                teams = GetTeamPlayersCount( true, TEAM_GUARD, TEAM_PRISONER )
                if teams[ 1 ] > teams[ 2 ]
                    setWinningTeam( TEAM_GUARD )
                elseif teams[ 1 ] < teams[ 2 ]
                    setWinningTeam( TEAM_PRISONER )
                else
                    setWinningTeam( 0 )

                warden = GetWarden!
                if warden and warden\IsValid!
                    warden\SetWarden( false, true )

                setRoundTime( PrepareTime\GetInt! )
                PlaySound( "ambient/alarms/warningbell1.wav" )

-- https://wiki.facepunch.com/gmod/GM:PlayerChangedTeam
do

    :IsRoundPreparing, :GetPlayersCount = Jailbreak

    GM.PlayerChangedTeam = ( ply, oldTeam, newTeam ) =>
        if IsRoundPreparing! and Teams[ oldTeam ] and ( GetPlayersCount( oldTeam ) - 1 ) == 0
            setRoundState( ROUND_WAITING_PLAYERS )

-- Called when a in game player dies
GM.TeamPlayerDeath = ( ply, teamID ) =>
    ply\RemoveFromObserveTargets!
    ply\UnSpectate!

    ply\AllowSecurityAccess( false )
    ply\AllowSecurityRadio( false )
    ply\AllowFlashlight( false )

    if ply\HasShockCollar!
        ply\SetShockCollar( false, true )

    if ply\FlashlightIsOn!
        ply\Flashlight( false )

-- Called when a player disconnected
GM.TeamPlayerDisconnected = ( ply, teamID ) =>
    unless ply\Alive!
        return

    ply\RemoveFromObserveTargets!
    ply\CreateRagdoll!

do

    :IsWaitingPlayers = Jailbreak

    GM.TeamPlayerSpawn = ( ply, teamID ) =>
        ply\SetNoCollideWithTeammates( teamID == TEAM_GUARD or Jailbreak.GameName == "tf" )
        ply\AddToObserveTargets!

        if IsWaitingPlayers!
            teams = GetTeamPlayersCount( true, TEAM_GUARD, TEAM_PRISONER )
            if teams[ 1 ] > 0 and teams[ 2 ] > 0
                setRoundState( ROUND_PREPARING )
                setRoundTime( PrepareTime\GetInt! )

do

    :GetRoundTime, :GetRoundState = Jailbreak
    :AddScore = team

    GM.Think = =>
        if GetRoundTime! > CurTime!
            return

        switch GetRoundState!
            when ROUND_PREPARING
                setRoundState( ROUND_RUNNING )
            when ROUND_RUNNING
                if RoundTime\GetInt! == 0
                    return

                AddScore( TEAM_GUARD, 1 )
                setWinningTeam( TEAM_GUARD )

                setRoundState( ROUND_ENDED, true )
                setRoundTime( PrepareTime\GetInt! )
            when ROUND_ENDED
                setRoundState( ROUND_WAITING_PLAYERS )
