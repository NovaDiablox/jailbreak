Jailbreak = Jailbreak
GM = GM

:GetTeamPlayersCount, :Teams, :PrepareTime, :RoundTime, :PlaySound, :SendChatText, :GetRoundState = Jailbreak
CurTime = CurTime
:GetAll = player
:Run = hook

ROUND_WAITING_PLAYERS = ROUND_WAITING_PLAYERS
ROUND_RUNNING = ROUND_RUNNING
ROUND_FINISHED = ROUND_FINISHED

TEAM_PRISONER = TEAM_PRISONER
TEAM_GUARD = TEAM_GUARD

CHAT_SERVERMESSAGE = CHAT_SERVERMESSAGE

setRoundState, setWinningTeam, setRoundTime = nil, nil, nil
do

    SetGlobal2Int = SetGlobal2Int

    -- Set the round state
    setRoundState = ( state, silent ) ->
        oldState = GetRoundState!
        if oldState == state
            return

        SetGlobal2Int( "round-state", state )

        unless silent
            Run( "RoundStateChanged", oldState, state )

    Jailbreak.SetRoundState = setRoundState

    -- Set the winning team
    setWinningTeam = ( teamID ) ->
        if Teams[ teamID ]
            team.AddScore( teamID, 1 )

        SetGlobal2Int( "winning-team", teamID )

    Jailbreak.SetWinningTeam = setWinningTeam

    -- Set the round time
    setRoundTime = ( int ) ->
        SetGlobal2Int( "next-round-state", CurTime! + int )

    Jailbreak.SetRoundTime = setRoundTime

do

    :GetPlayersCount = Jailbreak
    :Create = timer

    lastPrisonersCount = 0

    playerChangedTeam = =>
        isWarden = @IsWarden!
        if isWarden
            @SetWarden( false, true )

        teamID = @Team!
        Create "Jailbreak::TeamPlayerCountChanged", 0.25, 1, ->
            switch GetRoundState!
                when ROUND_PREPARING
                    if Teams[ teamID ] and GetPlayersCount( teamID ) == 0
                        setRoundState( ROUND_WAITING_PLAYERS )

                when ROUND_RUNNING
                    teams = GetTeamPlayersCount( true, TEAM_GUARD, TEAM_PRISONER )
                    if teams[ 1 ] == 0 or teams[ 2 ] == 0
                        setRoundState( ROUND_FINISHED )
                    else

                        if teamID == TEAM_PRISONER and teams[ 2 ] == 1 and teams[ 2 ] < lastPrisonersCount
                            PlaySound( "ambient/levels/caves/ol04_gearengage.wav" )

                        lastPrisonersCount = teams[ 2 ]

                        if isWarden and @IsValid!
                            Run( "WardenChanged", @, false )

    Jailbreak.PlayerChangedTeam = playerChangedTeam

    hook.Add "TeamPlayerDeath", "Jailbreak::TeamPlayerCountChanged", playerChangedTeam
    hook.Add "PlayerChangedTeam", "Jailbreak::TeamPlayerCountChanged", playerChangedTeam
    hook.Add "TeamPlayerDisconnected", "Jailbreak::TeamPlayerCountChanged", playerChangedTeam

-- Perform a round state change
do

    :SafeCleanUpMap, :Colors, :RunEvents, :SetShockCollars, :ClearObserveTargets, :TeamIsJoinable, :GetWarden, :PermanentGuards, :SetWardenCoins, :WardenCoins = Jailbreak

    GM.RoundStateChanged = ( old, new ) =>
        RunEvents( new )

        switch ( new )
            when ROUND_WAITING_PLAYERS
                SetShockCollars( false )
                ClearObserveTargets!

                for ply in *GetAll!
                    if ply\Alive!
                        ply\KillSilent!

                    if ply\IsBot! or ( ply\IsGuard! and not PermanentGuards\GetBool! )
                        ply\SetTeam( TEAM_PRISONER )

                SendChatText( false, false, CHAT_SERVERMESSAGE, "#jb.round.changed." .. new )
                SafeCleanUpMap!

            when ROUND_PREPARING
                for ply in *GetAll!
                    if ply\IsBot!
                        ply\SetTeam( TEAM_PRISONER )

                    if Teams[ ply\Team! ]
                        ply\Spawn!

                SendChatText( false, false, CHAT_SERVERMESSAGE, "#jb.round.changed." .. new, Colors.horizon )
                SetShockCollars( false )
                SafeCleanUpMap!

            when ROUND_RUNNING
                PlaySound( "ambient/alarms/warningbell1.wav" )
                SetWardenCoins( WardenCoins\GetInt! )
                players = GetAll!

                for ply in *players
                    if ply\IsBot!
                        teamID = ply\Team!
                        for index = 1, 2
                            if index ~= teamID and TeamIsJoinable( index )
                                ply\SetTeam( index )
                                ply\KillSilent!
                                break

                teams = GetTeamPlayersCount( true, TEAM_GUARD, TEAM_PRISONER )
                if teams[ 1 ] == 0 or teams[ 2 ] == 0
                    setRoundState( ROUND_WAITING_PLAYERS )
                    return

                guards = {}
                for ply in *players
                    teamID = ply\Team!
                    if Teams[ teamID ]
                        unless ply\Alive!
                            ply\Spawn!

                        if teamID == TEAM_GUARD
                            guards[] = ply
                        elseif teamID == TEAM_PRISONER
                            ply\GiveShockCollar!

                if #guards == 1
                    guards[ 1 ]\SetWarden( true )

                SetShockCollars( true )

                roundTime = RoundTime\GetInt!
                if roundTime > 0
                    setRoundTime( roundTime )

                SendChatText( false, false, CHAT_SERVERMESSAGE, "#jb.round.changed." .. new, Colors.asparagus )

            when ROUND_FINISHED
                teams = GetTeamPlayersCount( true, TEAM_GUARD, TEAM_PRISONER )
                if teams[ 1 ] > teams[ 2 ]
                    SendChatText( false, false, CHAT_SERVERMESSAGE, "#jb.round.changed." .. new .. "." .. TEAM_GUARD, Jailbreak.GetTeamColor( TEAM_GUARD ) )
                    setWinningTeam( TEAM_GUARD )
                elseif teams[ 1 ] < teams[ 2 ]
                    SendChatText( false, false, CHAT_SERVERMESSAGE, "#jb.round.changed." .. new .. "." .. TEAM_PRISONER, Jailbreak.GetTeamColor( TEAM_PRISONER ) )
                    setWinningTeam( TEAM_PRISONER )
                else
                    SendChatText( false, false, CHAT_SERVERMESSAGE, "#jb.round.changed." .. new .. ".0", Colors.dark_white )
                    setWinningTeam( 0 )

                warden = GetWarden!
                if warden and warden\IsValid!
                    warden\SetWarden( false, true )

                setRoundTime( PrepareTime\GetInt! )
                PlaySound( "ambient/alarms/warningbell1.wav" )

-- Called when a in game player dies
GM.TeamPlayerDeath = ( ply, teamID ) =>
    ply\RemoveFromObserveTargets!
    ply\TakeSecurityRadio!
    ply\TakeSecurityKeys!
    ply\TakeShockCollar!
    ply\TakeFlashlight!
    ply\UnSpectate!

-- Called when a player disconnected
GM.TeamPlayerDisconnected = ( ply, teamID ) =>
    unless ply\Alive!
        return

    ply\RemoveFromObserveTargets!
    ply\CreateRagdoll!

do

    :IsWaitingPlayers = Jailbreak

    GM.TeamPlayerSpawn = ( ply, teamID ) =>
        ply\SetNoCollideWithTeammates( teamID == TEAM_GUARD or Jailbreak.GameName == "tf" )

        if ply\IsValidObserveTarget!
            ply\AddToObserveTargets!

        if IsWaitingPlayers!
            teams = GetTeamPlayersCount( true, TEAM_GUARD, TEAM_PRISONER )
            if teams[ 1 ] > 0 and teams[ 2 ] > 0
                setRoundState( ROUND_PREPARING )
                setRoundTime( PrepareTime\GetInt! )

do

    :GetRoundTime = Jailbreak
    :AddScore = team

    GM.Think = =>
        if GetRoundTime! > CurTime!
            return

        switch GetRoundState!
            when ROUND_PREPARING
                setRoundState( ROUND_RUNNING )

            when ROUND_RUNNING
                if RoundTime\GetInt! == 0
                    return

                AddScore( TEAM_GUARD, 1 )
                setWinningTeam( TEAM_GUARD )

                setRoundState( ROUND_FINISHED, true )
                setRoundTime( PrepareTime\GetInt! )

            when ROUND_FINISHED
                setRoundState( ROUND_WAITING_PLAYERS )

GM.ShockCollarsToggled = ( bool ) =>
    for ply in *GetAll!
        if ply\HasShockCollar!
            ply\SetShockCollar( bool, false )

GM.ShockCollarToggled = ( ply, bool ) =>
    unless ply\IsBot!
        SendChatText( ply, false, CHAT_SERVERMESSAGE, bool and "#jb.notify.shock-collar.on" or "#jb.notify.shock-collar.off" )

    ply\DoElectricSparks!
