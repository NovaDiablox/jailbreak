NOTIFY_ERROR = NOTIFY_ERROR
Jailbreak = Jailbreak
:HasWarden = Jailbreak
tonumber = tonumber
IsValid = IsValid
:Add = concommand
CurTime = CurTime

do

    :ChangeTeam = Jailbreak

    Add "changeteam", ( _, args ) =>
        teamID = args[ 1 ]
        if teamID
            teamID = tonumber( teamID ) or 0
        else
            teamID = 0

        ChangeTeam( @, teamID )

do

    :IsRoundRunning, :SetShockCollars, :IsShockCollarsActive = Jailbreak

    Add "jb_warden", ( _, args ) =>
        unless IsValid( @ )
            return

        unless IsRoundRunning! and @IsGuard! and @Alive!
            @SendNotify( "#jb.error.warden-failure", NOTIFY_ERROR, 10 )
            return

        if ( @WardenDelay or 0 ) > CurTime!
            @SendNotify( "#jb.please-wait", NOTIFY_ERROR, 3 )
            return

        if @IsWarden!
            @WardenDelay = CurTime! + 10
            @SetWarden( false )
            return

        if HasWarden!
            @SendNotify( "#jb.error.warden-exists", NOTIFY_ERROR, 10 )
            return

        @WardenDelay = CurTime! + 5
        @SetWarden( true )

    Add "jb_shock_collars", ( _, args ) =>
        unless IsValid( @ )
            return

        unless IsRoundRunning! and @IsInGame! and @IsWarden!
            @SendNotify( "#jb.error.cant-do-that", NOTIFY_ERROR, 10 )
            return

        if ( @ShockCollarsDelay or 0 ) > CurTime!
            @SendNotify( "#jb.please-wait", NOTIFY_ERROR, 3 )
            return

        requested = args[ 1 ]
        if requested ~= nil and #requested ~= 0
            SetShockCollars( requested == "1" )
        else
            SetShockCollars( not IsShockCollarsActive! )

        @ShockCollarsDelay = CurTime! + 5

do

    :SetRoundState, :SetRoundTime = Jailbreak
    :Clamp = math

    Add "jb_force_round", ( _, args ) =>
        if IsValid( @ ) and not @IsSuperAdmin!
            return

        index = args[ 1 ]
        if index
            index = tonumber( index ) or 0

        if index
            SetRoundState( Clamp( index, 0, 3 ) )
        else
            SetRoundState( 0 )
            SetRoundTime( 0 )

do

    :IsValidModel = util

    Add "drop", =>
        dropWeapon = @GetActiveWeapon!
        unless IsValid( dropWeapon )
            return

        model = dropWeapon\GetWeaponWorldModel!
        unless model and IsValidModel( model )
            return

        @DropWeapon( dropWeapon )

        maxWeight, nextWeapon = nil, nil
        for weapon in *@GetWeapons!
            weight = weapon\GetWeight!

            if not maxWeight or maxWeight <= weight
                nextWeapon = weapon
                maxWeight = weight

        unless IsValid( nextWeapon )
            return

        @SelectWeapon( nextWeapon\GetClass! )

do

    util.AddNetworkString( "Jailbreak::Markers" )

    :Markers, :VoiceChatMinDistance, :MarkersLifetime, :MarkersCount, :Emotion = Jailbreak
    :Start, :WriteEntity, :WriteBool, :WriteVector, :Send, :Broadcast = net
    CHAN_STATIC = CHAN_STATIC
    EmitSound = EmitSound
    :TraceLine = util
    :random = math

    trace = {
        mask: MASK_SHOT
    }

    Add "marker", =>
        unless Markers\GetBool!
            return

        unless IsValid( @ ) and @IsInGame!
            return

        if @NextMarker and CurTime! < @NextMarker
            return

        isWarden, isPrisoner = @IsWarden!, @IsPrisoner!
        if not isWarden and @IsGuard! and not HasWarden!
            isWarden = true

        unless isWarden or isPrisoner
            @SendNotify( "#jb.error.cant-do-that", NOTIFY_ERROR, 10 )
            return

        distance = 0
        if isWarden
            distance = 32768
        elseif isPrisoner
            distance = VoiceChatMinDistance\GetInt!

        @LagCompensation( true )

        trace.filter = @

        start = @EyePos!
        trace.start = start
        trace.endpos = start + @GetAimVector! * distance

        traceResult = TraceLine( trace )

        @LagCompensation( false )

        unless traceResult.Hit
            return

        @NextMarker = CurTime! + ( MarkersLifetime\GetInt! / MarkersCount\GetInt! )

        entity = traceResult.Entity
        isValid = IsValid( entity )

        Start( "Jailbreak::Markers" )
        WriteEntity( @ )
        WriteBool( isValid )

        origin = nil
        if isValid
            WriteEntity( entity )
            origin = entity\WorldToLocal( traceResult.HitPos )
        else
            origin = traceResult.HitPos

        WriteVector( origin )

        if isWarden
            Broadcast!

            rf = RecipientFilter!
            rf\AddPAS( origin )

            if isValid
                entity\EmitSound( "buttons/button" .. random( 14, 19 ) .. ".wav", 75, random( 80, 120 ), 1, CHAN_STATIC, 0, 1, rf )
            else
                EmitSound( "buttons/button" .. random( 14, 19 ) .. ".wav", origin, 0, CHAN_STATIC, 1, 75, 0, random( 80, 120 ), 1, rf )

        elseif isPrisoner
            rf = RecipientFilter!

            hasSender = false
            for ply in *@GetNearPlayers( distance, true )
                if ply == @
                    hasSender = true

                rf\AddPlayer( ply )

            unless hasSender
                rf\AddPlayer( @ )

            Send( rf )

            if isValid
                entity\EmitSound( "buttons/button" .. random( 14, 19 ) .. ".wav", 75, random( 80, 120 ), 1, CHAN_STATIC, 0, 1, rf )
            else
                EmitSound( "buttons/button" .. random( 14, 19 ) .. ".wav", origin, 0, CHAN_STATIC, 1, 75, 0, random( 80, 120 ), 1, rf )

        if entity\IsValid!
            if entity\IsPlayer!
                Emotion( @, "#jb.chat.pointed-at ", entity\GetModelColor!, entity\Nick!, white, "." )
            elseif entity\IsPlayerRagdoll!
                Emotion( @, "#jb.chat.pointed-at ", entity\GetModelColor!, entity\GetNW2String( "owner-nickname", "unknown" ), white, "." )
            elseif entity\IsWeapon!
                printName = nil
                if entity\IsScripted!
                    printName = entity.PrintName

                if printName
                    printName = "#" .. printName
                else
                    printName = entity\GetPrintName!

                if printName == "Scripted Weapon"
                    printName = "#" .. entity\GetClass!

                Emotion( @, "#jb.chat.pointed-at \"" .. printName .. "\"." )
            else
                Emotion( @, "#jb.chat.pointed-at \"#jb." .. entity\GetClass! .. "\"." )

        else
            Emotion( @, "#jb.chat.pointed-at \"#jb.world\"." )
