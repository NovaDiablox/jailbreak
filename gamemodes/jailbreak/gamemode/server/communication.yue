Jailbreak = Jailbreak
string = string
math = math
net = net
GM = GM

:VoiceChatMinDistance, :VoiceChatMaxDistance, :GameInProgress = Jailbreak
:white, :red, :dark_white = Jailbreak.Colors
CHAT_SERVERMESSAGE = CHAT_SERVERMESSAGE
CHAT_OOC = CHAT_OOC

:GetHumans = player
tonumber = tonumber
isstring = isstring
:lower = string
:random = math
:Add = hook

-- Custom Chat Messages
sendChatText = nil
do

    util.AddNetworkString( "Jailbreak::Chat" )

    :Start, :WriteUInt, :WriteBool, :WriteTable, :Send, :Broadcast = net
    isnumber = isnumber
    IsEntity = IsEntity
    TypeID = TypeID
    :Run = hook

    TYPE_ENTITY = TYPE_ENTITY
    TYPE_RECIPIENTFILTER = TYPE_RECIPIENTFILTER
    TYPE_TABLE = TYPE_TABLE

    fallbackStr = "unsupported"

    sendChatText = ( target, speaker, messageType, text, nickname, isDead, isTeamChat, ... ) ->
        Start( "Jailbreak::Chat" )

        hasSpeaker = speaker and speaker\IsValid!
        WriteBool( hasSpeaker )

        if hasSpeaker
            WriteUInt( speaker\EntIndex!, 8 )

        WriteUInt( messageType, 5 )
        WriteTable( { text, nickname, isDead, isTeamChat, ... }, true )

        unless hasSpeaker
            if target
                Send( target )
            else
                Broadcast!

            return

        unless target
            if messageType == CHAT_OOC
                Broadcast!
                return

            target = GetHumans!

        unless isstring( text )
            text = fallbackStr

        isTeamChat = isnumber( isTeamChat )

        switch TypeID( target )
            when TYPE_ENTITY
                if Run( "PlayerCanSeePlayersChat", text, isTeamChat, target, speaker ) ~= false
                    Send( target )

            when TYPE_RECIPIENTFILTER
                players = {}
                for listener in *target\GetPlayers!
                    if Run( "PlayerCanSeePlayersChat", text, isTeamChat, listener, speaker ) ~= false
                        players[] = listener

                Send( players )

            when TYPE_TABLE
                players = {}
                for listener in *target
                    unless IsEntity( listener ) and listener\IsValid! and listener\IsPlayer!
                        continue

                    if Run( "PlayerCanSeePlayersChat", text, isTeamChat, listener, speaker ) ~= false
                        players[] = listener

                Send( players )

    FindMetaTable( "Player" ).ChatPrint = ( text ) =>
        unless isstring( text ) and #text > 0
            text = fallbackStr

        sendChatText( @, false, CHAT_SERVERMESSAGE, text, white )

Jailbreak.SendChatText = sendChatText

-- Chat Commands
chatCommands = Jailbreak.ChatCommands
unless istable( chatCommands )
    chatCommands = {}
    Jailbreak.ChatCommands = chatCommands

setChatCommand = nil
do

    isfunction = isfunction

    setChatCommand = ( str, func, description ) ->
        unless isstring( str ) and isfunction( func )
            return

        unless isstring( description )
            description = "#jb.chat.command.no_description"

        chatCommands[ lower( str ) ] = { func, description }

    Jailbreak.SetChatCommand = setChatCommand

-- Help
setChatCommand "help", =>
    text, counter = "#jb.chat.command.available\n", 1
    for str, data in pairs( chatCommands )
        text ..= counter .. ". /" .. str .. " - " .. data[ 2 ] .. "\n"
        counter += 1

    sendChatText( @, false, CHAT_SERVERMESSAGE, text ),
    "#jb.chat.command.help"

-- Local Out of Character (LOOC)
do

    CHAT_LOOC = CHAT_LOOC

    looc = ( text, isTeamChat ) =>
        sendChatText( @GetNearPlayers( VoiceChatMinDistance\GetInt!, false ), @, CHAT_LOOC, text, @Nick!, @Alive!, isTeamChat and @Team! or false )

    Jailbreak.LOOC = looc

    setChatCommand "looc", looc, "#jb.chat.command.looc"
    setChatCommand "", looc, "#jb.chat.command.looc"

-- Emotions / Actions
do

    :EmotionDistance = Jailbreak
    CHAT_EMOTION = CHAT_EMOTION

    customEmotion = ( ... ) =>
        sendChatText( @GetNearPlayers( EmotionDistance\GetInt!, false ), @, CHAT_EMOTION, @Nick!, @Alive!, ... )

    Jailbreak.Emotion = customEmotion

    emotion = ( text ) =>
        if #text == 0
            sendChatText( @, false, CHAT_SERVERMESSAGE, "#jb.chat.command.invalid", red )
        else
            customEmotion( @, lower( text ) )

    setChatCommand "e", emotion, "#jb.chat.command.emotion"
    setChatCommand "me", emotion, "#jb.chat.command.emotion"
    setChatCommand "emotion", emotion, "#jb.chat.command.emotion"

    -- Coin Flip
    do

        coinFlip = ( _, text ) =>
            emotion( @, "#jb.chat.coin-flip #jb.chat.coin-flip." .. random( 0, 1 ) )

        setChatCommand "coin", coinFlip, "#jb.chat.command.coin"
        setChatCommand "flip", coinFlip, "#jb.chat.command.coin"

    do

        :match = string

        -- Roll Dice ( /roll <from> <to> )
        setChatCommand "roll", ( text ) =>
            int1, int2 = match( text, "(-?%d+)%s+(-?%d+)" )
            unless int1
                int1 = 0

            unless int2
                int2 = 100

            emotion( @, "#jb.chat.rolled " .. random( tonumber( int1 ) or 0, tonumber( int2 ) or 0 ) ),
            "#jb.chat.command.roll"

-- Out of Character ( OOC )
ooc = ( text, isTeamChat ) =>
    sendChatText( false, @, CHAT_OOC, text, @Nick!, @Alive!, isTeamChat and @Team! or false )

Jailbreak.OOC = ooc

do

    :OutOfCharacter = Jailbreak
    NOTIFY_ERROR = NOTIFY_ERROR

    func = ( text ) =>
        if GameInProgress! and not ( OutOfCharacter\GetBool! or @IsAdmin! )
            @SendNotify( "#jb.chat.fail", NOTIFY_ERROR, 5 )
            return

        ooc( @, text )
        return

    setChatCommand "ooc", func, "#jb.chat.command.ooc"
    setChatCommand "/", func, "#jb.chat.command.ooc"

-- Whisper
whisper = nil
do

    :MaxWhisperDistance = Jailbreak
    CHAT_WHISPER = CHAT_WHISPER

    whisper = ( text, isTeamChat, noSpeaker ) =>
        sendChatText( @GetNearPlayers( MaxWhisperDistance\GetInt!, false, noSpeaker ), @, CHAT_WHISPER, text, @Nick!, @Alive!, isTeamChat and @Team! or false )

    Jailbreak.Whisper = whisper

setChatCommand "w", whisper, "#jb.chat.command.whisper"
setChatCommand "whisper", whisper, "#jb.chat.command.whisper"

do

    :sub, :find, :Trim = string
    :AllowTeamChat = Jailbreak
    CHAT_TEXT = CHAT_TEXT
    :min = math

    -- https://wiki.facepunch.com/gmod/GM:PlayerSay
    GM.PlayerSay = ( ply, text, isTeamChat ) =>
        text = Trim( text )

        if sub( text, 1, 1 ) == "/"
            startPos, _, command = find( text, "^/([^%s]+)" )
            if command
                data = chatCommands[ lower( command ) ]
                if data
                    return data[ 1 ]( ply, Trim( sub( text, min( startPos + #command + 1, #text ) + 1 ) ), isTeamChat ) or ""
                else
                    sendChatText( ply, false, CHAT_SERVERMESSAGE, "#jb.chat.command.unknown", red )

            return ""

        if isTeamChat
            unless AllowTeamChat\GetBool!
                ply\Say( text, false )
                return ""

        elseif ply\UsingSecurityRadio!
            players = {}
            for pl in *GetHumans!
                if pl\HasSecurityRadio!
                    players[] = pl

            sendChatText( players, ply, CHAT_TEXT, text, ply\Nick!, not ply\Alive!, false, true )
            whisper( ply, text, false, true )
            return ""

        unless GameInProgress!
            ooc( ply, text, isTeamChat )
            return ""

        sendChatText( false, ply, CHAT_TEXT, text, ply\Nick!, not ply\Alive!, isTeamChat and ply\Team! or false, false )
        return ""

do

    CHAT_CONNECT = CHAT_CONNECT

    Add "PlayerConnect", "Jailbreak::JoinNotification", ( nickname, ip ) ->
        players, admins = {}, {}

        for ply in *GetHumans!
            if ply\IsAdmin!
                admins[] = ply
            else
                players[] = ply

        sendChatText( admins, false, CHAT_CONNECT, nickname, ip ~= "none" and ip or nil )
        sendChatText( players, false, CHAT_CONNECT, nickname )

do

    gameevent.Listen( "player_disconnect" )
    CHAT_DISCONNECT = CHAT_DISCONNECT

    Add "player_disconnect", "Jailbreak::LeaveNotification", ( data ) ->
        players, admins = {}, {}

        for ply in *GetHumans!
            if ply\IsAdmin!
                admins[] = ply
            else
                players[] = ply

        steamID = false
        unless data.bot
            steamID = data.networkid

        sendChatText( admins, false, CHAT_DISCONNECT, data.name, steamID, data.reason )
        sendChatText( players, false, CHAT_DISCONNECT, data.name )

do

    gameevent.Listen( "player_changename" )
    CHAT_NAMECHANGE = CHAT_NAMECHANGE
    Player = Player

    Add "player_changename", "Jailbreak::NameChangeNotification", ( data ) ->
        admins = {}
        for ply in *GetHumans!
            if ply\IsAdmin!
                admins[] = ply

        ply, color = Player( data.userid ), dark_white
        if ply\IsValid!
            color = ply\GetModelColor!

        sendChatText( admins, false, CHAT_NAMECHANGE, data.oldname, data.newname, color )

Add "PlayerInitialSpawn", "Jailbreak::Communication", =>
    unless @IsBot!
        @AvailableSpeakers = {}

-- https://wiki.facepunch.com/gmod/GM:PlayerCanSeePlayersChat
GM.PlayerCanSeePlayersChat = ( text, isTeam, listener, speaker ) =>
    if #text == 0 or listener\IsBot!
        return false

    if listener\EntIndex! == speaker\EntIndex!
        return true

    unless speaker and speaker\IsValid!
        return true

    if isTeam and listener\Team! ~= speaker\Team!
        return false

    if speaker\IsBot!
        return true

    return listener.AvailableSpeakers[ speaker ] ~= nil

-- New warden notification
do

    RecipientFilter = RecipientFilter
    CHAN_STATIC = CHAN_STATIC
    CHAT_CUSTOM = CHAT_CUSTOM

    Add "WardenChanged", "Jailbreak::WardenNotification", ( state ) =>
        sendChatText( false, false, CHAT_CUSTOM, @GetModelColor!, @Nick!, white, state and " #jb.alert.warden_join" or " #jb.alert.warden_leave" )

        if state and not @IsBot!
            @SendShopItems!

        rf = RecipientFilter!
        rf\AddPAS( @EyePos! )
        @EmitSound( state and "ui/buttonclick.wav" or "ui/buttonclickrelease.wav", 75, random( 80, 120 ), 1, CHAN_STATIC, 0, 1, rf )

-- Other
setChatCommand "warden", =>
    @ConCommand( "jb_warden" ),
    "#jb.chat.command.warden"

do

    :ChangeTeam = Jailbreak

    func = ( text ) =>
        ChangeTeam( @, tonumber( text ) or 0 )

    setChatCommand "changeteam", func, "#jb.chat.command.changeteam"
    setChatCommand "team", func, "#jb.chat.command.changeteam"

    do

        TEAM_PRISONER = TEAM_PRISONER

        setChatCommand "prisoners", =>
            ChangeTeam( @, TEAM_PRISONER )

    do

        TEAM_GUARD = TEAM_GUARD

        setChatCommand "guards", =>
            ChangeTeam( @, TEAM_GUARD )

    do

        TEAM_SPECTATOR = TEAM_SPECTATOR

        setChatCommand "spectators", =>
            ChangeTeam( @, TEAM_SPECTATOR )

-- https://wiki.facepunch.com/gmod/GM:PlayerCanHearPlayersVoice
GM.PlayerCanHearPlayersVoice = ( listener, speaker ) =>
    if listener\IsBot! or speaker\IsBot! or listener\EntIndex! == speaker\EntIndex!
        return false, false

    stereoSound = listener.AvailableSpeakers[ speaker ]
    if stereoSound ~= nil
        return true, stereoSound

    return false, false

do

    sendVolumes = nil
    do

        util.AddNetworkString( "JB::Communication" )

        :Start, :WriteUInt, :WriteEntity, :WriteFloat, :Send = net
        :VoiceChatUDP = Jailbreak

        sendVolumes = ( listener, volumes ) ->
            length = #volumes
            if length == 0
                return

            Start( "JB::Communication", VoiceChatUDP\GetBool! )
            WriteUInt( length, 10 )

            for i = 1, length
                data = volumes[ i ]
                WriteEntity( data[ 1 ] )
                WriteFloat( data[ 2 ] )

            Send( listener )

    :IsRoundRunning, :VoiceChatSpeed, :VoiceChatProximity = Jailbreak
    Distance = FindMetaTable( "Vector" ).Distance
    EyePos = FindMetaTable( "Entity" ).EyePos
    RecipientFilter = RecipientFilter
    :max, :Clamp, :Round = math
    :Empty = table

    sv_alltalk = GetConVar( "sv_alltalk" )\GetInt! > 2
    cvars.AddChangeCallback( "sv_alltalk", ( _, __, value ) ->
        sv_alltalk = ( tonumber( value ) or 2 ) > 2
    "Jailbreak" )

    cvars.AddChangeCallback( VoiceChatSpeed\GetName!, ( _, __, value ) ->
        timer.Adjust( "JB::Communication", 1 / ( tonumber( value ) or 4 ) )
    "Jailbreak" )

    timer.Create "JB::Communication", 1 / VoiceChatSpeed\GetInt!, 0, ->
        minDistance, maxDistance = VoiceChatMinDistance\GetInt!, VoiceChatMaxDistance\GetInt!
        players = GetHumans!

        for listener in *players
            speakers = listener.AvailableSpeakers
            Empty( speakers )

            listenerIndex = listener\EntIndex!
            volumes = {}

            if sv_alltalk or not IsRoundRunning!
                for speaker in *players
                    if speaker\IsBot! or speaker\EntIndex! == listenerIndex
                        continue

                    volumes[] = { speaker, 1 }
                    speakers[ speaker ] = false

                sendVolumes( listener, volumes )
                continue

            origin = EyePos( listener )

            rf = RecipientFilter!
            rf\AddPAS( origin )

            isInGame = listener\Alive!
            proximityVoiceChat = VoiceChatProximity\GetBool!
            hasRadio = isInGame and listener\HasSecurityRadio!

            for speaker in *rf\GetPlayers!
                if speaker\IsBot! or speaker\EntIndex! == listenerIndex
                    continue

                unless speaker\Alive!
                    unless isInGame
                        volumes[] = { speaker, 1 }
                        speakers[ speaker ] = false

                    continue

                unless proximityVoiceChat
                    volumes[] = { speaker, 1 }
                    speakers[ speaker ] = true
                    continue

                if proximityVoiceChat and ( ( hasRadio and speaker\UsingSecurityRadio! ) or speaker\UsingMegaphone! )
                    continue

                volume = Round( 1 - Clamp( max( 0, Distance( origin, EyePos( speaker ) ) - minDistance ) / maxDistance, 0, 1 ), 2 )
                if volume > 0
                    volumes[] = { speaker, volume }
                    speakers[ speaker ] = true

            unless proximityVoiceChat
                continue

            for speaker in *players
                if speakers[ speaker ] ~= nil or speaker\IsBot! or speaker\EntIndex! == listenerIndex
                    continue

                if ( hasRadio and speaker\UsingSecurityRadio! ) or speaker\UsingMegaphone!
                    volumes[] = { speaker, 1 }
                    speakers[ speaker ] = false

            sendVolumes( listener, volumes )
