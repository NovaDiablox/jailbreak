:random, :max, :min, :Rand = math
Jailbreak = Jailbreak
CurTime = CurTime
:Simple = timer
Vector = Vector
:Run = hook
GM = GM

TEAM_PRISONER = TEAM_PRISONER
TEAM_GUARD = TEAM_GUARD

OBS_MODE_ROAMING = OBS_MODE_ROAMING
OBS_MODE_CHASE = OBS_MODE_CHASE

:Teams = Jailbreak

-- https://wiki.facepunch.com/gmod/GM:ShowTeam
GM.ShowTeam = ( ply ) =>
    ply\ConCommand( "jb_showteam" )

do

    RENDERMODE_TRANSCOLOR = RENDERMODE_TRANSCOLOR

    -- https://wiki.facepunch.com/gmod/GM:PlayerInitialSpawn
    GM.PlayerInitialSpawn = ( ply, transiton ) =>
        ply\SetNoCollideWithTeammates( Jailbreak.GameName == "tf" )
        ply\SetRenderMode( RENDERMODE_TRANSCOLOR )
        ply\SetAvoidPlayers( true )
        ply\SetCanZoom( false )

        ragdoll = ply\FindRagdollEntity!
        if ragdoll\IsValid!
            ragdoll\SetNW2Entity( "ragdoll-owner", ply )
        else
            ply\SetTeam( TEAM_PRISONER )

        ply.m_bInitialSpawn = true

-- https://wiki.facepunch.com/gmod/GM:PlayerSpawn
do

    :RagdollRemove, :GameInProgress, :GuardsArmor, :AllowWeaponsInVehicle = Jailbreak
    :white = Jailbreak.Colors

    GM.PlayerSpawn = ( ply, transiton ) =>
        ply\SetAllowWeaponsInVehicle( AllowWeaponsInVehicle\GetBool! )
        ply\RemoveFromObserveTargets!
        ply\SetColor( white )
        ply\SetupMovement!
        ply\RemoveAllAmmo!
        ply\StripWeapons!
        ply\UnSpectate!

        ragdoll = ply\FindRagdollEntity!
        if ragdoll\IsValid! and ragdoll\Alive!
            ply\SpawnFromRagdoll( ragdoll )
            Run( "PostPlayerSpawn", ply )
            ragdoll\SetAlive( false )
            ragdoll\Remove!
            return

        if ply.m_bInitialSpawn ~= nil
            ply.m_bInitialSpawn = nil

            if GameInProgress!
                if ragdoll\IsValid!
                    ply\SpawnFromRagdoll( ragdoll )

                ply\KillSilent!
                return

        teamID = ply\Team!
        unless Teams[ teamID ]
            ply\KillSilent!
            return

        if RagdollRemove\GetBool!
            ply\RemoveRagdoll!

        Run( "PlayerSetModel", ply )

        ply\SetMaxHealth( 100 )
        ply\SetHealth( 100 )

        if teamID == TEAM_GUARD
            armor = GuardsArmor\GetInt!
            ply\SetMaxArmor( max( 100, armor ) )
            ply\SetArmor( armor )
            ply\GiveSecurityRadio!
            ply\GiveSecurityKeys!
            ply\GiveFlashlight!
        else
            ply\SetMaxArmor( 100 )
            ply\SetArmor( 0 )

        unless transiton
            Run( "PlayerLoadout", ply )

        Run( "PostPlayerSpawn", ply )

-- https://wiki.facepunch.com/gmod/GM:PlayerSelectSpawn
do

    vector_origin = vector_origin
    :Empty, :Shuffle = table
    :GetSpawnPoint = team
    :FindByClass = ents

    cache, lastIndex, length, teamID = {}, 0, 0, 0
    hook.Add "PostCleanupMap", "Jailbreak::ClearSpawnPointCache", ->
        Empty( cache )
        lastIndex = 0

    GM.PlayerSelectSpawn = ( ply, transition ) =>
        if transiton
            return

        teamID = ply\Team!
        unless Teams[ teamID ]
            teamID = random( 1, 2 )

        spawnPoints = cache[ teamID ]
        unless spawnPoints
            spawnPoints, length = {}, 0
            for className in *GetSpawnPoint( teamID )
                for entity in *FindByClass( className )
                    if className ~= "info_player_teamspawn" or ( not entity.Disabled and entity\Team! == teamID )
                        length += 1
                        spawnPoints[ length ] = entity

            if length > 1
                Shuffle( spawnPoints )

            cache[ teamID ] = spawnPoints

        length = #spawnPoints
        if length ~= 0
            if length == 1
                return spawnPoints[ 1 ]

            lastIndex = lastIndex + 1
            if lastIndex > length
                lastIndex = 1

            spawnPoint = spawnPoints[ lastIndex ]
            if spawnPoint and spawnPoint\IsValid!
                return spawnPoint

        ply\SetPos( vector_origin )

-- https://wiki.facepunch.com/gmod/GM:SetupMove
GM.SetupMove = ( ply, _, cmd ) =>
    if ply\IsFullyConnected! or not ( cmd\IsForced! or ply\IsBot! )
        return

    ply\SetNW2Bool( "fully-connected", true )
    Run( "PlayerInitialized", ply )

-- https://wiki.facepunch.com/gmod/GM:PlayerSetModel
do

    :AllowCustomPlayerModels, :IsFemalePrison = Jailbreak
    :TranslatePlayerModel = player_manager
    :match = string

    length = 0

    GM.PlayerSetModel = ( ply ) =>
        modelPath = TranslatePlayerModel( ply\GetInfo( "jb_playermodel" ) )
        if AllowCustomPlayerModels\GetBool! and ply\SetModel( modelPath )
            return

        models = Jailbreak.PlayerModels[ ply\Team! ][ IsFemalePrison! ]
        length = #models

        if length == 1
            ply\SetModel( models[ 1 ] )
            return

        requestedName = match( modelPath, "([%w%_%-]+)%.mdl$" )
        for index = 1, length
            if ( models[ index ] == modelPath or match( models[ index ], "([%w%_%-]+)%.mdl$" ) == requestedName ) and ply\SetModel( models[ index ] )
                return

        ply\SetModel( models[ random( 1, length ) ] )

do

    :AllowCustomPlayerColors, :AllowCustomWeaponColors, :DefaultTeamColors = Jailbreak
    tonumber = tonumber
    :Explode = string

    defaultWeaponColor = Vector( 0.001, 0.001, 0.001 )

    GM.PlayerModelChanged = ( ply ) =>
        isBot = ply\IsBot!
        if isBot
            ply\SetSkin( random( 0, ply\SkinCount! ) )

            for bodygroup in *ply\GetBodyGroups!
                ply\SetBodygroup( bodygroup.id, random( 0, bodygroup.num - 1 ) )

        else
            ply\SetSkin( ply\GetInfoNum( "jb_playerskin", 0 ) )

            -- Model bodygroups setup
            groups = Explode( " ", ply\GetInfo( "jb_playerbodygroups" ) or "" )
            for i = 0, ply\GetNumBodyGroups! - 1 do
                ply\SetBodygroup( i, tonumber( groups[ i + 1 ] ) or 0 )

        -- Player color setup
        unless AllowCustomPlayerColors\GetBool!
            ply\SetPlayerColor( DefaultTeamColors[ ply\Team! ] )
        elseif isBot
            ply\SetPlayerColor( Vector( Rand( 0, 1 ), Rand( 0, 1 ), Rand( 0, 1 ) ) )
        else
            ply\SetPlayerColor( Vector( ply\GetInfo( "cl_playercolor" ) ) )

        unless AllowCustomWeaponColors\GetBool!
            ply\SetWeaponColor( DefaultTeamColors[ ply\Team! ] )
        elseif isBot
            ply\SetWeaponColor( Vector( Rand( 0, 1 ), Rand( 0, 1 ), Rand( 0, 1 ) ) )
        else
            weaponColor = Vector( ply\GetInfo( "cl_weaponcolor" ) )
            if weaponColor\Length! < 0.001
                weaponColor = defaultWeaponColor

            ply\SetWeaponColor( weaponColor )

-- https://wiki.facepunch.com/gmod/GM:PlayerSetHandsModel
do

    :TranslatePlayerHands, :TranslateToPlayerModelName = player_manager

    GM.PlayerSetHandsModel = ( ply, hands ) =>
        info = TranslatePlayerHands( TranslateToPlayerModelName( ply\GetModel! ) )
        if info == nil
            return

        hands\SetModel( info.model )
        hands\SetBodyGroups( info.body )
        hands\SetPlayerColor( ply\GetPlayerColor! )
        hands\SetSkin( info.matchBodySkin and ply\GetSkin! or info.skin )
        return

-- https://wiki.facepunch.com/gmod/GM:DoPlayerDeath
do

    :IsWaitingPlayers = Jailbreak

    GM.DoPlayerDeath = ( ply, attacker, damageInfo ) =>
        unless Teams[ ply\Team! ]
            return

        if attacker\IsValid! and attacker\IsPlayer! and attacker ~= ply
            attacker\AddFrags( 1 )

        if IsWaitingPlayers!
            ply\RemoveRagdoll!

        ragdoll = ply\CreateRagdoll!
        unless ragdoll\IsValid!
            return

        Simple 0.25, ->
            if ragdoll\IsValid! and ply\IsValid! and not ply\Alive!
                ply\ObserveEntity( ragdoll )

        if damageInfo\IsDissolveDamage!
            ragdoll\Dissolve!
            return

        ragdoll\TakeDamageInfo( damageInfo )
        return

-- https://wiki.facepunch.com/gmod/GM:PlayerDeath
GM.PlayerDeath = ( ply, inflictor, attacker ) =>
    teamID = ply\Team!
    if Teams[ teamID ]
        Run( "TeamPlayerDeath", ply, teamID )

-- https://wiki.facepunch.com/gmod/GM:PlayerSilentDeath
GM.PlayerSilentDeath = ( ply ) =>
    teamID = ply\Team!
    if Teams[ teamID ]
        Run( "TeamPlayerDeath", ply, teamID )

-- https://wiki.facepunch.com/gmod/GM:PostPlayerDeath
GM.PostPlayerDeath = ( ply ) =>
    ply\SetNW2Bool( "lost-consciousness", false )
    ply\AddDeaths( 1 )
    ply\ResetToggles!
    ply\Extinguish!
    ply\DropObject!

-- https://wiki.facepunch.com/gmod/GM:PlayerDeathThink
do

    OBS_MODE_NONE = OBS_MODE_NONE
    :GameInProgress = Jailbreak

    GM.PlayerDeathThink = ( ply ) =>
        if Teams[ ply\Team! ] and not GameInProgress!
            ply\Spawn!
            return

        if ply\GetObserverMode! == OBS_MODE_NONE
            ply\Spectate( OBS_MODE_ROAMING )

-- Spectator controls
do

    IN_ATTACK, IN_ATTACK2, IN_USE = IN_ATTACK, IN_ATTACK2, IN_USE
    :Weld = constraint
    :TraceLine = util
    :Create = ents

    MovementKeys = {
        [ IN_FORWARD ]: true
        [ IN_BACK ]: true
        [ IN_MOVELEFT ]: true
        [ IN_MOVERIGHT ]: true
    }

    traceResult = {}
    trace = { output: traceResult }

    GM.KeyPress = ( ply, key ) =>
        if ply\Alive!
            if key ~= IN_USE or ply\IsHoldingEntity!
                return

            Simple 0.05 + ( ply\Ping! or 0 ) / 1000, ->
                if not ( ply\IsValid! and ply\Alive! ) or ply\KeyDown( IN_USE ) or ply\IsHoldingEntity!
                    return

                trace.filter = ply
                trace.start = ply\EyePos!
                trace.endpos = trace.start + ply\GetAimVector! * 72
                TraceLine( trace )

                unless traceResult.Hit
                    return

                entity = traceResult.Entity
                unless entity\IsValid!
                    return

                if entity\IsRagdoll!
                    physID = max( 0, traceResult.PhysicsBone )

                    phys = entity\GetPhysicsObjectNum( physID )
                    unless phys and phys\IsValid! and phys\IsMoveable!
                        return

                    mover = Create( "jb_ragdoll_mover" )
                    mover\SetPos( phys\LocalToWorld( phys\GetMassCenter! ) )
                    mover.Ragdoll = entity
                    mover\SetOwner( ply )
                    mover\Spawn!

                    mover.Weld = Weld( mover, entity, 0, physID, 0, true, true )
                    ply\PickupObject( mover )

                elseif entity\IsFood!
                    ply\PickupObject( entity )

            return

        if MovementKeys[ key ]
            if ply\GetObserverMode! ~= OBS_MODE_ROAMING
                ply\ObserveEntity!

            return

        if key == IN_ATTACK
            ply\MoveObserveIndex( 1 )
            return

        if key == IN_ATTACK2
            ply\MoveObserveIndex( -1 )
            return

        if key == IN_JUMP
            target = ply\GetObserverTarget!
            unless target\IsValid! and ( ( target\IsPlayer! and target\Alive! ) or target\IsNPC! )
                return

            observerMode = ply\GetObserverMode!
            if observerMode == OBS_MODE_CHASE
                ply\Spectate( OBS_MODE_IN_EYE )
                ply\SetupHands( target )
                return

            if observerMode == OBS_MODE_IN_EYE
                ply\Spectate( OBS_MODE_CHASE )
                return

-- https://wiki.facepunch.com/gmod/GM:PlayerDeathThink
do

    :IsRoundPreparing = Jailbreak

    GM.CanPlayerSuicide = ( ply ) =>
        if IsRoundPreparing!
            return false

        return ply\Alive!

-- https://wiki.facepunch.com/gmod/GM:PlayerDeathSound
do

    CHAN_VOICE_BASE = CHAN_VOICE_BASE

    GM.PlayerDeathSound = ( ply ) =>
        if ply\IsGuard!
            ply\EmitSound( "Player.Death", 75, random( 80, 120 ), 1, CHAN_VOICE_BASE, 0, 1 )

        return true

-- Player disconnect handling
GM.PlayerDisconnected = ( ply ) =>
    teamID = ply\Team!
    if Teams[ teamID ]
        Run( "TeamPlayerDisconnected", ply, teamID )

-- Game info sending
do

    :Start, :WriteUInt, :WriteString, :Send = net
    CHAT_CONNECTED = CHAT_CONNECTED
    :SendChatText = Jailbreak

    GM.PlayerInitialized = ( ply ) =>
        if ply\IsBot!
            SendChatText( false, false, CHAT_CONNECTED, ply\GetModelColor!, ply\Nick! )
            return

        SendChatText( false, false, CHAT_CONNECTED, ply\GetModelColor!, ply\Nick!, ply\SteamID! )

        gameName = Jailbreak.GameName
        unless gameName
            return

        Start( "Jailbreak::Networking" )
        WriteUInt( 0, 4 )
        WriteString( gameName )
        Send( ply )

-- Returns whether or not a player is allowed to join a team.
do

    :TeamIsJoinable = Jailbreak

    GM.PlayerCanJoinTeam = ( ply, teamID, oldTeamID ) =>
        if teamID == oldTeamID
            return false, "#jb.error.already-on-team", 3

        unless TeamIsJoinable( teamID )
            return false, "#jb.error.cant-do-that", 5

        return true

-- https://wiki.facepunch.com/gmod/GM:PlayerSpray
do

    :AllowSprayEveryone = Jailbreak

    GM.PlayerSpray = ( ply ) =>
        unless ply\Alive!
            return true

        if AllowSprayEveryone\GetBool! or ply\IsPrisoner!
            return false

        ply\SendNotify( "#jb.error.cant-do-that", NOTIFY_ERROR, 2 )
        return true

-- https://wiki.facepunch.com/gmod/GM:PlayerShouldTaunt
do

    MOVETYPE_WALK = MOVETYPE_WALK

    GM.PlayerShouldTaunt = ( ply ) =>
        if ply\Alive! and ply\IsOnGround! and not ( ply\Crouching! or ply\InVehicle! ) and ply\GetMoveType! == MOVETYPE_WALK and ply\WaterLevel! < 2
            return true

        ply\SendNotify( "#jb.error.cant-do-that", NOTIFY_ERROR, 2 )
        return false

-- https://wiki.facepunch.com/gmod/GM:AllowPlayerPickup
GM.AllowPlayerPickup = ( ply, entity ) =>
    return ply\Alive! and not entity\IsFood!

-- https://wiki.facepunch.com/gmod/GM:PlayerCanPickupItem
GM.PlayerCanPickupItem = ( ply, entity ) =>
    return ply\Alive!

-- https://wiki.facepunch.com/gmod/GM:PlayerNoClip
GM.PlayerNoClip = ( ply, desiredState ) =>
    unless desiredState
        return true

    return ply\IsSuperAdmin! and ply\Alive! and not ply\IsPlayingTaunt!

-- https://wiki.facepunch.com/gmod/GM:PlayerSwitchFlashlight
GM.PlayerSwitchFlashlight = ( ply, newState ) =>
    unless newState
        return true

    return ply\Alive! and ply\CanUseFlashlight!

-- https://wiki.facepunch.com/gmod/GM:PlayerUse
GM.PlayerUse = ( ply, entity ) =>
    unless ply\Alive!
        return

    if ply\IsHoldingEntity!
        return false

    if entity\IsPlayer!
        return false

    curTime, lastUseTime = CurTime!, ply.LastUseTime or 0
    ply.LastUseTime = curTime

    className = entity\GetClass!

    isReleased = ( curTime - lastUseTime ) > 0.025
    if not lastUseTime or isReleased
        ply\SetNW2Int( "start-use-time", curTime )
        Run( "PlayerHoldUse", ply, entity, 0 )
    else
        startUseTime = ply\GetNW2Int( "start-use-time" )
        if startUseTime ~= 0 and Run( "PlayerHoldUse", ply, entity, curTime - startUseTime ) == true
            ply\SetNW2Int( "start-use-time", 0 )
            return false

    unless isReleased
        return

    if Run( "PlayerUsedEntity", ply, entity ) == false
        return false

    if entity\IsWeapon!
        if entity.PickupForbidden
            return false

        if entity.IsTemporaryWeapon
            entity = entity\GetParent!
            unless entity\IsValid! and entity\IsWeapon!
                return false

        if ply\HasWeapon( className )
            clip1, clip1Type = entity\Clip1!, entity\GetPrimaryAmmoType!
            if clip1 > 0 and clip1Type >= 0
                canPickup = min( clip1, ply\GetPickupAmmoCount( clip1Type ) )
                if canPickup > 0
                    entity\SetClip1( clip1 - canPickup )
                    ply\GiveAmmo( canPickup, clip1Type, false )

            clip2, clip2Type = entity\Clip2!, entity\GetSecondaryAmmoType!
            if clip2 > 0 and clip2Type >= 0
                canPickup = min( clip2, ply\GetPickupAmmoCount( clip2Type ) )
                if canPickup > 0
                    entity\SetClip2( clip2 - canPickup )
                    ply\GiveAmmo( canPickup, clip2Type, false )

            return false

        slot = entity\GetSlot!
        if slot > 0 and slot < 5
            if slot == 1 or slot == 4
                weapons, length = ply\GetWeaponsInSlot( slot )
                if length ~= 0
                    ply\DropWeapon( weapons[ length ] )

            else

                for i = 1, 2
                    weapons, length = ply\GetWeaponsInSlot( i + 1 )
                    if length ~= 0
                        ply\DropWeapon( weapons[ length ] )

        if Run( "PlayerCanPickupWeapon", ply, entity ) ~= false
            ply\PickupWeapon( entity, false )
            return false

    return true

-- https://wiki.facepunch.com/gmod/GM:OnEntityCreated
GM.OnEntityCreated = ( entity ) =>
    if entity\IsPlayer!
        Run( "OnPlayerCreated", entity )
        return

    -- Fuck 'game_player_equip'
    className = entity\GetClass!
    if className == "game_player_equip"
        entity\Remove!
        return

    if className == "func_button"
        entity\SetNW2Bool( "is-button", true )
        return

    entity\AddToObserveTargets!

    if entity\IsWeapon!
        Run( "OnWeaponCreated", entity )
        return

do

    :FreezeWeaponsOnSpawn = Jailbreak
    :FindInSphere = ents

    GM.OnWeaponCreated = ( weapon ) =>
        Simple 0, ->
            if not weapon\IsValid! or weapon\GetOwner!\IsValid!
                return

            phys = weapon\GetPhysicsObject!
            unless phys and phys\IsValid! and phys\IsMotionEnabled!
                return

            counter = 0
            for other in *FindInSphere( weapon\GetPos!, 32 )
                if other\IsWeapon! and not other\GetOwner!\IsValid!
                    counter = counter + 1
                    if counter >= 5
                        if FreezeWeaponsOnSpawn\GetBool!
                            phys\EnableMotion( false )
                        else
                            phys\Sleep!

                        return

-- https://wiki.facepunch.com/gmod/GM:EntityRemoved
GM.EntityRemoved = ( entity, fullUpdate ) =>
    if fullUpdate
        return

    if entity\IsValidObserveTarget!
        entity\RemoveFromObserveTargets!

    if entity.RagdollMover
        weld = entity.Weld
        if weld and weld\IsValid!
            weld\Remove!

-- https://wiki.facepunch.com/gmod/GM:PlayerLoadout
GM.PlayerLoadout = ( ply ) =>
    -- Giving weapons if not cstrike map
    if ply\IsGuard! and Jailbreak.GameName ~= "cstrike" and not @TF2Medieval
        ply\GiveRandomWeapons( 4 )

    -- Giving hands
    ply\Give( "jb_hands", false, true )
    ply\SelectWeapon( "jb_hands" )

hook.Add "PlayerSpawn", "Jailbreak::AmmoControler", =>
    @m_tGivedAmmo = nil

GM.WeaponEquip = ( weapon, owner ) =>
    unless owner\IsGuard! or owner\IsEscaped!
        return

    givedAmmo = owner.m_tGivedAmmo
    unless givedAmmo
        givedAmmo = {}
        owner.m_tGivedAmmo = givedAmmo

    primaryAmmoType = weapon\GetPrimaryAmmoType!
    if primaryAmmoType >= 0 and givedAmmo[ primaryAmmoType ] == nil
        amount = owner\GetPickupAmmoCount( primaryAmmoType )
        if amount ~= 0
            owner\GiveAmmo( amount, primaryAmmoType, false )
            givedAmmo[ primaryAmmoType ] = true

    secondaryAmmoType = weapon\GetSecondaryAmmoType!
    if secondaryAmmoType >= 0 and givedAmmo[ secondaryAmmoType ] == nil
        amount = owner\GetPickupAmmoCount( secondaryAmmoType )
        if amount ~= 0
            owner\GiveAmmo( amount, secondaryAmmoType, false )
            givedAmmo[ secondaryAmmoType ] = true

-- https://wiki.facepunch.com/gmod/GM:PlayerCanPickupWeapon
GM.PlayerCanPickupWeapon = ( ply, weapon ) =>
    if not ply\Alive! or ply\HasWeapon( weapon\GetClass! )
        return false

    -- 0: melee, 1: tier1, 2: tier2, 3: tier3, 4: tier4, 5: tools
    slot = weapon\GetSlot!
    if slot < 1 or slot > 4
        return true

    if ply\HasWeaponsInSlot( slot )
        return false

    -- tier 1 is light weapons and tier 4 is heavy weapons
    if slot == 1 or slot == 4
        return true

    -- tier 2 and 3 is main weapons, so we can have only one in two slots
    if ply\HasWeaponsInSlot( 2 ) or ply\HasWeaponsInSlot( 3 )
        return false

    return true

-- https://wiki.facepunch.com/gmod/GM:FinishMove
GM.FinishMove = ( ply, mv ) =>
    if ply\Alive!
        ply.LastVelocity = mv\GetVelocity!

GM.OnPlayerPhysicsPickup = ( ply, entity ) =>
    ply\SetNW2Entity( "holding-entity", entity )
    entity.m_eHolder = ply

do

    NULL = NULL

    GM.OnPlayerPhysicsDrop = ( ply, entity ) =>
        ply\SetNW2Entity( "holding-entity", NULL )
        entity.m_eHolder = nil
        ply\SetupMovement!

hook.Add "EntityRemoved", "Jailbreak::PhysicsDropFix", ( entity ) ->
    holder = entity.m_eHolder
    if holder and holder\IsValid! and holder\IsPlayer!
        Run( "OnPlayerPhysicsDrop", holder, entity )
