properties = properties
Jailbreak = Jailbreak
IsValid = IsValid

:List = properties

if CLIENT

    hook.Remove "PreventScreenClicks", "PropertiesPreventClicks"
	hook.Remove "PreDrawEffects", "PropertiesUpdateEyePos"
    hook.Remove "GUIMousePressed", "PropertiesClick"
    hook.Remove "PreDrawHalos", "PropertiesHover"

    :CanBeTargeted = properties
    :GetHoveredPanel = vgui
    :ScreenToVector = gui
    :GetCursorPos = input
    :TraceLine = util
    EyePos = EyePos
    NULL = NULL

    entity = NULL
    traceResult = {}
    trace = { output: traceResult }

    hook.Add "Think", "Jailbreak::Properties", =>
        panel = GetHoveredPanel!
        unless panel and panel\IsValid! and panel\IsWorldClicker!
            entity = NULL
            return

        trace.start = EyePos!
        trace.endpos = trace.start + ScreenToVector( GetCursorPos! ) * 1024
        trace.filter = Jailbreak.ViewEntity
        TraceLine( trace )

        entity = traceResult.Hit and traceResult.Entity or NULL

        if entity\IsValid! and ( entity\GetNoDraw! or not CanBeTargeted( entity, Jailbreak.Player ) )
           entity = NULL

    do

        :SuppressEngineLighting, :SetStencilEnable, :SetStencilWriteMask, :SetStencilTestMask, :SetStencilReferenceValue, :SetStencilCompareFunction, :SetStencilPassOperation, :SetStencilFailOperation, :SetStencilZFailOperation = render
        STENCIL_ALWAYS, STENCIL_KEEP, STENCIL_REPLACE, STENCIL_EQUAL = STENCIL_ALWAYS, STENCIL_KEEP, STENCIL_REPLACE, STENCIL_EQUAL
        :DrawModel = FindMetaTable( "Entity" )
        :SetDrawColor, :DrawRect = surface
        :Start2D, :End2D = cam

        hook.Add "HUDPaint3D", "Jailbreak::Properties", ->
            unless entity\IsValid!
                return

            contextMenu = Jailbreak.ContextMenu
            unless contextMenu and contextMenu\IsValid! and contextMenu\IsVisible!
                return

            SetStencilEnable( true )
            SuppressEngineLighting( true )
            SetStencilWriteMask( 1 )
            SetStencilTestMask( 1 )
            SetStencilReferenceValue( 1 )

            SetStencilCompareFunction( STENCIL_ALWAYS )
            SetStencilPassOperation( STENCIL_REPLACE )
            SetStencilFailOperation( STENCIL_KEEP )
            SetStencilZFailOperation( STENCIL_KEEP )

            DrawModel( entity )

            SetStencilCompareFunction( STENCIL_EQUAL )
            SetStencilPassOperation( STENCIL_KEEP )

            Start2D!
            SetDrawColor( 255, 255, 255, 5 )
            DrawRect( 0, 0, Jailbreak.ScreenWidth, Jailbreak.ScreenHeight )
            End2D!

            SuppressEngineLighting( false )
            SetStencilEnable( false )

            SetStencilTestMask( 0 )
            SetStencilWriteMask( 0 )
            SetStencilReferenceValue( 0 )

    -- hook.Add "PlayerButtonUp", "Jailbreak::Properties", ( key ) =>
    --     if key ~= MOUSE_LEFT or input.IsButtonDown( MOUSE_RIGHT ) or @KeyDown( IN_WALK )
    --         return

    --     timer.Simple 0, ->
    --         unless entity\IsValid!
    --             return

    --         options, length = {}, 0
    --         for _, data in SortedPairsByMemberValue( List, "Order" )
    --             unless data.Filter and data\Filter( entity, ply )
    --                 continue

    --             length += 1
    --             options[ length ] = data

    --         if length == 0
    --             return

    --         if IsValid( optionsPanel )
    --             optionsPanel\Remove!

    --         optionsPanel = DermaMenu( true, panel )

    --         for index = 1, length
    --             data = options[ index ]

    --             option = nil
    --             if data.Type == "toggle"
    --                 unless optionsPanel.ToggleSpacer
    --                     spacer = optionsPanel\AddSpacer!
    --                     optionsPanel.ToggleSpacer = spacer
    --                     spacer\SetZPos( 500 )

    --                 option = optionsPanel\AddOption data.MenuLabel, ->
    --                     data\Action( entity, traceResult )

    --                 option\SetChecked( data\Checked( entity, ply ) )
    --                 option\SetZPos( 501 )
    --             else
    --                 if data.PrependSpacer
    --                     optionsPanel\AddSpacer!

    --                 option = optionsPanel\AddOption( data.MenuLabel, ->
    --                     data\Action( entity, traceResult )
    --                 )

    --                 icon = data.MenuIcon
    --                 if icon
    --                     option\SetImage( icon )

    --                 func = data.MenuOpen
    --                 if func
    --                     func( data, option, entity, traceResult )

    --             func = data.OnCreate
    --             if func
    --                 func( data, optionsPanel, option )

    --         optionsPanel\Open!

GM.CanProperty = ( ply, propertyName, entity ) =>
    unless IsValid( entity )
        return

    if propertyName == "bonemanipulate"
        return false

    allowedTools = entity.m_tblToolsAllowed
    if allowedTools
        length = #allowedTools
        for index = 1, length
            if allowedTools[ index ] == propertyName
                break

            if index == length
                return false

    if entity\IsWeapon! and entity\GetOwner!\IsValid!
        return false

    func = entity.CanProperty
	if func
        return func( entity, ply, propertyName )

    return true
