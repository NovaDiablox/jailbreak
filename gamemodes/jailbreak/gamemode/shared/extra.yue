Jailbreak = Jailbreak
CurTime = CurTime
ENTITY = ENTITY
PLAYER = PLAYER
SERVER = SERVER
CLIENT = CLIENT
:Add = hook

:GetVelocity, :SetVelocity = CMOVEDATA
:GetNW2Var, :SetNW2Var = ENTITY
:Alive = PLAYER

-- Disallow player shoot on marker setup
do

    IN_ATTACK = IN_ATTACK
    IN_WALK = IN_WALK

    Add "StartCommand", "Jailbreak::Markers", ( cmd ) =>
        if Alive( @ ) and cmd\KeyDown( IN_WALK )
            cmd\RemoveKey( IN_ATTACK )
            cmd\RemoveKey( IN_ATTACK2 )

-- Silly death animations
Add "AllowPlayerMove", "Jailbreak::Death Animations", =>
    if GetNW2Var( @, "death-animation" ) == 0
        return

    return false

Add "PlayerEmitSound", "Jailbreak::Death Animations", ( data ) =>
    if GetNW2Var( @, "death-animation" ) ~= 0
        return false

-- -- TF2 Double Jump
-- Add "Move", "Jailbreak::TF2 Double Jump", ( mv ) =>
--     if Jailbreak.m_sGameName ~= "tf" or @WaterLevel! > 1
--         return

--     if @IsOnGround!
--         @HasDoubleJump = true
--     elseif @HasDoubleJump and mv\KeyPressed( IN_JUMP )
--         @HasDoubleJump = false

--         velocity = GetVelocity( mv )
--         velocity[ 3 ] = @GetJumpPower! * 2
--         SetVelocity( mv, velocity )

-- Player can't take damage in death animation
Add "CanPlayerTakeDamage", "Jailbreak::Death Animations", =>
    if GetNW2Var( @, "death-animation" ) == 2
        return false

-- Developer features
do

    IN_JUMP = IN_JUMP
    IN_DUCK = IN_DUCK
    IN_SPEED = IN_SPEED
    IN_FORWARD = IN_FORWARD
    IN_BACK = IN_BACK
    IN_MOVELEFT = IN_MOVELEFT
    IN_MOVERIGHT = IN_MOVERIGHT

    sv_gravity = GetConVar( "sv_gravity" )
    FrameTime = FrameTime
    :IsOnGround = ENTITY
    Lerp = Lerp
    :band = bit
    :abs = math

    Add "Move", "Jailbreak::Developer", ( mv ) =>
        unless @IsFlightAllowed!
            if not CLIENT and GetNW2Var( @, "in-flight" )
                SetNW2Var( @, "in-flight", false )

            return

        if IsOnGround( @ )
            if not CLIENT and GetNW2Var( @, "in-flight" )
                SetNW2Var( @, "in-flight", false )

        elseif GetNW2Var( @, "in-flight" )
            velocity = GetVelocity( mv )
            angles = mv\GetMoveAngles!

            buttons = mv\GetButtons!

            if band( buttons, IN_FORWARD ) ~= 0
                velocity += angles\Forward! * 16
                buttons -= IN_FORWARD

            if band( buttons, IN_BACK ) ~= 0
                velocity += angles\Forward! * -16
                buttons -= IN_BACK

            if band( buttons, IN_MOVELEFT ) ~= 0
                velocity += angles\Right! * -16
                buttons -= IN_MOVELEFT

            if band( buttons, IN_MOVERIGHT ) ~= 0
                velocity += angles\Right! * 16
                buttons -= IN_MOVERIGHT

            if band( buttons, IN_JUMP ) ~= 0
                velocity += angles\Up! * 16
                buttons -= IN_JUMP

            if band( buttons, IN_DUCK ) ~= 0
                velocity += angles\Up! * -16
                buttons -= IN_DUCK

            frameTime = FrameTime!

            if band( buttons, IN_SPEED ) ~= 0
                velocity[ 1 ] = Lerp( frameTime, velocity[ 1 ], 0 )
                velocity[ 2 ] = Lerp( frameTime, velocity[ 2 ], 0 )
                velocity[ 3 ] = Lerp( frameTime, velocity[ 3 ], 0 )
                buttons -= IN_SPEED

            if abs( velocity[ 1 ] ) < 1
                velocity[ 1 ] = 0

            if abs( velocity[ 2 ] ) < 1
                velocity[ 2 ] = 0

            if abs( velocity[ 3 ] ) < 1
                velocity[ 3 ] = 0

            velocity[ 3 ] += ( @GetGravity! + 1 ) * sv_gravity\GetFloat! * 0.5 * frameTime

            SetVelocity( mv, velocity )
            mv\SetButtons( buttons )

        elseif not CLIENT and mv\KeyPressed( IN_JUMP )
            SetNW2Var( @, "in-flight", true )

Add "Move", "Jailbreak::Shock", ( mv ) =>
    shockTime = GetNW2Var( @, "shock-time" )
    if not shockTime or CurTime! > shockTime
        return

    mv\SetMaxSpeed( @GetWalkSpeed! / 4 )
    return

Add "PlayerEmitSound", "Jailbreak::SilentDeath", ( data ) =>
    unless Alive( @ )
        return false

-- Block player movement while spawning
do

    :IsSpawning = PLAYER

    Add "AllowPlayerMove", "Jailbreak::PlayerSpawning", =>
        if IsSpawning( @ )
            return false

-- Block player movement while taunting
do

    :IsPlayingTaunt = PLAYER

    Add( "StartCommand", "Jailbreak::Taunts", ( cmd ) =>
        if IsPlayingTaunt( @ )
            cmd\SetImpulse( 0 )

    PRE_HOOK )

    Add( "SetupMove", "Jailbreak::Taunts", ( _, cmd ) =>
        if IsPlayingTaunt( @ )
            cmd\ClearMovement!
            cmd\ClearButtons!

    PRE_HOOK )

-- Block player movement while player in spectator mode
do

    OBS_MODE_NONE = OBS_MODE_NONE
    :GetObserverMode = PLAYER

    Add "AllowPlayerMove", "Jailbreak::AliveSpectator", =>
        if Alive( @ ) and GetObserverMode( @ ) ~= OBS_MODE_NONE
            return false

Add "PlayerFootstep", "Jailbreak::LoseConsciousness", ( ply ) ->
    if GetNW2Var( ply, "lost-consciousness" )
        return true

do

    :Length2D, :SetUnpacked = VECTOR
    speed = 0

    Add "Move", "Jailbreak::PlayerPush", ( mv ) =>
        target = GetNW2Var( @, "push-target" )
        if target and target\IsValid! and target\Alive!
            velocity = GetVelocity( mv )

            speed, direction = Length2D( velocity ), nil
            if speed == 0
                speed, direction = @GetWalkSpeed!, @GetAimVector!
            else
                direction = velocity\GetNormalized!
                SetUnpacked( velocity, velocity[ 1 ] * 0.5, velocity[ 2 ] * 0.5, velocity[ 3 ] )
                SetVelocity( mv, velocity )

            @m_vPushVelocity = direction * speed
            return

        pusher = GetNW2Var( @, "pushing-player" )
        if pusher and pusher\IsValid! and pusher\Alive!
            if SERVER and @GetPos!\DistToSqr( pusher\GetPos! ) > 5184
                SetNW2Var( pusher, "push-target", nil )
                SetNW2Var( @, "pushing-player", nil )
                return

            pushVelocity = pusher.m_vPushVelocity
            unless pushVelocity
                return

            pushVelocity *= 1.125
            pushVelocity[ 3 ] = GetVelocity( mv )[ 3 ]
            SetVelocity( mv, pushVelocity )
            return
