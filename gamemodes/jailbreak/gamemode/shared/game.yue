ENTITY, PLAYER = FindMetaTable( "Entity" ), FindMetaTable( "Player" )
Jailbreak = Jailbreak
GM = GM

:GetClass, :GetTable, :WaterLevel, :IsOnGround, :IsValid, :GetNW2Bool, :IsFlagSet = ENTITY
:Length = FindMetaTable( "Vector" )
CLIENT = CLIENT
:Run = hook

TEAM_GUARD = TEAM_GUARD

-- Allowing players to take damage
do

    :IsRoundPreparing, :GuardsFriendlyFire = Jailbreak

    GM.CanPlayerTakeDamage = ( ply, damageInfo, teamID ) =>
        if ply\HasGodMode! or not ply\Alive!
            return false

        attacker = damageInfo\GetAttacker!
        unless IsValid( attacker ) and attacker\IsPlayer!
            return true

        if attacker == ply
            return true

        if IsRoundPreparing!
            return false

        if not GuardsFriendlyFire\GetBool! and teamID == TEAM_GUARD and teamID == attacker\Team!
            return false

        return true

-- https://wiki.facepunch.com/gmod/GM:UpdateAnimation
GM.UpdateAnimation = ( ply, velocity, maxSeqGroundSpeed ) =>
	speed = Length( velocity )
	rate = 1.0

    if GetTable( ply ).m_bWasNoclipping or GetNW2Bool( ply, "in-flight" )
        rate = speed < 32 and 0.25 or 0
    elseif WaterLevel( ply ) > 1
        rate = 0.5
    else

        if speed > 0.2
            rate = speed / maxSeqGroundSpeed

        if rate > 2
            rate = 2

        if WaterLevel( ply ) >= 2
            if rate < 0.5
                rate = 0.5

        elseif not IsOnGround( ply ) and speed >= 1000
            rate = 0.1

	ply\SetPlaybackRate( rate )

	if CLIENT and not ply\IsBot!
        Run "PerformPlayerVoice", ply
        if ply\Alive!
            Run "MouthMoveAnimation", ply
            Run "GrabEarAnimation", ply

-- https://wiki.facepunch.com/gmod/GM:ShouldCollide
GM.ShouldCollide = ( entity, ply ) =>
    unless ply\IsPlayer! and ply\Alive!
        return

    if GetClass( entity ) == "func_respawnroomvisualizer" and not entity\IsDisabled!
        return ply\Team! ~= entity\Team!

-- https://wiki.facepunch.com/gmod/GM:PlayerFootstep
do

    :PlayerSlowWalkSpeed = Jailbreak

    GM.PlayerFootstep = ( ply, pos, foot, soundPath, volume, recipientFilter ) =>
        if IsFlagSet( ply, 4 ) or Length( ply\GetVelocity! ) < PlayerSlowWalkSpeed\GetInt!
            return true

-- https://wiki.facepunch.com/gmod/GM:ScalePlayerDamage
do

    hitGroups = {
        [ HITGROUP_GENERIC ]: 1
        [ HITGROUP_HEAD ]: 5
        [ HITGROUP_CHEST ]: 1
        [ HITGROUP_STOMACH ]: 1
        [ HITGROUP_LEFTARM ]: 0.25
        [ HITGROUP_RIGHTARM ]: 0.25
        [ HITGROUP_LEFTLEG ]: 0.25
        [ HITGROUP_RIGHTLEG ]: 0.25
        [ HITGROUP_GEAR ]: 0.25
    }

    do

        conVarFlags = bit.bor( FCVAR_ARCHIVE, FCVAR_NOTIFY, FCVAR_REPLICATED, FCVAR_DONTRECORD )
        CreateConVar = CreateConVar
        :AddChangeCallback = cvars
        tostring = tostring
        tonumber = tonumber

        for index, default in pairs( hitGroups )
            conVarName = "jb_hitgroup" .. index .. "_scale"
            hitGroups[ index ] = CreateConVar( conVarName, tostring( default ), conVarFlags, "https://wiki.facepunch.com/gmod/Enums/HITGROUP", 0, 1000 )\GetFloat!
            AddChangeCallback( conVarName, ( _, __, str ) ->
                hitGroups[ index ] = tonumber( str ) or 0
            "Jailbreak::HitGroups" )

    do

        isnumber = isnumber
        damageScale = 0

        GM.ScaleHitGroupDamage = ( hitGroup, damageInfo ) =>
            damageScale = hitGroups[ hitGroup ]
            if isnumber( damageScale )
                damageInfo\ScaleDamage( damageScale )

    GM.ScalePlayerDamage = ( ply, hitGroup, damageInfo ) =>
        Run( "ScaleHitGroupDamage", hitGroup, damageInfo )

        if CLIENT and Run( "CanPlayerTakeDamage", ply, damageInfo, ply\Team! ) ~= true
            return true

-- https://wiki.facepunch.com/gmod/GM:EntityEmitSound
do

    sv_cheats, host_timescale = GetConVar( "sv_cheats" ), GetConVar( "host_timescale" )
    :GetDemoPlaybackTimeScale = engine
    :GetTimeScale = game
    :Clamp = math

    GM.EntityEmitSound = ( data ) =>
        pitch = data.Pitch

        timeScale = GetTimeScale!
        if timeScale ~= 1
		    pitch *= timeScale

        timeScale = sv_cheats\GetBool! and host_timescale\GetFloat! or 1
        if timeScale ~= 1
		    pitch *= timeScale

        entity = data.Entity
        if IsValid( entity )
            if entity\IsPlayer!
                result = Run( "PlayerEmitSound", entity, data )
                if result ~= nil
                    return result

            else

                result = Run( "ValidEntityEmitSound", entity, data )
                if result ~= nil
                    return result

        elseif entity\IsWorld!

            result = Run( "WorldEmitSound", entity, data )
            if result ~= nil
                return result

        if pitch ~= data.Pitch
            data.Pitch = Clamp( pitch, 0, 255 )
            return true

        if CLIENT
            timeScale = GetDemoPlaybackTimeScale!
            if timeScale ~= 1
                data.Pitch = Clamp( data.Pitch * timeScale, 0, 255 )
                return true

do

    ACT_MP_CROUCH_IDLE = ACT_MP_CROUCH_IDLE
    ACT_MP_STAND_IDLE = ACT_MP_STAND_IDLE
    ACT_MP_CROUCHWALK = ACT_MP_CROUCHWALK
    ACT_HL2MP_IDLE = ACT_HL2MP_IDLE
    ACT_MP_JUMP = ACT_MP_JUMP
    ACT_MP_SWIM = ACT_MP_SWIM
    ACT_MP_WALK = ACT_MP_WALK
    ACT_MP_RUN = ACT_MP_RUN
    ACT_LAND = ACT_LAND

    do

        :InVehicle, :GetWalkSpeed, :GetRunSpeed, :GetActiveWeapon, :IsPrisoner, :GetVehicle, :GetAllowWeaponsInVehicle = PLAYER
        :GetMoveType, :LookupSequence, :GetParent, :GetModel = ENTITY
        ACT_HL2MP_RUN_PANICKED = ACT_HL2MP_RUN_PANICKED
        :Length2DSqr = FindMetaTable( "Vector" )
        :GetHoldType = FindMetaTable( "Weapon" )
        ACT_HL2MP_RUN_FAST = ACT_HL2MP_RUN_FAST
        GESTURE_SLOT_JUMP = GESTURE_SLOT_JUMP
        MOVETYPE_NOCLIP = MOVETYPE_NOCLIP

        singleHandHoldTypes = {
            grenade: true
            normal: true
            melee: true
            knife: true
            fist: true
            slam: true
        }

        isSwimming, isNoclipping, isOnGround = false, false, false
        calcIdeal, seqOverride, playerSpeed = 0, 0, 0
        vehicles = list.GetForEdit( "Vehicles" )

        GM.CalcMainActivity = ( ply, velocity ) =>
            calcIdeal, seqOverride = ACT_MP_STAND_IDLE, -1
            isOnGround = IsOnGround( ply )
            tbl = GetTable( ply )

            if InVehicle( ply ) and IsValid( GetParent( ply ) )
                vehicle = GetVehicle( ply )

                if vehicle.HandleAnimation == nil
                    data = vehicles[ vehicle\GetVehicleClass! ]
                    if data and data.Members and data.Members.HandleAnimation
                        vehicle.HandleAnimation = data.Members.HandleAnimation
                    else
                        vehicle.HandleAnimation = true

                if vehicle.HandleAnimation ~= true
                    seqOverride = vehicle\HandleAnimation( ply ) or seqOverride
                    if seqOverride ~= -1
                        goto finish

                className = GetClass( vehicle )
                if className == "prop_vehicle_jeep"
                    seqOverride = LookupSequence( ply, "drive_jeep" )

                elseif className == "prop_vehicle_airboat"
                    seqOverride = LookupSequence( ply, "drive_airboat" )

                elseif className == "prop_vehicle_prisoner_pod" and GetModel( vehicle ) == "models/vehicles/prisoner_pod_inner.mdl"
                    seqOverride = LookupSequence( ply, "drive_pd" )

                else

                    if GetAllowWeaponsInVehicle( ply )
                        weapon = GetActiveWeapon( ply )
                        if IsValid( weapon )
                            holdtype = GetHoldType( weapon )
                            seqOverride = LookupSequence( ply, holdtype == "smg" and "sit_smg1" or ( "sit_" .. holdtype ) )

                    calcIdeal = ACT_HL2MP_SIT

                goto finish

            -- Player noclip & swimming
            isNoclipping, isSwimming = GetMoveType( ply ) == MOVETYPE_NOCLIP, WaterLevel( ply ) > 1
            if isNoclipping or isSwimming or GetNW2Bool( ply, "in-flight" )
                calcIdeal = ACT_MP_SWIM
                goto finish

            if IsFlagSet( ply, 4 )
                if Length2DSqr( velocity ) < 0.25
                    weapon = GetActiveWeapon( ply )
                    if weapon and IsValid( weapon ) and GetHoldType( weapon ) ~= "normal"
                        calcIdeal = ACT_MP_CROUCH_IDLE
                    else
                        calcIdeal, seqOverride = ACT_MP_JUMP, LookupSequence( ply, "pose_ducking_01" )

                else
                    calcIdeal = ACT_MP_CROUCHWALK

            elseif isOnGround
                if tbl.m_bWasOnGround
                    playerSpeed = Length2DSqr( velocity )

                    if playerSpeed > GetWalkSpeed( ply )
                        if playerSpeed >= GetRunSpeed( ply ) * 0.95
                            weapon = GetActiveWeapon( ply )
                            if weapon and IsValid( weapon )
                                if IsPrisoner( ply ) and GetHoldType( weapon ) == "normal"
                                    calcIdeal = ACT_HL2MP_RUN_PANICKED
                                    goto finish

                                if singleHandHoldTypes[ GetHoldType( weapon ) ]
                                    calcIdeal = ACT_HL2MP_RUN_FAST
                                    goto finish

                        calcIdeal = ACT_MP_RUN

                    elseif playerSpeed > 0.25
                        calcIdeal = ACT_MP_WALK

                elseif not ply\IsSpawning!
                    ply\AnimRestartGesture( GESTURE_SLOT_JUMP, ACT_LAND, true )

            else
                calcIdeal = ACT_MP_JUMP

            ::finish::

            tbl.m_bInSwim = isSwimming
            tbl.m_bWasOnGround = isOnGround
            tbl.m_bWasNoclipping = isNoclipping

            tbl.CalcIdeal, tbl.CalcSeqOverride = calcIdeal, seqOverride

            return calcIdeal, seqOverride

    do

        idleActivityTranslate = {
            [ ACT_MP_STAND_IDLE ]: ACT_HL2MP_IDLE
            [ ACT_MP_WALK ]: ACT_HL2MP_IDLE + 1
            [ ACT_MP_RUN ]: ACT_HL2MP_IDLE + 2
            [ ACT_MP_CROUCH_IDLE ]: ACT_HL2MP_IDLE + 3
            [ ACT_MP_CROUCHWALK ]: ACT_HL2MP_IDLE + 4
            [ ACT_MP_ATTACK_STAND_PRIMARYFIRE ]: ACT_HL2MP_IDLE + 5
            [ ACT_MP_ATTACK_CROUCH_PRIMARYFIRE ]: ACT_HL2MP_IDLE + 5
            [ ACT_MP_RELOAD_STAND ]: ACT_HL2MP_IDLE + 6
            [ ACT_MP_RELOAD_CROUCH ]: ACT_HL2MP_IDLE + 6
            [ ACT_MP_JUMP ]: ACT_HL2MP_JUMP_SLAM
            [ ACT_MP_SWIM ]: ACT_HL2MP_IDLE + 9
            [ ACT_LAND ]: ACT_LAND
        }

        :TranslateWeaponActivity = PLAYER
        nextAct = 0

        GM.TranslateActivity = ( ply, act ) =>
            nextAct = TranslateWeaponActivity( ply, act )
            if act == nextAct
                return idleActivityTranslate[ act ]

            return nextAct
