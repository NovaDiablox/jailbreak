include( "shared.lua" )
include( "ui.lua" )

:Approach, :Clamp, :Rand, :abs, :sin = math
:format, :find, :gsub, :upper = string
RunConsoleCommand = RunConsoleCommand
LocalPlayer = LocalPlayer
:GetPhrase = language
Jailbreak = Jailbreak
list_Set = list.Set
hook_Run = hook.Run

ROUND_WAITING_PLAYERS = ROUND_WAITING_PLAYERS
ROUND_RUNNING = ROUND_RUNNING
ROUND_ENDED = ROUND_ENDED

colors = Jailbreak.Colors
:grey, :white = colors

cvars.AddChangeCallback( "gmod_language", ( _, __, value ) ->
    hook_Run( "LanguageChanged", cvars.String( "gmod_language", "" ), value )
"Jailbreak")

Jailbreak.Translate = ( str ) ->
    return gsub( str, "#([%w%.-_]+)", GetPhrase )

GM.PostCleanupMap = =>
    RunConsoleCommand( "r_cleardecals" )

GM.InitPostEntity = =>
    timer.Simple 0.5, ->
        RunConsoleCommand( "r_flushlod" )

    unless LocalPlayer!\IsInGame!
        Jailbreak.ShowTeam!

    chat.Open( 1 )

concommand.Add "jb_showteam", ->
    Jailbreak.ShowTeam!

GM.PreDrawViewModel = ( vm, ply, weapon ) =>
	unless IsValid( weapon )
        return false

    func = weapon.PreDrawViewModel
    if func
    	return func( weapon, vm, weapon, ply )
    return false

GM.PostDrawViewModel = ( vm, ply, weapon ) =>
	unless IsValid( weapon )
        return false

	if weapon.UseHands or not weapon\IsScripted!
		hands = ply\GetHands!
		if IsValid( hands ) and IsValid( hands\GetParent! )
			unless hook_Run( "PreDrawPlayerHands", hands, vm, ply, weapon )
				if weapon.ViewModelFlip
                    render.CullMode( MATERIAL_CULLMODE_CW )

				hands\DrawModel!
				render.CullMode( MATERIAL_CULLMODE_CCW )

			hook_Run( "PostDrawPlayerHands", hands, vm, ply, weapon )

    func = weapon.PostDrawViewModel
	if func
	    return func( weapon, vm, weapon, ply )

    return false

GM.OnSpawnMenuOpen = =>
    RunConsoleCommand( "lastinv" )

GM.PostProcessPermitted = ( name ) =>
    return false

GM.PlayerButtonUp = ( ply, keyCode ) =>
    if keyCode ~= KEY_G
        return

    bind = input.LookupKeyBinding( keyCode )
    if bind and bind ~= ""
        return

    RunConsoleCommand( "drop" )

do

    TauntCamera = TauntCamera!

    GM.ShouldDrawLocalPlayer = ( ply ) =>
        return TauntCamera\ShouldDrawLocalPlayer( ply, ply\IsPlayingTaunt! )

    GM.CreateMove = ( cmd ) =>
        if drive.CreateMove( cmd )
            return true

        ply = LocalPlayer!
        if TauntCamera\CreateMove( cmd, ply, ply\IsPlayingTaunt! )
            return true

    GM.CalcView = ( ply, origin, angles, fov, znear, zfar ) =>
        view = { :origin, :angles, :fov, :znear, :zfar, drawviewer: false }

        if TauntCamera\CalcView( view, ply, ply\IsPlayingTaunt! )
            return view

        if ply\InVehicle!
            return hook_Run( "CalcVehicleView", ply\GetVehicle!, ply, view )

        if drive.CalcView( ply, view )
            return view

        weapon = ply\GetActiveWeapon!
        if IsValid( weapon )
            func = weapon.CalcView
            if func
                origin, angles, fov = func( weapon, ply, Vector( view.origin ), Angle( view.angles ), view.fov )
                view.origin, view.angles, view.fov = origin or view.origin, angles or view.angles, fov or view.fov

        return view

do

    :AddText = chat
    :date = os

    ChatTime = CreateClientConVar( "jb_chat_time", "1", true, false, "Draw time of chat messages.", 0, 1 )

    Jailbreak.ChatText = ( ... ) ->
        if ChatTime\GetBool!
            AddText( grey, date( "[%H:%M:%S] " ), white, ... )
        else
            AddText( white, ... )

do

    :ReadString, :ReadUInt, :ReadTable = net
    :AddLegacy = notification
    unpack = unpack

    Functions = {
        [0]: ->
            gameName = ReadString!
            SoundHandler( gameName )
            Jailbreak.GameName = gameName
        [1]: ->
            hook_Run( "HUDItemPickedUp", ReadString! )
        [2]: ->
            AddLegacy( format( GetPhrase( ReadString! ), unpack( ReadTable( true ) ) ), ReadUInt( 3 ), ReadUInt( 16 ) )
        [3]: ->
            data = ReadTable( true )
            for index, value in ipairs( data )
                if isstring( value )
                    data[ index ] = Jailbreak.Translate( value )

            Jailbreak.ChatText( unpack( data ) )
    }

    net.Receive( "Jailbreak::Networking", ->
        func = Functions[ ReadUInt( 2 ) ]
        if func
            func!
    )

do

    PLAYER = FindMetaTable( "Player" )
    PLAYER_SetVoiceVolumeScale = PLAYER.SetVoiceVolumeScale

    net.Receive "JB::Voice Chat", ->
        for i = 1, net.ReadUInt( 10 )
            ply, volume = net.ReadEntity!, net.ReadFloat!
            if ply\IsValid!
                PLAYER_SetVoiceVolumeScale( ply, volume )

do

    TEXT_ALIGN_CENTER = TEXT_ALIGN_CENTER
    :GetName, :GetColor = team

    GM.HUDPaint = =>
        if @TargetIDDraw\GetBool!
            hook_Run( "HUDDrawTargetID" )

        hook_Run( "HUDDrawPickupHistory" )

        if @DeathNoticeDraw\GetBool!
            hook_Run( "DrawDeathNotice", 0.85, 0.04 )

        state = Jailbreak.GetRoundState!
        if state == ROUND_RUNNING
            return

        str = GetPhrase( "jb.round." .. state )
        if state ~= ROUND_WAITING_PLAYERS
            remainingTime = Jailbreak.GetRemainingTime!
            if remainingTime == 0
                return

            str = format( str, remainingTime )

        draw.DrawText( upper( str ), "DermaLarge", ScrW! / 2, 32, white, TEXT_ALIGN_CENTER )

        if state == ROUND_ENDED
            teamID = Jailbreak.GetWinningTeam!
            if Jailbreak.Teams[ teamID ]
                draw.DrawText( format( GetPhrase( "#jb.victory" ), GetPhrase( GetName( teamID ) ) ), "DermaLarge", ScrW! / 2, 64, GetColor( teamID ), TEXT_ALIGN_CENTER )
            else
                draw.DrawText( GetPhrase( "#jb.draw" ), "DermaLarge", ScrW! / 2, 64, white, TEXT_ALIGN_CENTER )

do

    SecurityRadio = CreateConVar( "jb_security_radio", "0", FCVAR_USERINFO, "Responsible for turning the radio on or off.", 0, 1 )

    list_Set "DesktopWindows", "walkie-talkie", {
        title: "#jb.walkie-talkie"
        icon: "icon16/phone.png"
        order: 500
        think: =>
            if LocalPlayer!\HasSecurityRadio!
                state = SecurityRadio\GetBool!

                image = state and "icon16/phone_sound.png" or "icon16/phone.png"
                if @Image\GetImage! ~= image
                    @Image\SetImage( image )

                if @IsVisible!
                    return
                @Show!
            elseif @IsVisible!
                @Hide!

            @GetParent!\Layout!

        click: =>
            SecurityRadio\SetBool( not SecurityRadio\GetBool! )
    }

do

    Megaphone = CreateConVar( "jb_megaphone", "0", FCVAR_USERINFO, "Activates the warden's ability to speak for the entire map.", 0, 1 )

    list_Set "DesktopWindows", "megaphone", {
        title: "#jb.megaphone"
        icon: "icon16/sound_mute.png"
        order: 500
        think: =>
            if LocalPlayer!\IsWarden!
                state = Megaphone\GetBool!

                image = state and "icon16/sound.png" or "icon16/sound_mute.png"
                if @Image\GetImage! ~= image
                    @Image\SetImage( image )

                if @IsVisible!
                    return

                @Show!

            if @IsVisible!
                @Hide!

            @GetParent!\Layout!

        click: =>
            Megaphone\SetBool( not Megaphone\GetBool! )
    }

list_Set "DesktopWindows", "warden-request", {
    title: "#jb.warden.join"
    icon: "icon16/user_suit.png"
    order: 1000
    think: =>
        if Jailbreak.IsRoundRunning!
            ply = LocalPlayer!
            if ply\Alive!
                if Jailbreak.HasWarden!
                    if ply\IsWarden!
                        image = "icon16/user.png"
                        if @Image\GetImage! ~= image
                            @Image\SetImage( image )

                        text = "#jb.warden.leave"
                        if @Label\GetText! ~= text
                            @Label\SetText( text )
                            @SetTooltip( text )

                        unless @IsVisible!
                            @Show!
                            @GetParent!\Layout!

                        return
                elseif ply\IsGuard!
                    image = "icon16/user_suit.png"
                    if @Image\GetImage! ~= image
                        @Image\SetImage( image )

                    text = "#jb.warden.join"
                    if @Label\GetText! ~= text
                        @Label\SetText( text )
                        @SetTooltip( text )

                    unless @IsVisible!
                        @Show!
                        @GetParent!\Layout!
                    return

        if @IsVisible!
            @Hide!
            @GetParent!\Layout!

    click: =>
        RunConsoleCommand( "jb_warden" )
}

list_Set "DesktopWindows", "shock-collars", {
    title: "#jb.shock-collars"
    icon: "icon16/lightning.png"
    order: 500
    think: =>
        if Jailbreak.GameInProgress!
            ply = LocalPlayer!
            if ply\IsWarden! and ply\Alive!
                state = Jailbreak.IsShockCollarsActive!

                image = state and "icon16/accept.png" or "icon16/cancel.png"
                if @GetImage! ~= image
                    @SetImage( image )

                unless @IsVisible!
                    @Show!
                    @GetParent!\Layout!
                return

        if @IsVisible!
            @Hide!
            @GetParent!\Layout!

    click: =>
        RunConsoleCommand( "jb_shock_collars" )
}

GM.OnPlayerChat = ( ply, text, _, isDead ) =>
    result = {}

    if isDead
        result[] = colors.light_grey
        result[] = "[#jb.chat.dead] "

    if IsValid( ply )
        result[] = ply\GetPlayerColor!\ToColor!
        result[] = ply\Nick!

        filter = TEXT_FILTER_GAME_CONTENT
        if bit.band( cvars.Number( "cl_chatfilters", 0 ), 64 ) ~= 0
            filter = TEXT_FILTER_CHAT

        text = util.FilterText( text, filter, ply )
    else
        result[] = colors.console
        result[] = "#jb.chat.console"

    result[] = white

    classic = Jailbreak.Classic\GetBool!
    if classic
        result[] = ": "
    else
        result[] = " #jb.chat.says: "

    for index, value in ipairs( result )
        if isstring( value )
            result[ index ] = Jailbreak.Translate( value )

    if classic
        result[] = text
    else
        result[] = "\"" .. text .. "\""

    Jailbreak.ChatText( unpack( result ) )
    return true

GM.GrabEarAnimation = ( ply ) =>
	if ply\IsPlayingTaunt!
        return

	weight = ply.ChatGestureWeight or 0

	if ply\IsTyping!
        weight = Approach( weight, 1, FrameTime! * 5 )
	else
		weight = Approach( weight, 0, FrameTime! * 5 )

	if weight > 0
		ply\AnimRestartGesture( GESTURE_SLOT_VCD, ACT_GMOD_IN_CHAT, true )
		ply\AnimSetGestureWeight( GESTURE_SLOT_VCD, weight )

    ply.ChatGestureWeight = weight

do

    patterns = {
        "right_corner_puller"
    	"left_corner_puller"

        "right_cheek_raiser"
        "left_cheek_raiser"

        "right_part"
        "left_part"

        "jaw_drop"

        "right_mouth_drop"
        "left_mouth_drop"

        "smile"
        "lower_lip"

        -- "corner_depressor"
    }

    mults = {
        right_cheek_raiser: 0.25
        left_cheek_raiser: 0.25
        -- right_mouth_drop: 0.5
        -- left_mouth_drop: 0.5
        lower_lip: 0.05
        jaw_drop: 0.5
        smile: 0.05
    }

    cache = {}

    GM.MouthMoveAnimation = ( ply ) =>
        flexes = cache[ ply\GetModel! ]
        if flexes == nil
            flexes = {}
            for flex = 0, ply\GetFlexNum!
                sourceIndex = -1
                for index, pattern in ipairs( patterns )
                    flexName = ply\GetFlexName( flex )
                    if flexName == pattern or find( flexName, pattern, 1, false ) ~= nil
                        mults[ index ] = mults[ flexName ]
                        sourceIndex = index
                        break

                if sourceIndex ~= -1
                    flexes[] = { flex, sourceIndex, ply\GetFlexBounds( flex ) }

            if #flexes == 0
                flexes = false

            cache[ ply\GetModel! ] = flexes

        voiceVolume = ply\IsSpeaking! and ply\VoiceVolume! or 0

        lastVoiceVolume = ply.LastVoiceVolume
        if lastVoiceVolume == nil
            lastVoiceVolume = voiceVolume

        if lastVoiceVolume > 0
            voiceVolume = lastVoiceVolume + ( voiceVolume - lastVoiceVolume ) / 4
            if voiceVolume < 0.01
                voiceVolume = 0

        ply.LastVoiceVolume = voiceVolume

        maxVoiceVolume = ply.MaxVoiceVolume
        if maxVoiceVolume == nil or maxVoiceVolume < voiceVolume
            maxVoiceVolume = voiceVolume
            ply.MaxVoiceVolume = maxVoiceVolume

        frac = voiceVolume / maxVoiceVolume

        if flexes
            ply\SetFlexScale( 2 )

            for data in *flexes
                flex = data[ 1 ]
                nextVolume = abs( sin( flex * ( 1 / #flexes ) + CurTime! ) ) * frac + frac
                ply\SetFlexWeight( flex, Clamp( nextVolume, data[ 3 ], data[ 4 ] ) * ( mults[ data[ 2 ] ] or 1 ) )

            return

        value = Jailbreak.FunnyMouthAnimations\GetInt!
        if value > 0
            lastFunnyAngles = ply.FunnyAngles or Angle!
            newAngle = Angle( Rand( -90, 90 ), Rand( -180, 180 ), 0 ) / 2
            angles = LerpAngle( 0.25, lastFunnyAngles, newAngle * frac )
            ply.FunnyAngles = angles

            if value > 1
                ply\ManipulateBoneAngles( 0, angles, false )
            else
                boneID = ply\LookupBone( "ValveBiped.Bip01_Head1" )
                if boneID and boneID >= 0
                    ply\ManipulateBoneAngles( boneID, angles, false )
                else
                    ply\ManipulateBoneAngles( 0, angles, false )
