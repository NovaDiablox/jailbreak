include( "shared.lua" )

do

    -- TODO: Write desc
    Flags = bit.bor( FCVAR_ARCHIVE, FCVAR_USERINFO, FCVAR_DONTRECORD )

    CreateConVar( "cl_playercolor", "0.3 0.3 0.3", Flags, "The value is a Vector - so between 0-1 - not between 0-255" )
    CreateConVar( "cl_weaponcolor", "0.30 1.80 2.10", Flags, "The value is a Vector - so between 0-1 - not between 0-255" )
    CreateConVar( "cl_playerbodygroups", "0", Flags, "The bodygroups to use, if the model has any" )
    CreateConVar( "cl_playerskin", "0", Flags, "The skin to use, if the model has any" )

hook_Run = hook.Run
pairs = pairs

GM.PostCleanupMap = =>
    RunConsoleCommand( "r_cleardecals" )

GM.InitPostEntity = =>
    chat.Open( 1 )
    @ShowTeam!

concommand.Add( "jb_showteam", ->
    GAMEMODE\ShowTeam!
)

GM.OnSpawnMenuOpen = =>
    RunConsoleCommand( "lastinv" )

GM.PostProcessPermitted = ( name ) =>
    return false

GM.PlayerButtonUp = ( ply, keyCode ) =>
    if keyCode ~= KEY_G
        return

    bind = input.LookupKeyBinding( keyCode )
    if bind and bind ~= ""
        return

    RunConsoleCommand( "drop" )

do

    TauntCamera = TauntCamera!

    GM.ShouldDrawLocalPlayer = ( ply ) =>
        return TauntCamera\ShouldDrawLocalPlayer( ply, ply\IsPlayingTaunt! )

    GM.CreateMove = ( cmd ) =>
        if drive.CreateMove( cmd )
            return true

        ply = LocalPlayer!
        if TauntCamera\CreateMove( cmd, ply, ply\IsPlayingTaunt! )
            return true

    GM.CalcView = ( ply, origin, angles, fov, znear, zfar ) =>
        view = { :origin, :angles, :fov, :znear, :zfar, drawviewer: false }

        if TauntCamera\CalcView( view, ply, ply\IsPlayingTaunt! )
            return view

        if ply\InVehicle!
            return hook_Run( "CalcVehicleView", ply\GetVehicle!, ply, view )

        if drive.CalcView( ply, view )
            return view

        weapon = ply\GetActiveWeapon!
        if IsValid( weapon )
            func = weapon.CalcView
            if func
                origin, angles, fov = func( weapon, ply, Vector( view.origin ), Angle( view.angles ), view.fov )
                view.origin, view.angles, view.fov = origin or view.origin, angles or view.angles, fov or view.fov

        return view

do

    PLAYER = FindMetaTable( "Player" )

    PLAYER_SetVoiceVolumeScale = PLAYER.SetVoiceVolumeScale
    net_ReadTable = net.ReadTable

    net.Receive( "JB::Voice Chat", ->
        for ply, volume in pairs( net_ReadTable! )
            PLAYER_SetVoiceVolumeScale( ply, volume )
    )

GM.HUDPaint = =>
    if @Arcade\GetBool!
        hook_Run( "HUDDrawTargetID" )

    hook_Run( "HUDDrawPickupHistory" )
    hook_Run( "DrawDeathNotice", 0.85, 0.04 )

    state = @GetRoundState!

    str = language.GetPhrase( "jb.round." .. state )
    if state ~= "waiting"
        remainingTime = @GetRemainingTime!
        if remainingTime == 0
            return

        str = string.format( str, remainingTime )

    draw.DrawText( string.upper( str ), "DermaLarge", ScrW! / 2, 32, color_white, TEXT_ALIGN_CENTER )

    if state == "ended"
        draw.DrawText( string.upper( language.GetPhrase( "jb.victory." .. @GetWinningTeam! ) ), "DermaLarge", ScrW! / 2, 64, color_white, TEXT_ALIGN_CENTER )

-- ---
-- --- Colors
-- ---

-- color_white = Color( 255, 255, 255 )
-- color_red = Color( 255, 0, 0)
-- color_bacground = Color( 0, 0, 0, 200 )

-- ---
-- --- Gigga Nigga Scoreboard (by PrikolMen:-b (I'm joking he's probably dead, we coudn't know exactly is he alive or not, anyway this code has not been written by PrikolMen:-b and not UknownDeveloper))
-- ---

-- PANEL_META = FindMetaTable( "Panel" )

-- do
--     PANEL = {}

--     PANEL.Init = =>
--         avatar = vgui.Create("AvatarImage", @ )
--         if IsValid(avatar)
--             @Avatar = avatar

--     PANEL.SetPlayer = ( ply ) =>
--         unless IsValid( ply ) and ply\IsPlayer!
--             return

--         @Player = ply
--         @Nick = ply\Nick!
--         @Ping = ply\Ping!
--         @Frags = ply\Frags!
--         @Deaths = ply\Deaths!
--         @Avatar\SetPlayer( ply, 32 )

--     PANEL.PerformLayout = =>
--         tall = ScreenScaleH( 16 )
--         @SetTall( tall )

--         marginBottom = ScreenScale( 3 )
--         @DockMargin( 0, 0, 0, marginBottom )

--         avatar = @Avatar
--         if IsValid( avatar )
--             wide, tall = @GetSize!
--             avatarSize = tall - ScreenScale( 2 )
--             marginLeft = ScreenScale( 6 )

--             avatar\SetPos( marginLeft, tall / 2 - avatarSize / 2 )
--             avatar\SetSize( avatarSize, avatarSize )

--     PANEL.Paint = ( w, h ) =>
--         draw.RoundedBox( 20, 0, 0, w, h, color_bacground )

--         unless IsValid( @Player )
--             return

--         avatar = @Avatar
--         unless IsValid( avatar )
--             return

--         marginLeft, marginTop = ScreenScale( 5 ), ScreenScaleH( 0.4 )
--         draw.DrawText( @Nick, "DermaLarge", marginLeft * 2 + avatar\GetWide!, marginTop, color_white, TEXT_ALIGN_LEFT )


--     vgui.Register("JB.Scoreboard.Player", PANEL)


-- ---
-- --- MAIN PANEL
-- ---

-- do

--     PANEL = {}

--     PANEL.Init = =>


--     PANEL.PerformLayout = ( w, h ) =>
--         wide, tall = ScreenScale( 300 ), ScreenScaleH( 380 )
--         @SetSize( wide, tall )
--         @Center!

--         paddingTop, paddingHorizontal = ScreenScaleH( 20 ), ScreenScale( 10 )
--         @DockPadding( paddingHorizontal, paddingTop, paddingHorizontal, 0 )

--     PANEL.DeletePlayers = =>
--         unless istable( @Players )
--             @Players = {}
--             return

--         for ply in *@Players
--             unless IsValid( ply )
--                 continue
--             ply\Remove!

--         @Players = {}

--     PANEL.CreatePlayers = =>
--         @DeletePlayers!

--         for ply in *player.GetAll!
--             unless IsValid( ply )
--                 continue

--             playerPanel = vgui.Create( "JB.Scoreboard.Player", @ )
--             unless IsValid( playerPanel )
--                 continue

--             table.insert( @Players, playerPanel )
--             playerPanel\SetPlayer( ply )
--             playerPanel\Dock( TOP )

--     PANEL.Show = =>
--         @CreatePlayers!
--         PANEL_META.Show( @ )

--     PANEL.Hide = =>
--         @DeletePlayers!
--         PANEL_META.Hide( @ )

--     PANEL.Paint = ( w, h ) =>
--         surface.SetDrawColor( color_red )
--         surface.DrawRect( 0, 0, w, h )

--         draw.DrawText( "Your mom's gamemode", "DermaLarge", w / 2, 0, color_white, TEXT_ALIGN_CENTER )

--     vgui.Register( "JB.Scoreboard", PANEL )

-- scoreboard = GM.ScoreBoard or GAMEMODE and GAMEMODE.ScoreBoard
-- if IsValid( scoreboard )
--     scoreboard\Remove!

-- GM.ScoreboardShow = =>
--     scoreboard = @ScoreBoard
--     unless IsValid( scoreboard )
--         scoreboard = vgui.Create( "JB.Scoreboard", GetHUDPanel! )
--         @ScoreBoard = scoreboard
--         -- print("Created")

--     scoreboard\Show!
--     return false

-- GM.ScoreboardHide = =>
--     scoreboard = @ScoreBoard
--     if IsValid( scoreboard )
--         scoreboard\Hide!

GM.ContextMenuEnabled = ->
    return true

GM.ContextMenuOpen = ->
    return true

do

    PANEL = {}

    AccessorFunc( PANEL, "m_bHangOpen", "HangOpen" )

    PANEL.Init = =>
        @SetWorldClicker( true )
        @m_bHangOpen = false
        @Dock( FILL )

    PANEL.Open = =>
        @SetHangOpen( false )

        if IsValid( g_SpawnMenu ) and g_SpawnMenu\IsVisible!
            g_SpawnMenu\Close( true )

        if @IsVisible!
            return

        CloseDermaMenus!

        @MakePopup!
        @SetVisible( true )
        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( true )

        RestoreCursorPosition!
        @InvalidateLayout( true )

    PANEL.Close = ( bSkipAnim ) =>
        if @GetHangOpen!
            @SetHangOpen( false )
            return

        RememberCursorPosition!
        CloseDermaMenus!

        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( false )

        @SetAlpha( 255 )
        @SetVisible( false )

    PANEL.StartKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( true )
        @SetHangOpen( true )

    PANEL.EndKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( false )

    vgui.Register( "ContextMenu", PANEL, "EditablePanel" )

    CreateContextMenu = ->
        unless hook_Run( "ContextMenuEnabled" )
            return

        contextMenu = g_ContextMenu
        if IsValid( contextMenu )
            contextMenu\Remove!

        contextMenu = vgui.Create( "ContextMenu" )
        unless IsValid( contextMenu )
            return

        global g_ContextMenu = contextMenu
        contextMenu\SetVisible( false )

        contextMenu.OnMousePressed = ( _, code ) ->
            hook_Run( "GUIMousePressed", code, gui.ScreenToVector( input.GetCursorPos! ) )

        contextMenu.OnMouseReleased = ( _, code ) ->
            hook_Run( "GUIMouseReleased", code, gui.ScreenToVector( input.GetCursorPos! ) )

        hook_Run( "ContextMenuCreated", contextMenu )

        iconLayout = contextMenu\Add( "DIconLayout" )
        iconLayout\SetBorder( 8 )
        iconLayout\SetSpaceX( 8 )
        iconLayout\SetSpaceY( 8 )
        iconLayout\SetLayoutDir( LEFT )
        iconLayout\SetWorldClicker( true )
        iconLayout\SetStretchWidth( true )
        iconLayout\SetStretchHeight( false ) -- No infinite re-layouts
        iconLayout\Dock( LEFT )

        iconLayout.OnMousePressed = ( ... ) =>
            @GetParent!\OnMousePressed( ... )

        for windowName, desktopWindow in pairs( list.Get( "DesktopWindows" ) )
            icon = iconLayout\Add( "DButton" )
            icon\SetText( "" )
            icon\SetSize( 80, 82 )
            icon.Paint = ->

            image = icon\Add( "DImage" )
            image\SetImage( desktopWindow.icon )
            image\SetSize( 64, 64 )
            image\Dock( TOP )
            image\DockMargin( 8, 0, 8, 0 )

            label = icon\Add( "DLabel" )
            label\Dock( BOTTOM )
            label\SetText( desktopWindow.title )
            label\SetContentAlignment( 5 )
            label\SetTextColor( color_white )
            label\SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )

            icon.DoClick = ->
                desktopWindow = list.Get( "DesktopWindows" )[ windowName ]
                window = icon.Window
                if desktopWindow.onewindow and IsValid( window )
                    window\Center!
                    return

                window = contextMenu\Add( "DFrame" )
                icon.Window = window

                window\SetSize( desktopWindow.width, desktopWindow.height )
                window\SetTitle( desktopWindow.title )
                window\Center!

                desktopWindow.init( icon, window )

        return contextMenu

    GM.OnContextMenuOpen = =>
        unless hook_Run( "ContextMenuOpen" )
            return

        contextMenu = g_ContextMenu
        unless IsValid( contextMenu )
            contextMenu = CreateContextMenu!

        unless contextMenu\IsVisible!
            contextMenu\Open!
        hook_Run( "ContextMenuOpened" )

    GM.OnContextMenuClose = =>
        contextMenu = g_ContextMenu
        if IsValid( contextMenu )
            contextMenu\Close!
        hook_Run( "ContextMenuClosed" )

GM.ReColorList = {
    CHudSecondaryAmmo: true
    CHudSuitPower: true
    CHudBattery: true
    CHudHealth: true
    CHudAmmo: true
}

GM.StartChat = ( isTeam ) =>
    if @Reskined
        return

    hook.Add 'Think', 'JB::CHudReskin', ->
        viewport = vgui.GetKeyboardFocus!
        unless IsValid( viewport )
            return

        hook.Remove 'Think', 'JB::CHudReskin'
        @Reskined = true
        chat.Close!

        for i = 1, 5
            panel = viewport\GetParent!
            unless IsValid( panel )
                break

            viewport = panel

        unless IsValid( viewport )
            return

        for panel in *viewport\GetChildren!
            unless @ReColorList[ panel\GetClassName! ]
                continue

            ply = LocalPlayer!
            unless IsValid( ply )
                return

            hook.Add "Think", panel, =>
                @SetFGColorEx( team.GetColor( ply\Team! )\Unpack! )
