include( "shared.lua" )
include( "ui.lua" )

:GetPhrase = language
RunConsoleCommand = RunConsoleCommand
LocalPlayer = LocalPlayer
Jailbreak = Jailbreak
list_Set = list.Set
hook_Run = hook.Run
:format = string
:AddText = chat

ROUND_WAITING_PLAYERS = ROUND_WAITING_PLAYERS
ROUND_RUNNING = ROUND_RUNNING
ROUND_ENDED = ROUND_ENDED

cvars.AddChangeCallback( "gmod_language", ( _, __, value ) ->
    hook_Run( "LanguageChanged", cvars.String( "gmod_language", "" ), value )
"Jailbreak")

Jailbreak.Translate = ( str ) ->
    return string.gsub( str, "#([%w%.-_]+)", GetPhrase )

GM.PostCleanupMap = =>
    RunConsoleCommand( "r_cleardecals" )

GM.InitPostEntity = =>
    Jailbreak.ShowTeam!
    chat.Open( 1 )

concommand.Add "jb_showteam", ->
    Jailbreak.ShowTeam!

GM.PreDrawViewModel = ( vm, ply, weapon ) =>
	unless IsValid( weapon )
        return false

    func = weapon.PreDrawViewModel
    if func
    	return func( weapon, vm, weapon, ply )
    return false

GM.PostDrawViewModel = ( vm, ply, weapon ) =>
	unless IsValid( weapon )
        return false

	if weapon.UseHands or not weapon\IsScripted!
		hands = ply\GetHands!
		if IsValid( hands ) and IsValid( hands\GetParent! )
            hands\SetColor( Color( 0, 0, 0, 100 ))
			unless hook_Run( "PreDrawPlayerHands", hands, vm, ply, weapon )
				if weapon.ViewModelFlip
                    render.CullMode( MATERIAL_CULLMODE_CW )

				hands\DrawModel!
				render.CullMode( MATERIAL_CULLMODE_CCW )

			hook_Run( "PostDrawPlayerHands", hands, vm, ply, weapon )

    func = weapon.PostDrawViewModel
	if func
	    return func( weapon, vm, weapon, ply )
    return false

GM.OnSpawnMenuOpen = =>
    RunConsoleCommand( "lastinv" )

GM.PostProcessPermitted = ( name ) =>
    return false

GM.PlayerButtonUp = ( ply, keyCode ) =>
    if keyCode ~= KEY_G
        return

    bind = input.LookupKeyBinding( keyCode )
    if bind and bind ~= ""
        return

    RunConsoleCommand( "drop" )

do

    TauntCamera = TauntCamera!

    GM.ShouldDrawLocalPlayer = ( ply ) =>
        return TauntCamera\ShouldDrawLocalPlayer( ply, ply\IsPlayingTaunt! )

    GM.CreateMove = ( cmd ) =>
        if drive.CreateMove( cmd )
            return true

        ply = LocalPlayer!
        if TauntCamera\CreateMove( cmd, ply, ply\IsPlayingTaunt! )
            return true

    GM.CalcView = ( ply, origin, angles, fov, znear, zfar ) =>
        view = { :origin, :angles, :fov, :znear, :zfar, drawviewer: false }

        if TauntCamera\CalcView( view, ply, ply\IsPlayingTaunt! )
            return view

        if ply\InVehicle!
            return hook_Run( "CalcVehicleView", ply\GetVehicle!, ply, view )

        if drive.CalcView( ply, view )
            return view

        weapon = ply\GetActiveWeapon!
        if IsValid( weapon )
            func = weapon.CalcView
            if func
                origin, angles, fov = func( weapon, ply, Vector( view.origin ), Angle( view.angles ), view.fov )
                view.origin, view.angles, view.fov = origin or view.origin, angles or view.angles, fov or view.fov

        return view

do

    :ReadString, :ReadUInt, :ReadTable = net
    :AddLegacy = notification
    unpack = unpack

    Functions = {
        [0]: ->
            mapGame = ReadString!
            SoundHandler( mapGame )
            ( GM or GAMEMODE ).MapGame = mapGame
        [1]: ->
            hook_Run( "HUDItemPickedUp", ReadString! )
        [2]: ->
            AddLegacy( format( GetPhrase( ReadString! ), unpack( ReadTable( true ) ) ), ReadUInt( 3 ), ReadUInt( 16 ) )
        [3]: ->
            data = ReadTable( true )
            for index, value in ipairs( data )
                if isstring( value )
                    data[ index ] = Jailbreak.Translate( value )

            AddText( unpack( data ) )
    }

    net.Receive( "Jailbreak::Networking", ->
        func = Functions[ ReadUInt( 2 ) ]
        if func
            func!
    )

do

    PLAYER = FindMetaTable( "Player" )
    PLAYER_SetVoiceVolumeScale = PLAYER.SetVoiceVolumeScale
    net_ReadTable = net.ReadTable

    net.Receive "JB::Voice Chat", ->
        for i = 1, net.ReadUInt( 10 )
            ply, volume = net.ReadEntity!, net.ReadFloat!
            if ply\IsValid!
                PLAYER_SetVoiceVolumeScale( ply, volume )

GM.HUDPaint = =>
    if @TargetIDDraw\GetBool!
        hook_Run( "HUDDrawTargetID" )

    hook_Run( "HUDDrawPickupHistory" )

    if @DeathNoticeDraw\GetBool!
        hook_Run( "DrawDeathNotice", 0.85, 0.04 )

    state = Jailbreak.GetRoundState!
    if state == ROUND_RUNNING
        return

    str = GetPhrase( "jb.round." .. state )
    if state ~= ROUND_WAITING_PLAYERS
        remainingTime = Jailbreak.GetRemainingTime!
        if remainingTime == 0
            return

        str = format( str, remainingTime )

    draw.DrawText( string.upper( str ), "DermaLarge", ScrW! / 2, 32, color_white, TEXT_ALIGN_CENTER )

    if state == ROUND_ENDED
        draw.DrawText( string.upper( GetPhrase( "jb.victory." .. Jailbreak.GetWinningTeam! ) ), "DermaLarge", ScrW! / 2, 64, color_white, TEXT_ALIGN_CENTER )

-- ---
-- --- Colors
-- ---

-- color_white = Color( 255, 255, 255 )
-- color_red = Color( 255, 0, 0)
-- color_bacground = Color( 0, 0, 0, 200 )

-- ---
-- --- Gigga Nigga Scoreboard (by PrikolMen:-b (I'm joking he's probably dead, we coudn't know exactly is he alive or not, anyway this code has not been written by PrikolMen:-b and not UknownDeveloper))
-- ---

-- PANEL_META = FindMetaTable( "Panel" )

-- do
--     PANEL = {}

--     PANEL.Init = =>
--         avatar = vgui.Create("AvatarImage", @ )
--         if IsValid(avatar)
--             @Avatar = avatar

--     PANEL.SetPlayer = ( ply ) =>
--         unless IsValid( ply ) and ply\IsPlayer!
--             return

--         @Player = ply
--         @Nick = ply\Nick!
--         @Ping = ply\Ping!
--         @Frags = ply\Frags!
--         @Deaths = ply\Deaths!
--         @Avatar\SetPlayer( ply, 32 )

--     PANEL.PerformLayout = =>
--         tall = ScreenScaleH( 16 )
--         @SetTall( tall )

--         marginBottom = ScreenScale( 3 )
--         @DockMargin( 0, 0, 0, marginBottom )

--         avatar = @Avatar
--         if IsValid( avatar )
--             wide, tall = @GetSize!
--             avatarSize = tall - ScreenScale( 2 )
--             marginLeft = ScreenScale( 6 )

--             avatar\SetPos( marginLeft, tall / 2 - avatarSize / 2 )
--             avatar\SetSize( avatarSize, avatarSize )

--     PANEL.Paint = ( w, h ) =>
--         draw.RoundedBox( 20, 0, 0, w, h, color_bacground )

--         unless IsValid( @Player )
--             return

--         avatar = @Avatar
--         unless IsValid( avatar )
--             return

--         marginLeft, marginTop = ScreenScale( 5 ), ScreenScaleH( 0.4 )
--         draw.DrawText( @Nick, "DermaLarge", marginLeft * 2 + avatar\GetWide!, marginTop, color_white, TEXT_ALIGN_LEFT )


--     vgui.Register("JB.Scoreboard.Player", PANEL)


-- ---
-- --- MAIN PANEL
-- ---

-- do

--     PANEL = {}

--     PANEL.Init = =>


--     PANEL.PerformLayout = ( w, h ) =>
--         wide, tall = ScreenScale( 300 ), ScreenScaleH( 380 )
--         @SetSize( wide, tall )
--         @Center!

--         paddingTop, paddingHorizontal = ScreenScaleH( 20 ), ScreenScale( 10 )
--         @DockPadding( paddingHorizontal, paddingTop, paddingHorizontal, 0 )

--     PANEL.DeletePlayers = =>
--         unless istable( @Players )
--             @Players = {}
--             return

--         for ply in *@Players
--             unless IsValid( ply )
--                 continue
--             ply\Remove!

--         @Players = {}

--     PANEL.CreatePlayers = =>
--         @DeletePlayers!

--         for ply in *player.GetAll!
--             unless IsValid( ply )
--                 continue

--             playerPanel = vgui.Create( "JB.Scoreboard.Player", @ )
--             unless IsValid( playerPanel )
--                 continue

--             table.insert( @Players, playerPanel )
--             playerPanel\SetPlayer( ply )
--             playerPanel\Dock( TOP )

--     PANEL.Show = =>
--         @CreatePlayers!
--         PANEL_META.Show( @ )

--     PANEL.Hide = =>
--         @DeletePlayers!
--         PANEL_META.Hide( @ )

--     PANEL.Paint = ( w, h ) =>
--         surface.SetDrawColor( color_red )
--         surface.DrawRect( 0, 0, w, h )

--         draw.DrawText( "Your mom's gamemode", "DermaLarge", w / 2, 0, color_white, TEXT_ALIGN_CENTER )

--     vgui.Register( "JB.Scoreboard", PANEL )

-- scoreboard = GM.ScoreBoard or GAMEMODE and GAMEMODE.ScoreBoard
-- if IsValid( scoreboard )
--     scoreboard\Remove!

-- GM.ScoreboardShow = =>
--     scoreboard = @ScoreBoard
--     unless IsValid( scoreboard )
--         scoreboard = vgui.Create( "JB.Scoreboard", GetHUDPanel! )
--         @ScoreBoard = scoreboard
--         -- print("Created")

--     scoreboard\Show!
--     return false

-- GM.ScoreboardHide = =>
--     scoreboard = @ScoreBoard
--     if IsValid( scoreboard )
--         scoreboard\Hide!

GM.ContextMenuEnabled = ->
    return true

GM.ContextMenuOpen = ->
    return true

do

    SecurityRadio = CreateConVar( "jb_security_radio", "0", FCVAR_USERINFO, "Responsible for turning the radio on or off.", 0, 1 )

    list_Set "DesktopWindows", "!2security-radio", {
        title: "#jb.walkie-talkie"
        icon: "icon16/phone.png"
        think: =>
            if LocalPlayer!\HasSecurityRadio!
                state = SecurityRadio\GetBool!

                image = state and "icon16/phone_sound.png" or "icon16/phone.png"
                if @Image\GetImage! ~= image
                    @Image\SetImage( image )

                if @IsVisible!
                    return
                @Show!
            elseif @IsVisible!
                @Hide!

            @GetParent!\Layout!

        click: =>
            SecurityRadio\SetBool( not SecurityRadio\GetBool! )
    }

do

    Megaphone = CreateConVar( "jb_megaphone", "0", FCVAR_USERINFO, "Activates the warden's ability to speak for the entire map.", 0, 1 )

    list_Set "DesktopWindows", "!2megaphone", {
        title: "#jb.megaphone"
        icon: "icon16/sound_mute.png"
        think: =>
            if LocalPlayer!\IsWarden!
                state = Megaphone\GetBool!

                image = state and "icon16/sound.png" or "icon16/sound_mute.png"
                if @Image\GetImage! ~= image
                    @Image\SetImage( image )

                if @IsVisible!
                    return

                @Show!

            if @IsVisible!
                @Hide!

            @GetParent!\Layout!

        click: =>
            Megaphone\SetBool( not Megaphone\GetBool! )
    }

list_Set "DesktopWindows", "!4warden-request", {
    title: "#jb.warden.shift"
    icon: "icon16/user_suit.png"
    think: =>
        if Jailbreak.IsRoundRunning!
            ply = LocalPlayer!
            if ply\Alive!
                if Jailbreak.HasWarden!
                    if ply\IsWarden!
                        image = "icon16/user.png"
                        if @Image\GetImage! ~= image
                            @Image\SetImage( image )

                        unless @IsVisible!
                            @Show!
                            @GetParent!\Layout!

                        return
                elseif ply\IsGuard!
                    image = "icon16/user_suit.png"
                    if @Image\GetImage! ~= image
                        @Image\SetImage( image )

                    unless @IsVisible!
                        @Show!
                        @GetParent!\Layout!
                    return

        if @IsVisible!
            @Hide!
            @GetParent!\Layout!

    click: =>
        RunConsoleCommand( "jb_warden" )
}

list_Set "DesktopWindows", "!3shock-collars", {
    title: "#jb.shock-collars"
    icon: "icon16/lightning.png"
    think: =>
        if Jailbreak.GameInProgress!
            ply = LocalPlayer!
            if ply\IsWarden! and ply\Alive!
                state = Jailbreak.IsShockCollarsActive!

                image = state and "icon16/accept.png" or "icon16/cancel.png"
                if @GetImage! ~= image
                    @SetImage( image )

                unless @IsVisible!
                    @Show!
                    @GetParent!\Layout!
                return

        if @IsVisible!
            @Hide!
            @GetParent!\Layout!

    click: =>
        RunConsoleCommand( "jb_shock_collars" )
}

do

    color_white = color_white
    blue = Color( 30, 130, 255 )
    dead = Color( 185, 185, 185 )

    GM.OnPlayerChat = ( ply, text, isTeam, isDead ) =>
        result = {}

        if isDead
            result[] = dead
            result[] = "[#jb.chat.dead] "

        -- if isTeam
        --     teamID = ply\Team!
        --     result[] = team.GetColor( teamID )
        --     result[] = "[" .. team.GetName( teamID ) .. "] "

        if IsValid( ply )
            result[] = ply\GetPlayerColor!\ToColor!
            result[] = ply\Nick!

            filter = TEXT_FILTER_GAME_CONTENT
            if bit.band( cvars.Number( "cl_chatfilters", 0 ), 64 ) ~= 0
                filter = TEXT_FILTER_CHAT

            text = util.FilterText( text, filter, ply )
        else
            result[] = blue
            result[] = "#jb.chat.console"

        result[] = color_white

        classic = Jailbreak.Classic\GetBool!
        if classic
            result[] = ": "
        else
            result[] = " #jb.chat.says: "

        for index, value in ipairs( result )
            if isstring( value )
                result[ index ] = Jailbreak.Translate( value )

        if classic
            result[] = text
        else
            result[] = "\"" .. text .. "\""

        AddText( unpack( result ) )
        return true