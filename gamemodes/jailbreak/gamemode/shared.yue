GM.Name = "Jailbreak"
GM.Author = "Unknown Developer"
GM.TeamBased = true

global Jailbreak = Jailbreak or {}
global TEAM_GUARD = 1
global TEAM_PRISONER = 2

global ROUND_WAITING_PLAYERS = 0
global ROUND_PREPARING = 1
global ROUND_RUNNING = 2
global ROUND_ENDED = 3

macro lua = ( code ) -> {
    :code
    type: "lua"
}

$lua[==[
local Jailbreak = Jailbreak
local TEAM_GUARD = TEAM_GUARD
local TEAM_PRISONER = TEAM_PRISONER

local ROUND_WAITING_PLAYERS = ROUND_WAITING_PLAYERS
local ROUND_PREPARING = ROUND_PREPARING
local ROUND_RUNNING = ROUND_RUNNING
local ROUND_ENDED = ROUND_ENDED
]==]

Jailbreak.Teams = {
    [TEAM_GUARD]: true
    [TEAM_PRISONER]: true
}

do

    -- TODO: Write desc
    ConVarFlags = bit.bor( FCVAR_ARCHIVE, FCVAR_NOTIFY, FCVAR_REPLICATED, FCVAR_DONTRECORD )
    CreateConVar = CreateConVar

    Jailbreak.CustomPlayerModels = CreateConVar( "jb_custom_player_models", "0", ConVarFlags, "", 0, 1 )
    GM.Classic = CreateConVar( "jb_classic", "0", ConVarFlags, "", 0, 1 )

    do

        timer_Simple = timer.Simple
        hook_Run = hook.Run
        tonumber = tonumber
        isnumber = isnumber
        CLIENT = CLIENT

        HitGroups = {
            [HITGROUP_GENERIC]: 1
            [HITGROUP_HEAD]: 2
            [HITGROUP_CHEST]: 1
            [HITGROUP_STOMACH]: 1
            [HITGROUP_LEFTARM]: 0.25
            [HITGROUP_RIGHTARM]: 0.25
            [HITGROUP_LEFTLEG]: 0.25
            [HITGROUP_RIGHTLEG]: 0.25
            [HITGROUP_GEAR]: 0.25
        }

        for index, default in pairs( HitGroups )
            conVarName = "jb_hitgroup" .. index .. "_scale"
            HitGroups[ index ] = CreateConVar( conVarName, tostring( default ), ConVarFlags, "https://wiki.facepunch.com/gmod/Enums/HITGROUP", 0, 1000 )\GetFloat!
            cvars.AddChangeCallback( conVarName, ( _, __, str ) ->
                HitGroups[ index ] = tonumber( str ) or 0
            "Jailbreak" )

        GM.ScalePlayerDamage = ( ply, hitGroup, damageInfo ) =>
            damageScale = HitGroups[ hitGroup ]
            if isnumber( damageScale )
                damageInfo\ScaleDamage( damageScale )

            if CLIENT and hook_Run( "CanPlayerTakeDamage", ply, damageInfo, ply\Team! ) == false
                timer_Simple 0, ->
                    if ply\IsValid!
                        ply\RemoveAllDecals!
                return true

do

    :gsub, :lower = string

    Jailbreak.FixModelPath = ( modelPath ) ->
        return gsub( lower( modelPath ), "[\\/]+", "/" )

GM.GuardModels = {
    "models/player/gasmask.mdl"
    "models/player/riot.mdl"
    "models/player/swat.mdl"
    "models/player/urban.mdl"
}

GM.CreateTeams = =>
    team.SetUp( TEAM_PRISONER, "#jb.prisoners", Color( 255, 89, 50 ), true )
    team.SetSpawnPoint( TEAM_PRISONER, {
        "info_player_terrorist"
        "info_player_teamspawn"
        "diprip_start_team_red"
        "info_player_human"
        "info_player_rebel"
        "info_player_axis"
        "info_player_red"
    } )

    team.SetUp( TEAM_GUARD, "#jb.guards", Color( 50, 185, 255 ), true )
    team.SetSpawnPoint( TEAM_GUARD, {
        "info_player_counterterrorist"
        "diprip_start_team_blue"
        "info_player_deathmatch"
        "info_player_teamspawn"
        "info_player_combine"
        "info_player_allies"
        "gmod_player_start"
        "info_player_human"
        "info_player_blue"
    } )

    team.SetUp( TEAM_SPECTATOR, "#jb.spectators", Color( 50, 50, 50 ), true )

do

    ENTITY = FindMetaTable( "Entity" )

    ENTITY.IsPlayerRagdoll = =>
        return @GetNW2Bool( "is-player-ragdoll" )

    ENTITY.GetRagdollOwner = =>
        return @GetNW2Entity( "ragdoll-owner" )

    do

        defaultColor = Vector( 0.25, 0.35, 0.4 )

        ENTITY.GetPlayerColor = =>
            return @GetNW2Var( "player-color", defaultColor )

    ENTITY.SetPlayerColor = ( vector ) =>
        @SetNW2Var( "player-color", vector )

    ENTITY.GetCreator = =>
        return @GetNW2Entity( "entity-owner" )

    Jailbreak.HasWarden = ->
        warden = Jailbreak.GetWarden!
        return warden and warden\IsValid! and warden\IsInGame!

do

    PLAYER = FindMetaTable( "Player" )

    PLAYER.GetRagdollEntity = =>
        return @GetNW2Entity( "player-ragdoll" )

    PLAYER.IsInGame = =>
        return Jailbreak.Teams[ @Team! ] and @Alive!

    PLAYER.IsGuard = =>
        return @Team! == TEAM_GUARD

    PLAYER.IsWarden = =>
        return @GetNW2Bool( "is-warden" )

    PLAYER.IsPrisoner = =>
        return @Team! == TEAM_PRISONER

    PLAYER.IsMutedByWarden = =>
        return @GetNW2Bool( "warden-mute" )

    PLAYER.HasElectroCollar = =>
        return @GetNW2Bool( "electro-collar" )

    PLAYER.HasSecurityAccess = =>
        return @GetNW2Bool( "security-access" )

    PLAYER.HasSecurityRadio = =>
        return @GetNW2Bool( "security-radio" )

    PLAYER.IsFullyConnected = =>
        return @GetNW2Bool( "fully-connected" )

do

    util_PrecacheModel = util.PrecacheModel
    util_IsValidModel = util.IsValidModel

    guardModels = {}
    for modelPath in *GM.GuardModels
        modelPath = Jailbreak.FixModelPath( modelPath )
        util_PrecacheModel( modelPath )
        guardModels[] = modelPath

    femaleModels = {}
    for i = 1, 6
        modelPath = Jailbreak.FixModelPath( "models/player/group01/female_0" .. i .. ".mdl" )
        util_PrecacheModel( modelPath )
        femaleModels[] = modelPath

    maleModels = {}
    for i = 1, 9
        modelPath = Jailbreak.FixModelPath( "models/player/group01/male_0" .. i .. ".mdl" )
        util_PrecacheModel( modelPath )
        maleModels[] = modelPath

    for i = 2, 8, 2
        modelPath = Jailbreak.FixModelPath( "models/player/group02/male_0" .. i .. ".mdl" )
        util_PrecacheModel( modelPath )
        maleModels[] = modelPath

    Jailbreak.PlayerModels = {
        [ TEAM_GUARD ]: guardModels
        [ TEAM_PRISONER ]: {
            [ true ]: femaleModels
            [ false ]: maleModels
        }
    }

    Weapons = {
        Classes: {
            weapon_knife: {
                "arc9_go_knife_bayonet"
                "arc9_fas_dv2"
                "arccw_melee_knife"
                "weapon_crowbar"
            }

            weapon_ak47: {
                "swb_css_ak47"
                "arc9_go_ak47"
                "arc9_fas_ak47"
                "arccw_ur_ak"
                "arccw_ak47"
                "m9k_ak74"
                "weapon_ar2"
            }

            weapon_aug: {
                "swb_css_aug"
                "arc9_go_aug"
                "arc9_fas_m16a2"
                "arccw_ud_mini14"
                "arccw_augpara"
                "9k_auga3"
                "weapon_ar2"
            }

            weapon_awp: {
                "swb_css_awp"
                "arc9_go_awp"
                "arc9_fas_m24"
                "arccw_ur_aw"
                "arccw_awm"
                "m9k_m98b"
                "weapon_crossbow"
            }

            weapon_deagle: {
                "swb_css_deagle"
                "arc9_go_deagle"
                "arc9_fas_deagle"
                "arccw_ur_deagle"
                "arccw_deagle357"
                "m9k_deagle"
                "weapon_357"
            }

            weapon_elite: {
                "swb_css_fiveseven"
                "arc9_go_elite"
                "arc9_fas_m93r"
                "arccw_ud_glock"
                "arccw_makarov"
                "m9k_hk45"
                "weapon_pistol"
            }

            weapon_famas: {
                "swb_css_famas"
                "arc9_go_famas"
                "arc9_fas_famas"
                "arccw_ur_db"
                "arccw_famas"
                "m9k_famas"
                "weapon_ar2"
            }

            weapon_fiveseven: {
                "swb_css_fiveseven"
                "arc9_go_fiveseven"
                "arc9_fas_grach"
                "arccw_ur_m1911"
                "arccw_fiveseven"
                "m9k_m92beretta"
                "weapon_pistol"
            }

            weapon_g3sg1: {
                "swb_css_g3sg1"
                "arc9_go_g1sg3"
                "arc9_fas_svd"
                "arccw_ur_g3"
                "arccw_g3a3"
                "m9k_dragunov"
                "weapon_crossbow"
            }

            weapon_galil: {
                "swb_css_galil"
                "arc9_go_galilar"
                "arc9_fas_ak74"
                "arccw_ur_spas12"
                "arccw_galil556"
                "m9k_winchester73"
                "weapon_ar2"
            }

            weapon_glock: {
                "swb_css_glock"
                "arc9_go_glock"
                "arc9_fas_g20"
                "arccw_ud_glock"
                "arccw_g18"
                "m9k_glock"
                "weapon_pistol"
            }

            weapon_m249: {
                "swb_css_m249"
                "arc9_go_negev"
                "arc9_fas_rpk"
                "arccw_ud_m16"
                "arccw_minimi"
                "m9k_pkm"
                "weapon_ar2"
            }

            weapon_m3: {
                "swb_css_m3super"
                "arc9_go_nova"
                "arc9_fas_m3super90"
                "arccw_ud_870"
                "arccw_shorty"
                "m9k_ithacam37"
                "weapon_shotgun"
            }

            weapon_m4a1: {
                "swb_css_m4a1"
                "arc9_go_m4a1"
                "arc9_fas_m4a1"
                "arccw_ud_m16"
                "arccw_m4a1"
                "m9k_m4a1"
                "weapon_ar2"
            }

            weapon_mac10: {
                "swb_css_mac10"
                "arc9_go_mac10"
                "arc9_fas_mac11"
                "arccw_ud_uzi"
                "arccw_mac11"
                "m9k_uzi"
                "weapon_smg1"
            }

            weapon_mp5navy: {
                "swb_css_mp5"
                "arc9_go_mp5sd"
                "arc9_fas_mp5"
                "arccw_ur_mp5"
                "arccw_mp5"
                "m9k_mp5"
                "weapon_smg1"
            }

            weapon_p228: {
                "swb_css_p228"
                "arc9_go_p250"
                "arc9_fas_p226"
                "arccw_ur_m1911"
                "arccw_p228"
                "m9k_hk45"
                "weapon_pistol"
            }

            weapon_p90: {
                "swb_css_p90"
                "arc9_go_p90"
                "arc9_fas_bizon"
                "arccw_ur_mp5"
                "arccw_p90"
                "m9k_bizonp19"
                "weapon_smg1"
            }

            weapon_scout: {
                "swb_css_scout"
                "arc9_go_ssg08"
                "arc9_fas_sks"
                "arccw_ud_mini14"
                "arccw_scout"
                "m9k_m24"
                "weapon_crossbow"
            }

            weapon_sg550: {
                "swb_css_sg550"
                "arc9_go_scar20"
                "arc9_fas_sr25"
                "arccw_ur_g3"
                "arccw_sg550"
                "m9k_sl8"
                "weapon_crossbow"
            }

            weapon_sg552: {
                "swb_css_sg552"
                "arc9_go_sg556"
                "arc9_fas_sg550"
                "arccw_ud_mini14"
                "arccw_sg552"
                "m9k_m16a4_acog"
                "weapon_ar2"
            }

            weapon_tmp: {
                "swb_css_tmp"
                "arc9_go_mp9"
                "arc9_fas_uzi"
                "arccw_ud_uzi"
                "arccw_tmp"
                "m9k_mp9"
                "weapon_smg1"
            }

            weapon_ump45: {
                "swb_css_ump"
                "arc9_go_ump"
                "arc9_fas_colt"
                "arccw_ur_mp5"
                "arccw_ump45"
                "m9k_ump45"
                "weapon_smg1"
            }

            weapon_usp: {
                "swb_css_usp"
                "arc9_go_usp"
                "arc9_fas_m1911"
                "arccw_ur_329"
                "arccw_usp"
                "m9k_usp"
                "weapon_pistol"
            }

            weapon_xm1014: {
                "swb_css_usp"
                "arc9_go_xm1014"
                "arc9_fas_saiga"
                "arccw_ud_m1014"
                "arccw_m1014"
                "m9k_spas12"
                "weapon_shotgun"
            }

            weapon_hegrenade: {
                "arc9_go_nade_frag"
                "arc9_fas_m67"
                "arccw_ud_m79"
                "arccw_nade_frag"
                "weapon_frag"
            }

            weapon_smokegrenade: {
                "arc9_go_nade_smoke"
                "arc9_fas_m18"
                "arccw_nade_smoke"
                "weapon_crowbar"
            }

            weapon_flashbang: {
                "arc9_go_nade_flashbang"
                "arc9_fas_m84"
                "arccw_nade_flash"
                "weapon_crowbar"
            }

            weapon_c4: {
                "arc9_go_nade_c4"
                "m9k_suicide_bomb"
                "weapon_slam"
            }
        }

        Offsets: {
            arccw_ur_deagle: { Vector( -10, 0, 8 ), Angle( 0, 0, 0 ) }
            arccw_ur_m1911: { Vector( -10, 0, 6 ), Angle( 0, 0, 0 ) }
            weapon_crowbar: { Vector( 0, 0, 10 ), Angle( 90, 0, 0 ) }
            arccw_ur_mp5: { Vector( 0, 0, 0 ), Angle( 0, 0, 180 ) }
            arccw_ud_m79: { Vector( 0, 0, 0 ), Angle( -90, 0, 0 ) }
            arccw_ud_m16: { Vector( 0, 0, 10 ), Angle( 30, 0, 0 ) }
            arccw_ur_ak: { Vector( -5, 0, 8 ), Angle( 30, 0, 0 ) }
        }
    }

    if SERVER
        file.CreateDir( "jailbreak" )
        fileName = "jailbreak/weapon-handler.json"
        if file.Exists( fileName, "DATA" )
            json = file.Read( fileName, "DATA" )
            if isstring( json )
                data = util.JSONToTable( json )
                if istable( data )
                    table.Empty( Weapons )
                    for key, value in pairs( data )
                        Weapons[ key ] = value

        else
            file.Write( fileName, util.TableToJSON( Weapons, true ) )

    AvaliableWeapons = {}
    GM.AvaliableWeapons = AvaliableWeapons
    WeaponHandler = WeaponHandler

    GM.PreGamemodeLoaded = =>
        for className, alternatives in pairs( Weapons.Classes )
            AvaliableWeapons[] = className

            alternative = WeaponHandler( className, alternatives, Weapons.Offsets ).Alternative
            unless alternative
                continue

            weapon = weapons.GetStored( alternative )
            unless weapon
                continue

            weapon.DrawWeaponInfoBox = false

            viewModel = weapon.ViewModel
            if viewModel and #viewModel ~= 0 and util_IsValidModel( viewModel )
                util_PrecacheModel( viewModel )

            worldModel = weapon.WorldModel
            if worldModel and #worldModel ~= 0 and util_IsValidModel( worldModel )
                util_PrecacheModel( worldModel )

SERVER = SERVER

GM.FinishMove = ( ply, mv ) =>
    unless ply\Alive!
        return

    if SERVER
        ply.LastMoveVelocity = mv\GetVelocity!

    if ply\IsPlayingTaunt!
        mv\SetForwardSpeed( 0 )
        mv\SetSideSpeed( 0 )

GM.ShouldCollide = ( entity, ply ) =>
    unless ply\IsPlayer! and ply\Alive!
        return

    if entity\GetClass! == "func_respawnroomvisualizer"
        return ply\Team! ~= entity\GetTeam!

do

    GetRoundState = ->
        return GetGlobal2Int( "round-state" )
    Jailbreak.GetRoundState = GetRoundState

    Jailbreak.IsWaitingPlayers = =>
        return GetRoundState! == ROUND_WAITING_PLAYERS

    Jailbreak.IsRoundPreparing = =>
        return GetRoundState! == ROUND_PREPARING

    Jailbreak.IsRoundRunning = =>
        return GetRoundState! == ROUND_RUNNING

    Jailbreak.IsRoundEnded = =>
        return GetRoundState! == ROUND_ENDED

    Jailbreak.GameInProgress = =>
        state = GetRoundState!
        return state ~= ROUND_WAITING_PLAYERS and state ~= ROUND_PREPARING

    GetRoundTime = ->
        return GetGlobal2Int( "next-round-state" )
    Jailbreak.GetRoundTime = GetRoundTime

    Jailbreak.GetRemainingTime = =>
        return math.max( 0, GetRoundTime! - CurTime! )

    Jailbreak.GetWinningTeam = ->
        return GetGlobal2Int( "winning-team" )

    Jailbreak.IsElectroCollarsActive = ->
        return GetGlobal2Bool( "electro-collars" )

    Jailbreak.GetWardenCoins = ->
        return GetGlobal2Int( "warden-coins" )

    do

        team_GetPlayers = team.GetPlayers
        NULL = NULL

        Jailbreak.GetWarden = ->
            warden = Jailbreak.Warden
            if IsValid( warden ) and warden\IsWarden! and warden\Alive! and warden\IsGuard!
                return warden

            for ply in *team_GetPlayers( TEAM_GUARD )
                if ply\IsWarden!
                    Jailbreak.Warden = ply
                    return ply
            return NULL

    Jailbreak.IsFemalePrison = ->
        return GetGlobal2Bool( "female-prison" )

do

    singleHandHoldTypes = {
        grenade: true
        normal: true
        melee: true
        knife: true
        fist: true
        slam: true
    }

    hook.Add "CalcMainActivity", "Jailbreak::Additional Animations", ( velocity ) =>
        unless @IsOnGround!
            return

        if velocity\Length! >= @GetRunSpeed! * 0.95
            weapon = @GetActiveWeapon!
            if IsValid( weapon ) and not singleHandHoldTypes[ weapon\GetHoldType! ]
                return

            return ACT_HL2MP_RUN_FAST, -1
        elseif @Crouching! and velocity\Length2DSqr! < 1
            weapon = @GetActiveWeapon!
            if IsValid( weapon ) and weapon\GetHoldType! ~= "normal"
                return

            return ACT_MP_JUMP, @LookupSequence( "pose_ducking_01" )

GM.CanPlayerTakeDamage = ( ply, damageInfo, teamID ) =>
    if Jailbreak.IsRoundPreparing!
        return false

    attacker = damageInfo\GetAttacker!
    unless attacker\IsValid! and attacker\IsPlayer!
        return true

    if attacker == ply
        return true

    if teamID == TEAM_GUARD and teamID == attacker\Team!
        return false

    return true

do

    sounds = {}
    for number = 1, 6 do
        sounds[ number ] = "ambient/energy/spark" .. number .. ".wav"

    sound.Add {
        name: "Jailbreak.Shock"
        channel: CHAN_WEAPON
        level: SNDLVL_70dB
        sound: sounds
        pitch: 100
        volume: 1
    }
