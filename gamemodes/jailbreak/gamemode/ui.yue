RunConsoleCommand = RunConsoleCommand
:format, :upper, :Explode = string
:abs, :min, :max, :sin = math
LocalPlayer = LocalPlayer
:GetPhrase = language
Jailbreak = Jailbreak
list_Set = list.Set
hook_Add = hook.Add
hook_Run = hook.Run
IsValid = IsValid
surface = surface
pairs = pairs

TEAM_SPECTATOR = TEAM_SPECTATOR
ROUND_RUNNING = ROUND_RUNNING

TEAM_PRISONER = TEAM_PRISONER
TEAM_GUARD = TEAM_GUARD

AsparagusColor = Color( 128, 154, 86 )
BackgroundColor = Color( 33, 33, 33 )
WhiteColor = color_white

PANEL_META = FindMetaTable( "Panel" )

do

    PANEL = {}

    AccessorFunc( PANEL, "m_bHangOpen", "HangOpen" )

    PANEL.Init = =>
        @m_bHangOpen = false
        @Dock( FILL )

    PANEL.Open = =>
        @SetHangOpen( false )

        if IsValid( g_SpawnMenu ) and g_SpawnMenu\IsVisible!
            g_SpawnMenu\Close( true )

        if @IsVisible!
            return

        CloseDermaMenus!

        @MakePopup!
        @SetVisible( true )
        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( true )

        RestoreCursorPosition!
        @InvalidateLayout( true )

    PANEL.Close = ( bSkipAnim ) =>
        if @GetHangOpen!
            @SetHangOpen( false )
            return

        RememberCursorPosition!
        CloseDermaMenus!

        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( false )

        @SetAlpha( 255 )
        @SetVisible( false )

    PANEL.StartKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( true )
        @SetHangOpen( true )

    PANEL.EndKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( false )

    PANEL.Paint = ( width, height ) =>
        if Jailbreak.GetRoundState! ~= ROUND_RUNNING
            return

        remainingTime = Jailbreak.GetRemainingTime!
        if remainingTime == 0
            return

        draw.DrawText( upper( format( GetPhrase( "jb.round.2" ), remainingTime ) ), "DermaLarge", width / 2, 32, WhiteColor, TEXT_ALIGN_CENTER )

    vgui.Register( "ContextMenu", PANEL, "EditablePanel" )

    do

        PANEL = {}

        PANEL.Init = =>
            @SetText( "" )

        PANEL.GetImage = =>
            image = @m_Image
            if image and image\IsValid!
                return image\GetImage!

            return ""

        PANEL.SetImage = ( imagePath ) =>
            image = @m_Image

            unless imagePath
                if IsValid( image )
                    image\Remove!

                return

            unless IsValid( image )
                image = @Add "DImage"
                @m_Image = image

            image\SetMouseInputEnabled( false )
            image\SetImage( imagePath )
            image\SizeToContents!
            @InvalidateLayout!

        PANEL.PerformLayout = ( width, height ) =>

            image = @m_Image
            if IsValid( image )

                imageWidth, imageHeight = image\GetSize!

                targetSize = math.min( width - 4, height - 4 )
                zoom = math.min( targetSize / imageWidth, targetSize / imageHeight, 1 )
                newSizeX = math.ceil( imageWidth * zoom )
                newSizeY = math.ceil( imageHeight * zoom )

                image\SetWide( newSizeX )
                image\SetTall( newSizeY )

                x, y = width - imageWidth, height - imageHeight

                for panel in *@GetChildren!
                    if panel\IsVisible! and panel\GetDock! == BOTTOM
                        y -= panel\GetTall!

                image\SetPos( 0, y )
                @SetTextInset( imageWidth + 16, 0 )

            DLabel.PerformLayout( @, width, height )

        PANEL.Paint = ( width, height ) =>

        vgui.Register( "JB.ContextMenu.Button", PANEL, "DButton" )

    CreateContextMenu = ->
        unless hook_Run( "ContextMenuEnabled" )
            return

        contextMenu = g_ContextMenu
        if IsValid( contextMenu )
            contextMenu\Remove!

        contextMenu = vgui.Create( "ContextMenu" )
        unless IsValid( contextMenu )
            return

        global g_ContextMenu = contextMenu
        contextMenu\SetVisible( false )

        hook_Add "LanguageChanged", contextMenu, =>
            hook.Remove "LanguageChanged", @
            @Remove!

        contextMenu.OnMousePressed = ( _, code ) ->
            hook_Run( "GUIMousePressed", code, gui.ScreenToVector( input.GetCursorPos! ) )

        contextMenu.OnMouseReleased = ( _, code ) ->
            hook_Run( "GUIMouseReleased", code, gui.ScreenToVector( input.GetCursorPos! ) )

        hook_Run( "ContextMenuCreated", contextMenu )

        iconLayout = contextMenu\Add( "DIconLayout" )
        iconLayout\SetBorder( 8 )
        iconLayout\SetSpaceX( 8 )
        iconLayout\SetSpaceY( 8 )
        iconLayout\SetLayoutDir( LEFT )
        iconLayout\SetStretchWidth( true )
        iconLayout\SetStretchHeight( false ) -- No infinite re-layouts
        iconLayout\Dock( LEFT )

        iconLayout.OnMousePressed = ( ... ) =>
            @GetParent!\OnMousePressed( ... )

        for windowName, desktopWindow in SortedPairs( list.Get( "DesktopWindows" ) )
            icon = iconLayout\Add( "JB.ContextMenu.Button" )
            icon\SetSize( 80, 82 )

            title = desktopWindow.title
            icon\SetTooltip( title )

            image = icon\Add( "DImage" )
            icon.Image = image

            image\SetImage( desktopWindow.icon )
            image\SetSize( 64, 64 )
            image\Dock( TOP )
            image\DockMargin( 8, 0, 8, 0 )

            label = icon\Add( "DLabel" )
            icon.Label = label

            label\Dock( BOTTOM )
            label\SetText( title )
            label\SetContentAlignment( 5 )
            label\SetTextColor( WhiteColor )
            label\SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )

            created = desktopWindow.created
            if isfunction( created )
                created( icon )

            think = desktopWindow.think
            if isfunction( think )
                hook_Add "Think", icon, think

            click = desktopWindow.click
            if isfunction( click )
                icon.DoClick = click

            init = desktopWindow.init
            if isfunction( init )
                icon.DoClick = ->
                    window = icon.Window
                    if desktopwindow.onewindow and IsValid( window )
                        window\Center!
                        return

                    window = g_ContextMenu\Add( "DFrame" )
                    icon.Window = window

                    window\SetSize( desktopwindow.width, desktopwindow.height )
                    window\SetTitle( desktopwindow.title )
                    window\Center!

                    init( icon, window )

        return contextMenu

    GM.OnContextMenuOpen = =>
        unless hook_Run( "ContextMenuOpen" )
            return

        contextMenu = g_ContextMenu
        unless IsValid( contextMenu )
            contextMenu = CreateContextMenu!

        unless contextMenu\IsVisible!
            contextMenu\Open!
        hook_Run( "ContextMenuOpened" )

    GM.OnContextMenuClose = =>
        contextMenu = g_ContextMenu
        if IsValid( contextMenu )
            if cvars.Number( "developer", 0 ) > 2
                contextMenu\Remove!
            else
                contextMenu\Close!
        hook_Run( "ContextMenuClosed" )

Jailbreak.ShowTeam = ->
    panel = g_TeamSelect
	if IsValid( panel )
        panel\Remove!
        return

    global g_TeamSelect = vgui.Create( "JB.TeamSelect" )

-- Button
do

    PANEL = {}

    PANEL.Init = =>
        @SetTextColor( WhiteColor )
        @SetFont( "DermaLarge" )
        @Player = LocalPlayer!

    PANEL.OnCursorEntered = =>
        unless @IsEnabled!
            return

        surface.PlaySound( "garrysmod/ui_hover.wav" )

    PANEL.Paint = ( width, height ) =>
        color = @Color
        unless color
            return

        r, g, b = color\Unpack!

        a = 180
        if not @IsEnabled!
            a = 150
        elseif @Hovered
            a = 250

        surface.SetDrawColor( r, g, b, a )
        surface.DrawRect( 0, 0, width, height )

    PANEL.DoClick = =>
        unless @IsEnabled!
            return

        surface.PlaySound( "garrysmod/ui_click.wav" )
        RunConsoleCommand( "changeteam", @Team or 0 )

        panel = @MainPanel
        if IsValid( panel )
            panel\Remove!

    PANEL.Think = =>
        @SetCursor( @IsEnabled! and "hand" or "no" )
        @SetEnabled( @Player\Team! ~= @Team )

        unless @Color
            @Color = team.GetColor( @Team )
            @SetText( team.GetName( @Team ) )

    vgui.Register( "JB.TeamButton", PANEL, "DButton" )

-- Main Panel
do

    PANEL = {}

    PANEL.OnRemove = =>
        hook.Remove "OnScreenSizeChanged", @
        hook.Remove "PlayerButtonDown", @

    PANEL.Init = =>
        @DockPadding( 16, 16, 16, 16 )

        hook_Add "OnScreenSizeChanged", @, @Remove
        hook_Add "PlayerButtonDown", @, ( ply, key ) =>
            if key >= 107 and key <= 109 and not ( @Hovered or @IsChildHovered! )
                @Remove!

    	@MakePopup!
	    @SetKeyboardInputEnabled( false )

        -- Title Text
        do

            title = @Add( "DLabel" )
            title\SetText( "#jb.team-select" )
            title\SetTextColor( WhiteColor )
            title\SetContentAlignment( 5 )
            title\SetFont( "DermaLarge" )

            title\DockMargin( 0, 0, 0, 16 )
            title\Dock( TOP )

            title.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

        subPanel = @Add( "EditablePanel" )
        subPanel\Dock( FILL )

        -- TEAM_GUARD
        do

            button = subPanel\Add( "JB.TeamButton" )
            button.Team = TEAM_GUARD
            button.MainPanel = @
            button\Dock( LEFT )

            button.PerformLayout = =>
                @SetWide( subPanel\GetWide! * 0.5 - 8 )

        -- TEAM_PRISONER
        do

            button = subPanel\Add( "JB.TeamButton" )
            button.Team = TEAM_PRISONER
            button.MainPanel = @
            button\Dock( RIGHT )

            button.PerformLayout = =>
                @SetWide( subPanel\GetWide! * 0.5 - 8 )

        -- TEAM_SPECTATOR
        do

            button = @Add( "JB.TeamButton" )
            button.Team = TEAM_SPECTATOR
            button\SetTextColor( BackgroundColor )
            button.MainPanel = @

            button\DockMargin( 0, 16, 0, 0 )
            button\Dock( BOTTOM )

            button.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

    PANEL.PerformLayout = ( width, height ) =>
        @SetSize( ScrW! * 0.5, ScrH! * 0.5 )
        @Center!

    PANEL.Paint = ( width, height ) =>
        surface.SetDrawColor( BackgroundColor.r, BackgroundColor.g, BackgroundColor.b, 240 )
        surface.DrawRect( 0, 0, width, height )

    vgui.Register( "JB.TeamSelect", PANEL, "EditablePanel" )

do

    jb_hands_transparency = CreateClientConVar( "jb_hands_transparency", "0", true, false, "Hands transparency value.", 0, 1 )

    do

        handsAlpha = 1 - jb_hands_transparency\GetFloat!
        cvars.AddChangeCallback( "jb_hands_transparency", ( _, __, value ) ->
            handsAlpha = 1 - ( tonumber( value ) or 0 )
        "Jailbreak" )

        GM.PreDrawPlayerHands = =>
            render.SetBlend( handsAlpha )

        GM.PostDrawPlayerHands = =>
            render.SetBlend( 1 )

    cl_playermodel = GetConVar( "cl_playermodel" )

    ConVarFlags = bit.bor( FCVAR_ARCHIVE, FCVAR_USERINFO, FCVAR_DONTRECORD )
    cl_playercolor = CreateConVar( "cl_playercolor", "0.3 0.3 0.3", ConVarFlags, "The value is a Vector - so between 0-1 - not between 0-255" )
    cl_weaponcolor = CreateConVar( "cl_weaponcolor", "0.30 1.80 2.10", ConVarFlags, "The value is a Vector - so between 0-1 - not between 0-255" )
    cl_playerbodygroups = CreateConVar( "cl_playerbodygroups", "0", ConVarFlags, "The bodygroups to use, if the model has any" )
    cl_playerskin = CreateConVar( "cl_playerskin", "0", ConVarFlags, "The skin to use, if the model has any" )

    cvars.AddChangeCallback( "cl_playermodel", ->
        RunConsoleCommand( "cl_playerbodygroups", "0" )
        RunConsoleCommand( "cl_playerskin", "0" )
    "Jailbreak" )

    default_animations = { "idle_all_01", "menu_walk" }
    :PrecacheModel = util

    list_Set "DesktopWindows", "!1player-editor", {
        title: "#smwidget.playermodel"
        icon: "icon64/playermodel.png"
        click: =>
            window = @Window
            if IsValid( window )
                return

            window = g_ContextMenu\Add( "DFrame" )
            @Window = window

            window\SetTitle( "#smwidget.playermodel_title" )
            window\SetSize( 960, 700 )
            window\Center!

            window\SetSize( math.min( ScrW! - 16, window\GetWide! ), math.min( ScrH! - 16, window\GetTall! ) )
            window\SetMinWidth( window\GetWide! )
            window\SetMinHeight( window\GetTall! )
            window\SetSizable( true )
            window\Center!

            modelPreview = window\Add( "DModelPanel" )
            modelPreview\Dock( FILL )
            modelPreview\SetFOV( 36 )
            modelPreview\SetCamPos( vector_origin )
            modelPreview\SetDirectionalLight( BOX_RIGHT, Color( 255, 160, 80, 255 ) )
            modelPreview\SetDirectionalLight( BOX_LEFT, Color( 80, 160, 255, 255 ) )
            modelPreview\SetAmbientLight( Vector( -64, -64, -64 ) )
            modelPreview\SetAnimated( true )
            modelPreview.Angles = angle_zero
            modelPreview\SetLookAt( Vector( -100, 0, -22 ) )

            sheet = window\Add( "DPropertySheet" )
            sheet\Dock( RIGHT )
            sheet\SetSize( 430, 0 )

            -- Models Tab
            modelsTab = window\Add( "DPanel" )
            modelsTab\DockPadding( 8, 8, 8, 8 )

            modelsSearch = modelsTab\Add( "DTextEntry" )
            modelsSearch\Dock( TOP )
            modelsSearch\DockMargin( 0, 0, 0, 8 )
            modelsSearch\SetUpdateOnType( true )
            modelsSearch\SetPlaceholderText( "#spawnmenu.quick_filter" )

            selectPanel = modelsTab\Add( "DPanelSelect" )
            selectPanel\Dock( FILL )

            for name, modelPath in SortedPairs( player_manager.AllValidModels! )
                modelPath = Jailbreak.FixModelPath( modelPath )

                icon = vgui.Create( "SpawnIcon" )
                icon\SetModel( modelPath )
                icon\SetSize( 64, 64 )
                icon\SetTooltip( name )
                icon.ModelName = name
                icon.ModelPath = modelPath
                icon.OpenMenu = ->
                    menu = DermaMenu!
                    menu\AddOption( "#spawnmenu.menu.copy", ->
                        SetClipboardText( modelPath )
                    )\SetIcon( "icon16/page_copy.png" )
                    menu\Open!

                selectPanel\AddPanel( icon, {
                    cl_playermodel: name
                } )

            do

                UpdateAvalibleModels = ->
                    unless selectPanel\IsValid! and selectPanel\IsVisible!
                        return

                    allowedPlayerModels = {}
                    isFemalePrison = Jailbreak.IsFemalePrison!

                    for modelPath in *Jailbreak.PlayerModels[ TEAM_PRISONER ][ isFemalePrison ]
                        allowedPlayerModels[ modelPath ] = true

                    for modelPath in *Jailbreak.PlayerModels[ TEAM_GUARD ][ isFemalePrison ]
                        allowedPlayerModels[ modelPath ] = true

                    filter = modelsSearch\IsValid! and modelsSearch\GetValue! or ""
                    for _, icon in pairs( selectPanel\GetItems! )
                        allowed = Jailbreak.CustomPlayerModels\GetBool! or allowedPlayerModels[ icon.ModelPath or "" ]
                        unless allowed
                            icon\SetVisible( false )
                            continue

                        icon\SetVisible( icon.ModelName\find( filter, 1, true ) and icon.ModelPath\find( filter, 1, true ) )
                    selectPanel\InvalidateLayout!

                timer.Create( "player-editor-models", 0.5, 0, UpdateAvalibleModels )
                modelsSearch.OnValueChange = UpdateAvalibleModels
                UpdateAvalibleModels!

            sheet\AddSheet( "#smwidget.model", modelsTab, "icon16/user.png" )

            -- Player Colors Tab
            colorsPanel = window\Add( "DPanel" )
            colorsPanel\DockPadding( 8, 8, 8, 8 )

            do

                handsTransparency = colorsPanel\Add( "DNumSlider" )
                handsTransparency\Dock( TOP )
                handsTransparency\SetText( "#jb.hands-transparency" )
                handsTransparency\SetDark( true )
                handsTransparency\SetTall( 50 )
                handsTransparency\SetDecimals( 2 )
                handsTransparency\SetMax( 1 )

                handsTransparency\SetValue( jb_hands_transparency\GetFloat! )

                handsTransparency.OnValueChanged = ( value ) =>
                    if jb_hands_transparency\GetFloat! ~= value
                        jb_hands_transparency\SetFloat( value )

            -- Player Color
            do

                label = colorsPanel\Add( "DLabel" )
                label\SetText( "#smwidget.color_plr" )
                label\SetTextColor( Color( 0, 0, 0, 255 ) )
                label\Dock( TOP )

            do

                playerColor = colorsPanel\Add( "DColorMixer" )
                playerColor\SetAlphaBar( false )
                playerColor\SetPalette( false )
                playerColor\Dock( TOP )
                playerColor\SetSize( 200, math.min( window\GetTall! / 3, 260 ) )

                playerColor.ValueChanged = =>
                    vector = @GetVector!

                    entity = modelPreview.Entity
                    if IsValid( entity )
                        entity\SetPlayerColor( vector )
                    else
                        timer.Simple 0, ->
                            if playerColor\IsValid!
                                playerColor\ValueChanged!

                    cl_playercolor\SetString( tostring( vector ) )

                playerColor\SetVector( Vector( cl_playercolor\GetString! ) )

            -- Weapon Color
            do

                label = colorsPanel\Add( "DLabel" )
                label\SetText( "#smwidget.color_wep" )
                label\SetTextColor( Color( 0, 0, 0, 255 ) )
                label\DockMargin( 0, 32, 0, 0 )
                label\Dock( TOP )

            do

                weaponColor = colorsPanel\Add( "DColorMixer" )
                weaponColor\SetAlphaBar( false )
                weaponColor\SetPalette( false )
                weaponColor\Dock( TOP )
                weaponColor\SetSize( 200, math.min( window\GetTall! / 3, 260 ) )

                weaponColor.ValueChanged = =>
                    cl_weaponcolor\SetString( tostring( @GetVector! ) )

                weaponColor\SetVector( Vector( cl_weaponcolor\GetString! ) )

            sheet\AddSheet( "#smwidget.colors", colorsPanel, "icon16/color_wheel.png" )

            -- Bodygroups Tab
            bodygroupsPanel = window\Add( "DPanel" )
            bodygroupsPanel\DockPadding( 8, 8, 8, 8 )

            bodygroupsList = bodygroupsPanel\Add( "DPanelList" )
            bodygroupsList\EnableVerticalScrollbar( true )
            bodygroupsList\Dock( FILL )

            bodygroupsSheet = sheet\AddSheet( "#smwidget.bodygroups", bodygroupsPanel, "icon16/cog.png" )

            UpdateBodyGroups = ( pnl, value ) ->
                previewEntity = modelPreview.Entity
                if previewEntity
                    previewEntity\SetBodygroup( pnl.typenum, math.Round( value ) )

                str = Explode( " ", cl_playerbodygroups\GetString! )
                if #str < pnl.typenum + 1
                    for index = 1, pnl.typenum + 1
                        str[ index ] = str[ index ] or 0

                str[ pnl.typenum + 1 ] = math.Round( value )
                cl_playerbodygroups\SetString( table.concat( str, " " ) )

            SetSkin = ( value ) =>
                value = math.floor( value )

                previewEntity = modelPreview.Entity
                if previewEntity
                    previewEntity\SetSkin( value )

                if value ~= cl_playerskin\GetInt!
                    cl_playerskin\SetString( value )

            -- Player Model
            SetupModel = ( modelName ) ->
                unless modelPreview
                    return

                requested = Jailbreak.FixModelPath( player_manager.TranslatePlayerModel( modelName ) )
                PrecacheModel( requested )
                modelPreview\SetModel( requested )

                bodygroupsList\Clear!

                previewEntity = modelPreview.Entity
                unless previewEntity
                    return

                previewEntity\SetPos( Vector( -100, 0, -61 ) )

                bodygroupsTab = bodygroupsSheet.Tab
                if IsValid( bodygroupsTab )
                    if bodygroupsTab\IsVisible!
                        bodygroupsTab\SetVisible( false )

                    -- Skin
                    skinCount = previewEntity\SkinCount! - 1
                    if skinCount > 0
                        skins = vgui.Create( "DNumSlider" )
                        skins\Dock( TOP )
                        skins\SetText( "Skin" )
                        skins\SetDark( true )
                        skins\SetTall( 50 )
                        skins\SetDecimals( 0 )
                        skins\SetMax( skinCount )
                        skins\SetValue( cl_playerskin\GetInt! )
                        skins.OnValueChanged = SetSkin
                        bodygroupsList\AddItem( skins )

                        cvars.AddChangeCallback( "cl_playerskin", ( _, __, value ) ->
                            value = tonumber( value ) or 0
                            skins\SetValue( value )
                            SetSkin( nil, value )
                        "player-editor" )

                        unless bodygroupsTab\IsVisible!
                            bodygroupsTab\SetVisible( true )

                    -- Bodygroups
                    groups = Explode( " ", cl_playerbodygroups\GetString! )
                    for index = 0, previewEntity\GetNumBodyGroups! - 1
                        if previewEntity\GetBodygroupCount( index ) <= 1
                            continue

                        bodygroup = vgui.Create( "DNumSlider" )
                        bodygroup\Dock( TOP )
                        bodygroup\SetText( previewEntity\GetBodygroupName( index ) )
                        bodygroup\SetDark( true )
                        bodygroup\SetTall( 50 )
                        bodygroup\SetDecimals( 0 )
                        bodygroup.typenum = index
                        bodygroup\SetMax( previewEntity\GetBodygroupCount( index ) - 1 )
                        bodygroup\SetValue( groups[ index + 1 ] or 0 )
                        bodygroup.OnValueChanged = UpdateBodyGroups
                        bodygroupsList\AddItem( bodygroup )

                        previewEntity\SetBodygroup( index, groups[ index + 1 ] or 0 )

                        unless bodygroupsTab\IsVisible!
                            bodygroupsTab\SetVisible( true )

                sheet.tabScroller\InvalidateLayout!

                -- Animations
                anims = list.Get( "PlayerOptionsAnimations" )[ modelName ]
                if not anims or #anims == 0
                    anims = default_animations

                sequence = previewEntity\LookupSequence( anims[ math.random( 1, #anims ) ] )
                if sequence > 0
                    previewEntity\ResetSequence( sequence )

            cvars.AddChangeCallback( "cl_playermodel", ( _, __, modelName ) ->
                SetupModel( modelName )
            "player-editor" )

            SetupModel( cl_playermodel\GetString! )

            modelPreview.DragMousePress = =>
                @PressX, @PressY = input.GetCursorPos!
                @Pressed = true

            modelPreview.DragMouseRelease = =>
                @Pressed = false

            modelPreview.LayoutEntity = ( entity ) =>
                if @bAnimated
                    @RunAnimation!

                if @Pressed
                    mx, my = input.GetCursorPos!
                    @Angles[ 2 ] = @Angles[ 2 ] - ( ( @PressX or mx ) - mx ) / 2
                    @PressX, @PressY = mx, my
                entity\SetAngles( @Angles )
    }

list_Set( "PlayerOptionsAnimations", "gman", { "menu_gman" } )

list_Set( "PlayerOptionsAnimations", "hostage01", { "idle_all_scared" } )
list_Set( "PlayerOptionsAnimations", "hostage02", { "idle_all_scared" } )
list_Set( "PlayerOptionsAnimations", "hostage03", { "idle_all_scared" } )
list_Set( "PlayerOptionsAnimations", "hostage04", { "idle_all_scared" } )

list_Set( "PlayerOptionsAnimations", "zombine", { "menu_zombie_01" } )
list_Set( "PlayerOptionsAnimations", "corpse", { "menu_zombie_01" } )
list_Set( "PlayerOptionsAnimations", "zombiefast", { "menu_zombie_01" } )
list_Set( "PlayerOptionsAnimations", "zombie", { "menu_zombie_01" } )
list_Set( "PlayerOptionsAnimations", "skeleton", { "menu_zombie_01" } )

list_Set( "PlayerOptionsAnimations", "combine", { "menu_combine" } )
list_Set( "PlayerOptionsAnimations", "combineprison", { "menu_combine" } )
list_Set( "PlayerOptionsAnimations", "combineelite", { "menu_combine" } )
list_Set( "PlayerOptionsAnimations", "police", { "menu_combine" } )
list_Set( "PlayerOptionsAnimations", "policefem", { "menu_combine" } )

list_Set( "PlayerOptionsAnimations", "css_arctic", { "pose_standing_02", "idle_fist" } )
list_Set( "PlayerOptionsAnimations", "css_gasmask", { "pose_standing_02", "idle_fist" } )
list_Set( "PlayerOptionsAnimations", "css_guerilla", { "pose_standing_02", "idle_fist" } )
list_Set( "PlayerOptionsAnimations", "css_leet", { "pose_standing_02", "idle_fist" } )
list_Set( "PlayerOptionsAnimations", "css_phoenix", { "pose_standing_02", "idle_fist" } )
list_Set( "PlayerOptionsAnimations", "css_riot", { "pose_standing_02", "idle_fist" } )
list_Set( "PlayerOptionsAnimations", "css_swat", { "pose_standing_02", "idle_fist" } )
list_Set( "PlayerOptionsAnimations", "css_urban", { "pose_standing_02", "idle_fist" } )

do

    HUDs = {
        CHudSecondaryAmmo: true
        -- CHudSuitPower: true
        CHudBattery: true
        CHudHealth: true
        CHudAmmo: true
    }

    GM.StartChat = ( isTeam ) =>
        if @Reskined
            return

        hook_Add "Think", "JB::CHudReskin", ->
            viewport = vgui.GetKeyboardFocus!
            unless IsValid( viewport )
                return

            hook.Remove "Think", "JB::CHudReskin"
            @Reskined = true
            chat.Close!

            for index = 1, 5
                panel = viewport\GetParent!
                unless IsValid( panel )
                    break

                viewport = panel

            unless IsValid( viewport )
                return

            for panel in *viewport\GetChildren!
                unless HUDs[ panel\GetClassName! ]
                    continue

                ply = LocalPlayer!
                unless IsValid( ply )
                    return

                hook_Add "Think", panel, =>
                    @SetFGColorEx( team.GetColor( ply\Team! )\Unpack! )
                    -- @SetFontInternal( "ChatFont" )

do

    TypingIcon = Material( "icon16/comment_edit.png", "mips" )
    SpeakingIcon = Material( "icon16/sound.png", "mips" )
    :SetMaterial, :DrawSprite = render
    player_GetAll = player.GetAll

    GM.PostDrawTranslucentRenderables = ( drawingDepth, drawingSkybox, isDraw3DSkybox ) =>
        if drawingSkybox or isDraw3DSkybox
            return

        eyePos = EyePos!

        for ply in *player_GetAll!
            unless ply\IsInGame!
                continue

            isSpeaking, isTyping = ply\IsSpeaking!, ply\IsTyping!
            unless isSpeaking or isTyping
                continue

            origin = nil

            headBoneID = ply\LookupBone( "ValveBiped.Bip01_Head1" )
            if headBoneID and headBoneID >= 0
                origin = ply\GetBonePosition( headBoneID )

                hitboxset = ply\GetHitboxSet!
                for hitbox = 0, ply\GetHitBoxCount( hitboxset )
                    if headBoneID == ply\GetHitBoxBone( hitbox, hitboxset )
                        mins, maxs = ply\GetHitBoxBounds( hitbox, hitboxset )
                        origin[ 3 ] = origin[ 3 ] + ( abs( mins[ 3 ] ) + abs( maxs[ 3 ] ) ) * 2
                        break

            else
                origin = ply\EyePos!
                origin[ 3 ] += 14

            data = origin\ToScreen!
            unless data.visible
                continue

            distance = origin\DistToSqr( eyePos )
            if distance > Jailbreak.VoiceChatMaxDistance
                continue

            if isSpeaking
                SetMaterial( SpeakingIcon )
            elseif isTyping
                SetMaterial( TypingIcon )
            else
                continue

            origin[ 3 ] = 1 + origin[ 3 ] + sin( CurTime! * 4 ) * 1.5
            DrawSprite( origin, 12, 12, WhiteColor )
