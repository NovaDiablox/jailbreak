Jailbreak = Jailbreak

do

    FrameTime = FrameTime

    hook.Add "InputMouseApply", "Jailbreak::jb_ragdoll_mover", ( cmd, x, y, viewAngles ) ->
        ply = Jailbreak.Player
        unless ply\IsValid! and ply\Alive!
            return

        entity = ply\GetHoldingEntity!
        if entity and entity\IsValid!
            if entity.RagdollMover
                return true

            frameTime = entity\GetNW2Int( "entity-mass", 0 )
            if frameTime < 1
                frameTime = 1

            frameTime = FrameTime! / frameTime
            viewAngles[ 1 ] += y * frameTime
            viewAngles[ 2 ] -= x * frameTime
            cmd\SetViewAngles( viewAngles )
            return true

do

    :VMin = Jailbreak
    PANEL = {}

    PANEL.Init = =>
        @SetTitle( "#jb.paint_can" )
        @SetIcon( "icon16/paintcan.png" )

        @SetSizable( true )
        @MakePopup!
        @Center!

        mixer = @Add( "DColorMixer" )
        @Mixer = mixer

        mixer\Dock( FILL )
        mixer\SetAlphaBar( false )

        button = @Add( "DButton" )
        @Button = button

        button\Dock( BOTTOM )
        button\SetText( "#jb.apply" )

        button.DoClick = ->
            color = mixer\GetColor!
            RunConsoleCommand( "jb_paint_entity_apply", @EntIndex or 0, color.r .. " " .. color.g .. " " .. color.b )
            @Close!

    PANEL.PerformLayout = ( ... ) =>
        size = VMin( 40 )
        @SetSize( size, size )
        @SetMinWidth( size )
        @SetMinHeight( size )

        mixer = @Mixer
        if mixer and mixer\IsValid!
            mixer\DockMargin( 0, 0, 0, VMin( 0.5 ) )

        button = @Button
        if button and button\IsValid!
            button\SetTall( VMin( 5 ) )

        DFrame.PerformLayout( @, ... )

    vgui.Register( "Jailbreak::PaintMenu", PANEL, "DFrame" )

do

    panel = nil

    concommand.Add "jb_paint_entity", ( _, args ) =>
        if panel and panel\IsValid!
            panel\Remove!
            return

        unless @Alive!
            return

        entity = Entity( tonumber( args[ 1 ] or "0" ) or 0 )
        unless entity and entity\IsValid! and entity\IsPaintCan!
            return

        if entity\GetPos!\Distance( @GetPos! ) > 72
            return

        panel = vgui.Create( "Jailbreak::PaintMenu" )
        panel.EntIndex = entity\EntIndex!

if render.GetDXLevel! < 80
    return

:UpdateRefractTexture, :PushCustomClipPlane, :SetColorModulation, :PopCustomClipPlane, :MaterialOverride, :EnableClipping, :GetBlend, :SetBlend = render
:LocalToWorld, :GetModelRenderBounds = FindMetaTable( "Entity" )
:GetPlayerColor, :GetSpawnTime = FindMetaTable( "Player" )
:Dot, :Normalize = FindMetaTable( "Vector" )
LerpVector = LerpVector
CurTime = CurTime
:Clamp = math

material = Material( "models/wireframe" )
:PlayerSpawnTime = Jailbreak

blend, clipping, frac = 0, false, 0

hook.Add "PrePlayerDraw", "Jailbreak::SpawnEffect", ( flags ) =>
    frac = 1 - Clamp( ( CurTime! - GetSpawnTime( @ ) ) / PlayerSpawnTime\GetFloat!, 0, 1 )
    if frac == 0
        return

    mins, maxs = GetModelRenderBounds( @ )
    normal = ( mins - maxs )
    Normalize( normal )

    clipping = EnableClipping( true )
    PushCustomClipPlane( normal, Dot( normal, LerpVector( frac, LocalToWorld( @, maxs ), LocalToWorld( @, mins ) ) ) )
    UpdateRefractTexture!

    blend = GetBlend!
    color = GetPlayerColor( @ )
    SetColorModulation( color[ 1 ], color[ 2 ], color[ 3 ] )
    material\SetFloat( "$refractamount", frac * 0.1 )
    MaterialOverride( material )
    SetBlend( 1 - frac )

hook.Add "PostPlayerDraw", "Jailbreak::SpawnEffect", ( flags ) =>
    if frac == 0
        return

    SetColorModulation( 1, 1, 1 )
	MaterialOverride( 0 )
    SetBlend( blend )

    PopCustomClipPlane!
    EnableClipping( clipping )
