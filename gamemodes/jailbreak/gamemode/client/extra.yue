Jailbreak = Jailbreak
:Add = hook

do

    DrawColorModify = DrawColorModify
    GetGlobal2Bool = GetGlobal2Bool
    DrawSunbeams = DrawSunbeams
    DrawSharpen = DrawSharpen
    DrawToyTown = DrawToyTown
    DrawBloom = DrawBloom

    heaven = {
        "$pp_colour_addr": 0
        "$pp_colour_addg": 0
        "$pp_colour_addb": 0
        "$pp_colour_brightness": 0.05
        "$pp_colour_contrast": 1.25
        "$pp_colour_colour": 1.25
        "$pp_colour_mulr": 0.025
        "$pp_colour_mulg": 0.025
        "$pp_colour_mulb": 0
    }

    hell = {
        "$pp_colour_addr": 0.05
        "$pp_colour_addg": 0
        "$pp_colour_addb": 0
        "$pp_colour_brightness": -0.05
        "$pp_colour_contrast": 1.25
        "$pp_colour_colour": 0.8
        "$pp_colour_mulr": 1.5
        "$pp_colour_mulg": 0
        "$pp_colour_mulb": 0
    }

    Add "RenderScreenspaceEffects", "Jailbreak::Heaven & Hell", ->
        if GetGlobal2Bool( "Jailbreak::Heaven" )
            DrawColorModify( heaven )
            DrawToyTown( 2, Jailbreak.ScreenHeight / 2 )
            DrawSunbeams( 0.1, 0.013, 0.14, 0.2, 0.6 )
            DrawBloom( 1, 1, 8, 8, 1, 1, 1, 1, 1 )
            return

        if GetGlobal2Bool( "Jailbreak::Hell" )
            DrawColorModify( hell )
            DrawBloom( 1, 1, 8, 8, 1, 1, 1, 1, 1 )
            DrawSharpen( 0.8, 0.8 )
            return

    :FogStart, :FogEnd, :FogMode, :FogMaxDensity, :FogColor = render

    Add "SetupWorldFog", "Jailbreak::Heaven & Hell", ->
        if GetGlobal2Bool( "Jailbreak::Heaven" )
            FogStart( 512 )
            FogEnd( 2048 )
            FogMode( 1 )
            FogMaxDensity( 0.5 )
            FogColor( 255, 255, 255 )
            return true

        if GetGlobal2Bool( "Jailbreak::Hell" )
            FogStart( 256 )
            FogEnd( 1048 )
            FogMode( 1 )
            FogMaxDensity( 1 )
            FogColor( 33, 33, 33 )
            return true

do

    FrameTime = FrameTime

    Add "InputMouseApply", "Jailbreak::jb_ragdoll_mover", ( cmd, x, y, viewAngles ) ->
        ply = Jailbreak.Player
        unless ply\IsValid! and ply\Alive!
            return

        entity = ply\GetHoldingEntity!
        if entity and entity\IsValid!
            if entity.RagdollMover
                return true

            frameTime = entity\GetNW2Int( "entity-mass", 0 )
            if frameTime < 1
                frameTime = 1

            frameTime = FrameTime! / frameTime
            viewAngles[ 1 ] += y * frameTime
            viewAngles[ 2 ] -= x * frameTime
            cmd\SetViewAngles( viewAngles )
            return true

do

    :VMin = Jailbreak
    PANEL = {}

    PANEL.Init = =>
        @SetTitle( "#jb.paint_can" )
        @SetIcon( "icon16/paintcan.png" )

        @SetSizable( true )
        @MakePopup!
        @Center!

        mixer = @Add( "DColorMixer" )
        @Mixer = mixer

        mixer\Dock( FILL )
        mixer\SetAlphaBar( false )

        button = @Add( "DButton" )
        @Button = button

        button\Dock( BOTTOM )
        button\SetText( "#jb.apply" )

        button.DoClick = ->
            color = mixer\GetColor!
            RunConsoleCommand( "jb_paint_entity_apply", @EntIndex or 0, color.r .. " " .. color.g .. " " .. color.b )
            @Close!

    PANEL.PerformLayout = ( ... ) =>
        size = VMin( 40 )
        @SetSize( size, size )
        @SetMinWidth( size )
        @SetMinHeight( size )

        mixer = @Mixer
        if mixer and mixer\IsValid!
            mixer\DockMargin( 0, 0, 0, VMin( 0.5 ) )

        button = @Button
        if button and button\IsValid!
            button\SetTall( VMin( 5 ) )

        DFrame.PerformLayout( @, ... )

    vgui.Register( "Jailbreak::PaintMenu", PANEL, "DFrame" )

do

    panel = nil

    concommand.Add "jb_paint_entity", ( _, args ) =>
        if panel and panel\IsValid!
            panel\Remove!
            return

        unless @Alive!
            return

        entity = Entity( tonumber( args[ 1 ] or "0" ) or 0 )
        unless entity and entity\IsValid! and entity\IsPaintCan!
            return

        if entity\GetPos!\Distance( @GetPos! ) > 72
            return

        panel = vgui.Create( "Jailbreak::PaintMenu" )
        panel.EntIndex = entity\EntIndex!

Add "NotifyShouldTransmit", "Jailbreak::AutoMute", ( entity, shouldTransmit ) ->
    if not shouldTransmit or not entity\IsPlayer! or entity.m_bBlacklistMuted
        return

    if not entity\IsMuted! and entity\GetFriendStatus! == "blocked"
        entity.m_bBlacklistMuted = true
        entity\SetMuted( true )

if render.GetDXLevel! < 80
    return

:UpdateRefractTexture, :PushCustomClipPlane, :SetColorModulation, :PopCustomClipPlane, :MaterialOverride, :EnableClipping, :GetBlend, :SetBlend = render
:LocalToWorld, :GetModelRenderBounds = FindMetaTable( "Entity" )
:GetPlayerColor, :GetSpawnTime = FindMetaTable( "Player" )
:Dot, :Normalize = FindMetaTable( "Vector" )
LerpVector = LerpVector
CurTime = CurTime
:Clamp = math

material = Material( "models/wireframe" )
:PlayerSpawnTime = Jailbreak

blend, clipping, frac = 0, false, 0

Add "PrePlayerDraw", "Jailbreak::SpawnEffect", ( flags ) =>
    frac = 1 - Clamp( ( CurTime! - GetSpawnTime( @ ) ) / PlayerSpawnTime\GetFloat!, 0, 1 )
    if frac == 0
        return

    mins, maxs = GetModelRenderBounds( @ )
    normal = ( mins - maxs )
    Normalize( normal )

    clipping = EnableClipping( true )
    PushCustomClipPlane( normal, Dot( normal, LerpVector( frac, LocalToWorld( @, maxs ), LocalToWorld( @, mins ) ) ) )
    UpdateRefractTexture!

    blend = GetBlend!
    color = GetPlayerColor( @ )
    SetColorModulation( color[ 1 ], color[ 2 ], color[ 3 ] )
    material\SetFloat( "$refractamount", frac * 0.1 )
    MaterialOverride( material )
    SetBlend( 1 - frac )

Add "PostPlayerDraw", "Jailbreak::SpawnEffect", ( flags ) =>
    if frac == 0
        return

    SetColorModulation( 1, 1, 1 )
	MaterialOverride( 0 )
    SetBlend( blend )

    PopCustomClipPlane!
    EnableClipping( clipping )
