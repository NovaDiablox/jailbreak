Jailbreak = Jailbreak

:Colors, :VMin, :GameInProgress, :VoiceChatProximity = Jailbreak
RunConsoleCommand = RunConsoleCommand
:min, :floor, :random, :Round = math
:sub, :upper, :Explode = string
:GetPhrase = language
:PlaySound = surface
:Set = list

:black = Colors

do

    securityRadio = CreateConVar( "jb_security_radio", "0", FCVAR_USERINFO, "Responsible for turning the radio on or off.", 0, 1 )
    cvars.AddChangeCallback( securityRadio\GetName!, ( _, __, value ) ->
        PlaySound( value == "1" and "npc/overwatch/radiovoice/on3.wav" or "npc/overwatch/radiovoice/off2.wav" )
    "Jailbreak::SecurityRadio" )

    Set "DesktopWindows", "walkie-talkie", {
        title: "#jb.walkie-talkie"
        icon: "icon16/phone.png"
        order: 500
        think: =>
            unless VoiceChatProximity\GetBool!
                if @IsVisible!
                    @InvalidateParent!
                    @Hide!

                return

            if Jailbreak.Player\HasSecurityRadio!
                state = securityRadio\GetBool!

                image = state and "icon16/phone_sound.png" or "icon16/phone.png"
                if @GetImage! ~= image
                    @SetImage( image )

                if @IsVisible!
                    return

                @InvalidateParent!
                @Show!

            elseif @IsVisible!
                @InvalidateParent!
                @Hide!

        click: =>
            securityRadio\SetBool( not securityRadio\GetBool! )
    }

do

    :AllowPlayersLoseConsciousness = Jailbreak

    Set "DesktopWindows", "lose-consciousness", {
        title: "#jb.player.lose-consciousness"
        icon: "icon16/user_delete.png"
        order: 2500
        think: =>
            unless AllowPlayersLoseConsciousness\GetBool!
                if @IsVisible!
                    @InvalidateParent!
                    @Hide!

                return

            ply = Jailbreak.Player
            unless GameInProgress! and ply\IsValid! and ply\Alive!
                if @IsVisible!
                    @InvalidateParent!
                    @Hide!

                return

            unless @IsVisible!
                @InvalidateParent!
                @Show!

            ragdoll = ply\GetRagdollEntity!
            unless ragdoll\IsValid! and ragdoll\Alive!
                if @GetImage! ~= "icon16/user_delete.png"
                    @SetImage( "icon16/user_delete.png" )

                text = GetPhrase( "jb.player.lose-consciousness" )
                if @Label\GetText! ~= text
                    @Label\SetText( text )
                    @SetTooltip( text )

                return

            if @GetImage! ~= "icon16/user_add.png"
                @SetImage( "icon16/user_add.png" )

            text = GetPhrase( "jb.player.wake-up" )
            if @Label\GetText! ~= text
                @Label\SetText( text )
                @SetTooltip( text )

        click: =>
            RunConsoleCommand( "jb_lose_consciousness" )
    }

do

    Megaphone = CreateConVar( "jb_megaphone", "1", FCVAR_USERINFO, "Activates the warden's ability to speak for the entire map.", 0, 1 )

    Set "DesktopWindows", "megaphone", {
        title: "#jb.megaphone"
        icon: "icon16/sound_mute.png"
        order: 500
        think: =>
            unless VoiceChatProximity\GetBool!
                if @IsVisible!
                    @InvalidateParent!
                    @Hide!

                return

            if Jailbreak.Player\IsWarden!
                image = Megaphone\GetBool! and "icon16/sound.png" or "icon16/sound_mute.png"
                if @GetImage! ~= image
                    @SetImage( image )

                unless @IsVisible!
                    @InvalidateParent!
                    @Show!

            elseif @IsVisible!
                @InvalidateParent!
                @Hide!

        click: =>
            Megaphone\SetBool( not Megaphone\GetBool! )
    }

Set "DesktopWindows", "warden-request", {
    title: "#jb.warden.join"
    icon: "icon16/user_suit.png"
    order: 1000
    think: =>
        if Jailbreak.IsRoundRunning!
            ply = Jailbreak.Player
            if ply\Alive!
                if Jailbreak.HasWarden!
                    if ply\IsWarden!
                        image = "icon16/user_go.png"
                        if @GetImage! ~= image
                            @SetImage( image )

                        text = GetPhrase( "jb.warden.leave" )
                        if @Label\GetText! ~= text
                            @Label\SetText( text )
                            @SetTooltip( text )

                        unless @IsVisible!
                            @InvalidateParent!
                            @Show!

                        return

                elseif ply\IsGuard!
                    image = "icon16/user_suit.png"
                    if @GetImage! ~= image
                        @SetImage( image )

                    text = GetPhrase( "jb.warden.join" )
                    if @Label\GetText! ~= text
                        @Label\SetText( text )
                        @SetTooltip( text )

                    unless @IsVisible!
                        @InvalidateParent!
                        @Show!

                    return

        if @IsVisible!
            @InvalidateParent!
            @Hide!

    click: =>
        RunConsoleCommand( "jb_warden" )
}

Set "DesktopWindows", "shock-collars", {
    title: "#jb.shock-collars"
    icon: "icon16/lightning.png"
    order: 500
    think: =>
        if GameInProgress!
            ply = Jailbreak.Player
            if ply\IsWarden! and ply\Alive!
                state = Jailbreak.IsShockCollarsActive!

                image = state and "icon16/lightning.png" or "icon16/lightning_delete.png"
                if @GetImage! ~= image
                    @SetImage( image )

                unless @IsVisible!
                    @InvalidateParent!
                    @Show!

                return

        if @IsVisible!
            @InvalidateParent!
            @Hide!

    click: =>
        RunConsoleCommand( "jb_shock_collars" )
}

margin = 0

do

    Jailbreak.Font( "Jailbreak::Coins", "Roboto Mono Bold", 1.8 )

    PANEL = {}

    PANEL.Init = =>
        @OverlayFade = nil

        label = @Add( "DLabel" )
        @Label = label

        label\SetExpensiveShadow( 3, Color( 0, 0, 0, 125 ) )
        label\SetFont( "Jailbreak::Coins" )
        label\SetContentAlignment( 1 )
        label\SetWrap( true )
        label\Dock( FILL )

        @Icon\Dock( FILL )

    PANEL.Setup = ( item ) =>
        @SetModelName( item.model )
        @SetSkinID( item.skin or 0 )

        @Icon\SetModel( item.model, item.skin, item.bodygroups )
        @Label\SetText( "$" .. item.price )
        @SetTooltip( item.title )
        @ItemName = item.name
        @Price = item.price

    PANEL.DoRightClick = ->

    PANEL.DoClick = =>
        RunConsoleCommand( "jb_buy", @ItemName )

    PANEL.PerformLayout = =>
        size = VMin( 10 )
        @SetSize( size, size )

        margin = VMin( 0.5 )
        @DockPadding( margin, margin, margin, margin )

    do

        :CanWardenAfford = Jailbreak
        :spectators, :grey = Colors
        color = nil

        PANEL.Think = =>
            color = CanWardenAfford( @Price or 0 ) and spectators or grey
            if @Label\GetTextColor! ~= color
                @Label\SetTextColor( color )
                @InvalidateLayout!

    do

        :SetDrawColor, :DrawRect = surface

        PANEL.Paint = ( width, height ) =>
            if @IsHovered! and not dragndrop.IsDragging! then
                if @IsDown! and not @Dragging
                    SetDrawColor( 255, 255, 255, 25 )
                else
                    SetDrawColor( 255, 255, 255, 10 )

                DrawRect( 0, 0, width, height )

    PANEL.PaintOver = ( width, height ) =>
        @DrawSelections!

    vgui.Register( "Jailbreak:ShopItem", PANEL, "SpawnIcon" )

Set "DesktopWindows", "warden-shop", {
    title: "#jb.warden.shop"
    icon: "icon16/cart.png"
    onewindow: true
    order: 500
    think: =>
        if GameInProgress!
            ply = Jailbreak.Player
            if ply\IsWarden! and ply\Alive!
                unless @IsVisible!
                    @InvalidateParent!
                    @Show!

                return

        if @IsVisible!
            @InvalidateParent!
            @Hide!

        if @Window and @Window\IsValid!
            @Window\Remove!

    init: ( window ) =>
        window\SetTitle( "#jb.warden.shop" )
        window\SetIcon( "icon16/cart.png" )
        window\SetSize( VMin( 60 ), VMin( 40 ) )
        window\SetSizable( true )
        window\Center!

        window.PerformLayout = ( ... ) ->
            window\SetMinWidth( VMin( 40 ) )
            window\SetMinHeight( VMin( 20 ) )
            DFrame.PerformLayout( ... )

        hook.Add "LanguageChanged", window, ->
            hook.Remove "LanguageChanged", window
            window\Remove!

        :ShopItems = Jailbreak

        do

            menuBar = vgui.Create( "DMenuBar", window )
            menuBar\DockMargin( -3, -6, -3, 0 )
            menuBar\Dock( TOP )

            do

                coins = menuBar\Add( "DLabel" )
                coins\SetFont( "Jailbreak::Coins" )
                coins\SetMouseInputEnabled( true )
                coins\SetTextColor( black )
                coins\Dock( RIGHT )

                :GetWardenCoins = Jailbreak
                count = 0

                coins.Think = =>
                    count = GetWardenCoins!
                    if @Count ~= count
                        @Count = count
                        @SetText( "$" .. count )
                        @SetTooltip( "$" .. count)
                        @SizeToContentsX( VMin( 1 ) )

            other = menuBar\AddMenu( "#jb.shop.other" )
            menuBar.Other = other

            other\AddOption "#jb.shop.buy.random", ->
                item = ShopItems[ random( 1, #ShopItems ) ]
                unless item
                    MsgN( "#jb.shop.no-items" )
                    return

                RunConsoleCommand( "jb_buy", item.name )

            xpcall( hook.Run, ErrorNoHaltWithStack, "Jailbreak::WardenShopMenuBar", menuBar, window )

        margin = VMin( 0.5 )

        scroll = window\Add( "DScrollPanel" )
        scroll\DockMargin( 0, margin, 0, 0 )
        scroll\Dock( FILL )

        items = scroll\Add( "DIconLayout" )
        items\Dock( FILL )

        items\SetSpaceX( margin )
        items\SetSpaceY( margin )

        for item in *ShopItems
            items\Add( "Jailbreak:ShopItem" )\Setup( item )

}

do

    :AllowCustomPlayerModels, :PlayerColor, :PlayerWeaponColor, :PlayerModel, :PlayerSkin, :PlayerBodyGroups = Jailbreak
    previewOffset = Vector( -100, 0, -61 )

    :TranslatePlayerModel = player_manager
    ACT_HL2MP_IDLE = ACT_HL2MP_IDLE
    vector_origin = vector_origin
    :FixModelPath = Jailbreak
    :GetCursorPos = input
    tostring = tostring
    :concat = table

    Set "DesktopWindows", "player-options", {
        title: "#jb.player.options"
        icon: "icon16/group_gear.png"
        onewindow: true
        order: 200
        init: ( _, window ) ->
            window\SetTitle( "#jb.player.options" )
            window\SetIcon( "icon16/group_gear.png" )
            window\SetSize( VMin( 80 ), VMin( 50 ) )
            window\SetMinWidth( VMin( 60 ) )
            window\SetMinHeight( VMin( 30 ) )
            window\SetSizable( true )
            window\Center!

            modelPreview = window\Add( "DModelPanel" )
            modelPreview\Dock( FILL )
            modelPreview\SetFOV( 36 )
            modelPreview\SetCamPos( vector_origin )
            modelPreview\SetDirectionalLight( BOX_RIGHT, Color( 255, 160, 80 ) )
            modelPreview\SetDirectionalLight( BOX_LEFT, Color( 80, 160, 255 ) )
            modelPreview\SetAmbientLight( Vector( -64, -64, -64 ) )
            modelPreview\SetAnimated( true )
            modelPreview\SetLookAt( Vector( -100, 0, -22 ) )
            modelPreview.Angles = Angle!

            modelPreview.DragMousePress = =>
                @PressX, @PressY = GetCursorPos!
                @Pressed = true

            modelPreview.DragMouseRelease = =>
                @Pressed = false

            modelPreview.LayoutEntity = ( entity ) =>
                if @bAnimated
                    @RunAnimation!

                if @Pressed
                    x, y = GetCursorPos!
                    @Angles[ 2 ] = @Angles[ 2 ] - ( ( @PressX or x ) - x ) / 2
                    @PressX, @PressY = x, y

                entity\SetAngles( @Angles )

            sheet = window\Add( "DPropertySheet" )
            sheet\Dock( RIGHT )
            sheet\SetSize( 430, 0 )

            -- Models Tab
            do

                panel = window\Add( "DPanel" )
                panel\DockPadding( 8, 8, 8, 8 )

                scrollPanel = panel\Add( "DScrollPanel" )
                scrollPanel\Dock( FILL )

                icons = scrollPanel\Add( "DIconLayout" )
                icons\Dock( FILL )

                icons.PerformLayout = ( ... ) ->
                    margin = VMin( 0.5 )
                    icons\SetSpaceX( margin )
                    icons\SetSpaceY( margin )
                    DIconLayout.PerformLayout( ... )

                do

                    selectModel = =>
                        PlayerModel\SetString( @ModelName )

                    openMenu = =>
                        menu = DermaMenu!
                        menu\AddOption( "#spawnmenu.menu.copy", -> SetClipboardText( @ModelPath ) )\SetIcon( "icon16/page_copy.png" )
                        menu\Open!

                    for name, modelPath in SortedPairs( player_manager.AllValidModels! )
                        modelPath = FixModelPath( modelPath )

                        icon = icons\Add( "SpawnIcon" )
                        icon\SetModel( modelPath )
                        icon\SetSize( 64, 64 )
                        icon\SetTooltip( name )

                        icon.ModelPath = modelPath
                        icon.ModelName = name

                        icon.DoClick = selectModel
                        icon.OpenMenu = openMenu

                do

                    updateAvalibleModels = ->
                        unless icons\IsValid!
                            return

                        allowedPlayerModels = {}
                        isFemalePrison = Jailbreak.IsFemalePrison!

                        for modelPath in *Jailbreak.PlayerModels[ TEAM_PRISONER ][ isFemalePrison ]
                            allowedPlayerModels[ modelPath ] = true

                        for modelPath in *Jailbreak.PlayerModels[ TEAM_GUARD ][ isFemalePrison ]
                            allowedPlayerModels[ modelPath ] = true

                        for icon in *icons\GetChildren!
                            visible = AllowCustomPlayerModels\GetBool! or allowedPlayerModels[ icon.ModelPath ]
                            if icon\IsVisible! ~= visible
                                icon\SetVisible( visible )
                                icons\InvalidateLayout!

                    timer.Create( "Jailbreak::PlayerModels", 0.5, 0, updateAvalibleModels )
                    updateAvalibleModels!

                sheet\AddSheet( "#smwidget.model", panel, "icon16/user_edit.png" )

            -- Colors Tab
            do

                panel = window\Add( "DPanel" )
                panel\DockPadding( 8, 8, 8, 8 )

                scrollPanel = panel\Add( "DScrollPanel" )
                scrollPanel\Dock( FILL )

                scrollPanel.PerformLayout = ( ... ) ->
                    canvas = scrollPanel\GetCanvas!
                    if canvas and canvas\IsValid!
                        margin = VMin( 1 )
                        canvas\DockPadding( margin, margin, margin, margin )

                    DScrollPanel.PerformLayout( ... )

                -- Player Color
                do

                    label = scrollPanel\Add( "DLabel" )
                    label\SetText( "#smwidget.color_plr" )
                    label\SetTextColor( black )
                    label\Dock( TOP )

                    playerColor = scrollPanel\Add( "DColorMixer" )
                    playerColor\SetAlphaBar( false )
                    playerColor\SetPalette( false )
                    playerColor\Dock( TOP )
                    playerColor\SetSize( 200, min( window\GetTall! / 3, 260 ) )

                    playerColor.ValueChanged = =>
                        vector = @GetVector!

                        entity = modelPreview.Entity
                        if entity and entity\IsValid!
                            entity\SetPlayerColor( vector )
                        else
                            timer.Simple 0, ->
                                if playerColor\IsValid!
                                    playerColor\ValueChanged!

                        PlayerColor\SetString( tostring( vector ) )

                    playerColor\SetVector( Vector( PlayerColor\GetString! ) )

                -- Weapon Color
                do

                    label = scrollPanel\Add( "DLabel" )
                    label\SetText( "#smwidget.color_wep" )
                    label\DockMargin( 0, 32, 0, 0 )
                    label\SetTextColor( black )
                    label\Dock( TOP )

                    weaponColor = scrollPanel\Add( "DColorMixer" )
                    weaponColor\SetAlphaBar( false )
                    weaponColor\SetPalette( false )
                    weaponColor\Dock( TOP )
                    weaponColor\SetSize( 200, min( window\GetTall! / 3, 260 ) )

                    weaponColor.ValueChanged = =>
                        PlayerWeaponColor\SetString( tostring( @GetVector! ) )

                    weaponColor\SetVector( Vector( PlayerWeaponColor\GetString! ) )

                sheet\AddSheet( "#smwidget.colors", panel, "icon16/paintcan.png" )

            -- Bodygroups Tab
            do

                panel = window\Add( "DPanel" )
                panel\DockPadding( 8, 8, 8, 8 )

                scrollPanel = panel\Add( "DScrollPanel" )
                scrollPanel\Dock( FILL )

                scrollPanel.PerformLayout = ( ... ) ->
                    canvas = scrollPanel\GetCanvas!
                    if canvas and canvas\IsValid!
                        margin = VMin( 1 )
                        canvas\DockPadding( margin, margin, margin, margin )

                    DScrollPanel.PerformLayout( ... )

                bodygroupsSheet = sheet\AddSheet( "#smwidget.bodygroups", panel, "icon16/text_list_bullets.png" )

                UpdateBodyGroups = ( pnl, value ) ->
                    previewEntity = modelPreview.Entity
                    if previewEntity
                        previewEntity\SetBodygroup( pnl.BodygroupID, Round( value ) )

                    str = Explode( " ", PlayerBodyGroups\GetString! )
                    if #str < pnl.BodygroupID + 1
                        for index = 1, pnl.BodygroupID + 1
                            str[ index ] = str[ index ] or 0

                    str[ pnl.BodygroupID + 1 ] = Round( value )
                    PlayerBodyGroups\SetString( concat( str, " " ) )

                SetSkin = ( value ) =>
                    value = floor( value )

                    previewEntity = modelPreview.Entity
                    if previewEntity
                        previewEntity\SetSkin( value )

                    PlayerSkin\SetString( value )

                -- Player Model
                SetupModel = ( modelName ) ->
                    unless scrollPanel\IsValid!
                        return

                    scrollPanel\Clear!

                    unless modelPreview\IsValid!
                        return

                    modelPreview\SetModel( FixModelPath( TranslatePlayerModel( modelName ) ) )

                    previewEntity = modelPreview.Entity
                    unless previewEntity
                        return

                    previewEntity\SetPos( previewOffset )
                    previewEntity\SetPlayerColor( Vector( PlayerColor\GetString! ) )

                    bodygroupsTab = bodygroupsSheet.Tab
                    if bodygroupsTab and bodygroupsTab\IsValid!
                        if bodygroupsTab\IsVisible!
                            bodygroupsTab\SetVisible( false )
                            bodygroupsTab\InvalidateParent!

                        -- Skin
                        skinCount = previewEntity\SkinCount! - 1
                        if skinCount > 0
                            skins = scrollPanel\Add( "DNumSlider" )
                            skins\Dock( TOP )
                            skins\SetText( "#jb.skin" )
                            skins\SetDark( true )
                            skins\SetTall( 50 )
                            skins\SetDecimals( 0 )
                            skins\SetMax( skinCount )
                            skins\SetValue( PlayerSkin\GetInt! )
                            skins.OnValueChanged = SetSkin

                            unless bodygroupsTab\IsVisible!
                                bodygroupsTab\SetVisible( true )
                                bodygroupsTab\InvalidateParent!

                        -- Bodygroups
                        groups = Explode( " ", PlayerBodyGroups\GetString! )
                        for index = 0, previewEntity\GetNumBodyGroups! - 1
                            if previewEntity\GetBodygroupCount( index ) <= 1
                                continue

                            bodygroup = scrollPanel\Add( "DNumSlider" )
                            bodygroup\Dock( TOP )

                            str = previewEntity\GetBodygroupName( index )
                            bodygroup\SetText( upper( sub( str, 1, 1 ) ) .. sub( str, 2 ) )

                            bodygroup\SetDark( true )
                            bodygroup\SetTall( 50 )
                            bodygroup\SetDecimals( 0 )
                            bodygroup.BodygroupID = index
                            bodygroup\SetMax( previewEntity\GetBodygroupCount( index ) - 1 )
                            bodygroup\SetValue( groups[ index + 1 ] or 0 )
                            bodygroup.OnValueChanged = UpdateBodyGroups

                            previewEntity\SetBodygroup( index, groups[ index + 1 ] or 0 )

                            unless bodygroupsTab\IsVisible!
                                bodygroupsTab\SetVisible( true )
                                bodygroupsTab\InvalidateParent!

                    sheet.tabScroller\InvalidateLayout!

                    -- Animations
                    sequence = previewEntity\SelectWeightedSequence( ACT_HL2MP_IDLE )
                    if sequence > 0
                        previewEntity\ResetSequence( sequence )

                hook.Add "PlayerModelChanged", window, ( _, modelName ) ->
                    SetupModel( modelName )
                    return

                SetupModel( Jailbreak.SelectedPlayerModel )

            -- Options Tab
            do

                panel = window\Add( "DPanel" )
                panel\DockPadding( 8, 8, 8, 8 )

                scrollPanel = panel\Add( "DScrollPanel" )
                scrollPanel\Dock( FILL )

                scrollPanel.PerformLayout = ( ... ) ->
                    canvas = scrollPanel\GetCanvas!
                    if canvas and canvas\IsValid!
                        margin = VMin( 1 )
                        canvas\DockPadding( margin, margin, margin, margin )

                    DScrollPanel.PerformLayout( ... )

                do

                    handsTransparency = scrollPanel\Add( "DNumSlider" )
                    handsTransparency\Dock( TOP )
                    handsTransparency\SetText( "#jb.hands-transparency" )
                    handsTransparency\SetDark( true )
                    handsTransparency\SetTall( 50 )
                    handsTransparency\SetDecimals( 2 )
                    handsTransparency\SetMax( 1 )

                    handsTransparency\SetValue( Jailbreak.HandsTransparency\GetFloat! )

                    handsTransparency.OnValueChanged = ( value ) =>
                        Jailbreak.HandsTransparency\SetFloat( value )

                do

                    notifyLifetime = scrollPanel\Add( "DNumSlider" )
                    notifyLifetime\Dock( TOP )
                    notifyLifetime\SetText( "#jb.pickup-notify-lifetime" )
                    notifyLifetime\SetDecimals( 0 )
                    notifyLifetime\SetDark( true )
                    notifyLifetime\SetTall( 50 )
                    notifyLifetime\SetMax( 60 )

                    notifyLifetime\SetValue( Jailbreak.PickupNotifyLifetime\GetInt! )

                    notifyLifetime.OnValueChanged = ( value ) =>
                        Jailbreak.PickupNotifyLifetime\SetInt( value )

                hook.Call( "ClientOptionsLoaded", nil, scrollPanel )

                sheet\AddSheet( "#jb.options", panel, "icon16/cog.png" )

    }
