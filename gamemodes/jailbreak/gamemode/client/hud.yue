Jailbreak = Jailbreak
:Run = hook
GM = GM

:Colors, :VMin, :GetTeamColor, :GetTeamColorUpacked = Jailbreak
:asparagus, :white, :black, :dark_grey, :light_grey, :red, :dark_white, :horizon, :butterfly_bush, :au_chico = Colors

:DrawRect, :SetMaterial, :SetDrawColor, :SetFont, :GetTextSize, :DrawText, :SetTextColor, :SetTextPos, :SetAlphaMultiplier, :DrawTexturedRectRotated = surface
:Clamp, :min, :max, :sin, :floor, :ceil, :Round, :Rand = math
:sub, :format, :match, :upper = string
:Create, :Register = vgui
:GetPhrase = language
FrameTime = FrameTime
Material = Material
CurTime = CurTime
IsValid = IsValid
EyePos = EyePos
Lerp = Lerp
:Add = hook

do

    sourceHUD = {
        CHudSecondaryAmmo: true
        CHudSuitPower: true
        CHudBattery: true
        CHudHealth: true
        CHudAmmo: true
    }

    GM.HUDShouldDraw = ( name ) =>
        if sourceHUD[ name ] or ( Jailbreak.PlayingTaunt and name == "CHudWeaponSelection" )
            return false

        return true

do

    OBS_MODE_IN_EYE = OBS_MODE_IN_EYE
    :IgnoreZ = cam

    GM.PreDrawViewModels = ->
        ply = Jailbreak.Player
        unless ply\IsValid! and ply\GetObserverMode! == OBS_MODE_IN_EYE
            return

        viewEntity = Jailbreak.ViewEntity
        unless viewEntity\IsPlayer! and viewEntity\Alive!
            return

        IgnoreZ( true )

        for index = 0, 2
            viewModel = viewEntity\GetViewModel( index )
            if IsValid( viewModel )
                viewModel\DrawModel!

        hands = viewEntity\GetHands!
        if IsValid( hands )
            hands\DrawModel!

        IgnoreZ( false )

do

    :GetRoundState, :GetRemainingTime, :GetWinningTeam, :Teams = Jailbreak
    ROUND_WAITING_PLAYERS = ROUND_WAITING_PLAYERS
    ROUND_RUNNING = ROUND_RUNNING
    ROUND_FINISHED = ROUND_FINISHED

    Jailbreak.Font( "Jailbreak::Winners", "Roboto Mono Bold Italic", 4 )
    Jailbreak.Font( "Jailbreak::RoundState", "Roboto Mono Medium", 4 )

    Add "HUDPaint", "Jailbreak::RoundInfo", ->
        state = GetRoundState!
        if state == ROUND_RUNNING
            return

        text = GetPhrase( "jb.round." .. state )
        if state ~= ROUND_WAITING_PLAYERS
            remainingTime = GetRemainingTime!
            if remainingTime == 0
                return

            text = format( text, remainingTime )

        SetFont( "Jailbreak::RoundState" )

        screenCenterX = Jailbreak.ScreenCenterX
        textWidth, textHeight = GetTextSize( text )
        x, y = screenCenterX - textWidth / 2, VMin( 1 )

        SetTextPos( x - 1, y - 1 )
        SetTextColor( black.r, black.g, black.b, 50 )
        DrawText( text )

        SetTextPos( x + 3, y + 3 )
        SetTextColor( black.r, black.g, black.b, 120 )
        DrawText( text )

        SetTextColor( white )
        SetTextPos( x, y )
        DrawText( text )

        y += textHeight

        if state == ROUND_FINISHED
            teamID = GetWinningTeam!
            r, g, b = dark_white.r, dark_white.g, dark_white.b

            if Teams[ teamID ]
                text = format( GetPhrase( "#jb.victory" ), GetPhrase( "jb.team." .. teamID ) )
                r, g, b = GetTeamColorUpacked( teamID )
            else
                text = GetPhrase( "#jb.draw" )

            text = "[" .. text .. "]"

            textWidth, textHeight = GetTextSize( text )
            x, y = screenCenterX - textWidth / 2, y

            SetTextPos( x - 1, y - 1 )
            SetTextColor( black.r, black.g, black.b, 50 )
            DrawText( text )

            SetTextPos( x + 3, y + 3 )
            SetTextColor( black.r, black.g, black.b, 120 )
            DrawText( text )

            SetTextColor( r, g, b, 255 )
            SetTextPos( x, y )
            DrawText( text )

do

    :TargetID, :DeathNotice = Jailbreak
    :Start, :End3D = cam
    view = { "type": "3D" }

    GM.HUDPaint = =>
        Start( view )
        Run( "HUDPaint3D" )
        End3D!

        if TargetID\GetBool!
            Run( "HUDDrawTargetID" )

        Run( "HUDDrawInfo", Jailbreak.Player )

        if DeathNotice\GetBool!
            Run( "DrawDeathNotice", 0.85, 0.04 )

do

    :VoiceChatMinDistance, :GetWeaponName, :IsProp, :FoodEatingTime, :RagdollLootingTime = Jailbreak
    OBS_MODE_IN_EYE = OBS_MODE_IN_EYE
    :ScreenToVector = gui
    :CursorVisible = vgui
    :GetCursorPos = input
    MASK_SHOT = MASK_SHOT
    :TraceLine = util

    trace, useDistance = { mask: MASK_SHOT }, 75 ^ 2

    Jailbreak.Font( "Jailbreak::TargetID", "Roboto Mono Bold", 2.5 )
    Jailbreak.Font( "Jailbreak::TargetID - Team", "Roboto Mono SemiBold Italic", 2.25 )
    Jailbreak.Font( "Jailbreak::TargetID - Health", "Roboto Mono", 1.8 )
    Jailbreak.Font( "Jailbreak::TargetID - Use", "Roboto Mono Bold", 2 )

    targetIDClasses = Jailbreak.TargetIDClasses
    unless targetIDClasses
        targetIDClasses = {
            prop_door_rotating: true
            sent_soccerball: true
            prop_ragdoll: true
            func_button: true
        }

        Jailbreak.TargetIDClasses = targetIDClasses

    models = {
        "models/props_junk/metal_paintcan001a.mdl": "#jb.paint-can"
        "models/props_junk/metal_paintcan001b.mdl": "#jb.paint-can"
        "models/props_junk/gascan001a.mdl": "#jb.gas-can"
    }

    GM.HUDDrawTargetID = =>
        ply = Jailbreak.Player
        unless ply\IsValid!
            return

        start = EyePos!
        trace.start = start

        filter = nil
        if ply\GetObserverMode! == OBS_MODE_IN_EYE
            target = Jailbreak.ViewEntity
            if target\IsValid!
                filter = target

        elseif ply\Alive! and not ply\IsPlayingTaunt!
            filter = ply

        screenCenterX = Jailbreak.ScreenCenterX
        mouseX, mouseY = screenCenterX, Jailbreak.ScreenCenterY

        isWorldClicking = ply\IsWorldClicking!
        if isWorldClicking and CursorVisible!
            mouseX, mouseY = GetCursorPos!

        trace.endpos = start + ScreenToVector( mouseX, mouseY ) * ( isWorldClicking and 1024 or VoiceChatMinDistance\GetInt! )
        trace.filter = filter

        traceResult = TraceLine( trace )
        if not traceResult.Hit or traceResult.HitWorld
            return

        entity = traceResult.Entity
        unless entity\IsValid!
            return

        entityType, text = 0, nil
        r, g, b = 255, 255, 255

        if entity\IsPlayer!
            unless entity\Alive!
                return

            r, g, b = entity\GetModelColorUnpacked!
            text = entity\Nick!
            entityType = 1
        elseif entity\IsRagdoll!
            text = entity\GetRagdollOwnerNickname!
            r, g, b = entity\GetModelColorUnpacked!
            entityType = 2
        elseif entity\IsWeapon!
            text = GetWeaponName( entity )
            entityType = 3
        elseif entity\IsFood!
            text = "#jb.food"
            entityType = 4
        elseif entity\IsButton!
            text = "#jb.func_button"
            entityType = 5
        else
            className = entity\GetClass!
            if IsProp( className )
                text, entityType = models[ entity\GetModel! ], 6

            elseif targetIDClasses[ className ]
                placeholder = "jb." .. className
                text = GetPhrase( placeholder )
                if text == placeholder
                    return

                entityType = 7

        if entityType == 0
            return

        x, y = 0, mouseY + VMin( 2 )

        if text ~= nil
            SetFont( "Jailbreak::TargetID" )
            textWidth, textHeight = GetTextSize( text )
            x = mouseX - textWidth / 2

            SetTextPos( x - 1, y - 1 )
            SetTextColor( black.r, black.g, black.b, 50 )
            DrawText( text )

            SetTextPos( x + 3, y + 3 )
            SetTextColor( black.r, black.g, black.b, 120 )
            DrawText( text )

            SetTextColor( r, g, b )
            SetTextPos( x, y )
            DrawText( text )

            y += textHeight

            if entityType == 1 and entity\IsDeveloper!
                text = "#jb.player.developer"

                SetFont( "Jailbreak::TargetID - Team" )
                textWidth, textHeight = GetTextSize( text )
                x = mouseX - textWidth / 2

                SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b, 100 )

                for sx = -2, 2
                    for sy = -2, 2
                        SetTextPos( x + sx, y + sy )
                        DrawText( text )

                SetTextColor( butterfly_bush.r, butterfly_bush.g, butterfly_bush.b )
                SetTextPos( x, y )
                DrawText( text )

                y += textHeight

        if entityType == 1 or entityType == 2
            if entityType == 1
                teamID = entity\Team!

                if entity\IsWarden!
                    text = "#jb.player.warden"
                elseif teamID == TEAM_GUARD
                    text = "#jb.player.guard"
                elseif teamID == TEAM_PRISONER
                    text = "#jb.player.prisoner"
                else
                    text = "#jb.unknown"

                r, g, b = GetTeamColorUpacked( teamID )

            else
                text = entity\Alive! and "#jb.player.unconscious" or "#jb.player.dead"
                r, g, b = dark_white.r, dark_white.g, dark_white.b

            SetFont( "Jailbreak::TargetID - Team" )
            textWidth, textHeight = GetTextSize( text )
            x = mouseX - textWidth / 2

            SetTextPos( x - 1, y - 1 )
            SetTextColor( black.r, black.g, black.b, 50 )
            DrawText( text )

            SetTextPos( x + 3, y + 3 )
            SetTextColor( black.r, black.g, black.b, 120 )
            DrawText( text )

            SetTextColor( r, g, b )
            SetTextPos( x, y )
            DrawText( text )

            y += textHeight

        text = nil

        if entityType == 1
            if entity\HasGodMode!
                text = "#jb.player.health.invincible"
                r, g, b = 254, 242, 0

            else

                frac = entity\Health! / ply\GetMaxHealth!
                if frac <= 0
                    text = "#jb.player.health.dead"
                elseif frac < 0.25
                    text = "#jb.player.health.half-dead"
                elseif frac < 0.5
                    text = "#jb.player.health.badly-wounded"
                elseif frac < 0.75
                    text = "#jb.player.health.wounded"
                elseif frac < 0.90
                    text = "#jb.player.health.hurt"
                else
                    text = "#jb.player.health.healthy"

                r, g, b = Lerp( frac, red.r, asparagus.r ), Lerp( frac, red.g, asparagus.g ), Lerp( frac, red.b, asparagus.b )

        else

            health = entity\Health!
            if health >= 1
                frac = max( 0, Round( 1 - ( health / entity\GetMaxHealth! ), 2 ) )
                if frac ~= 0
                    text = GetPhrase( "#jb.entity.damaged" ) .. " " .. ( frac * 100 ) .. "%"
                    r, g, b = dark_white.r, dark_white.g, dark_white.b

        if text ~= nil
            SetFont( "Jailbreak::TargetID - Health" )
            textWidth, textHeight = GetTextSize( text )
            x = mouseX - textWidth / 2

            SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b, 100 )

            for sx = -2, 2
                for sy = -2, 2
                    SetTextPos( x + sx, y + sy )
                    DrawText( text )

            SetTextColor( r, g, b )
            SetTextPos( x, y )
            DrawText( text )

            y += textHeight

        if start\DistToSqr( traceResult.HitPos ) > useDistance
            return

        keyName = input.LookupBinding( "use" )
        if ply\IsPlayer! and keyName ~= nil and ply\Alive!
            text, progress = nil, 0

            if entityType == 1
                weapon = ply\GetActiveWeapon!
                if IsValid( weapon ) and weapon\GetClass! == "jb_hands" and weapon\GetHoldType! == "fist"
                    text = "#jb.player.push"

            elseif entityType == 2
                useTime = ply\GetUseTime!
                if useTime ~= 0
                    progress = Clamp( useTime / RagdollLootingTime\GetInt!, 0, 1 )

                text = GetPhrase( "jb.player.search" )

            elseif entityType == 5
                text = "#jb.player.press-button"

            elseif entityType == 3
                if ply\HasWeapon( entity\GetClass! )
                    if ( entity\Clip1! > 0 or entity\Clip2! > 0 ) and ( ply\GetPickupAmmoCount( entity\GetPrimaryAmmoType! ) > 1 or ply\GetPickupAmmoCount( entity\GetSecondaryAmmoType! ) ~= 0 )
                        text = "#jb.player.pickup-ammo"

                else
                    text = "#jb.player.pickup-weapon"

            elseif entityType == 4
                useTime = ply\GetUseTime!
                if useTime ~= 0
                    progress = Clamp( useTime / FoodEatingTime\GetInt!, 0, 1 )

                text = GetPhrase( "jb.player.eat" )

            else

                className = entity\GetClass!
                if className == "prop_door_rotating"
                    if entity\IsDoorLocked!
                        text = "#jb.player.door-locked"
                    elseif entity\GetDoorState! == 0
                        text = "#jb.player.door-open"
                    else
                        text = "#jb.player.door-close"

            if text ~= nil
                keyName = upper( keyName )

                SetFont( "Jailbreak::TargetID - Use" )
                textWidth, textHeight = GetTextSize( text )
                margin = VMin( 0.5 )

                width, height = textWidth * 1.2, textHeight * 1.25
                x = mouseX - ( width + margin + height ) / 2
                y += ( height - textHeight ) / 2 + margin

                if progress ~= 0
                    SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
                    SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b )
                    DrawRect( x, y - ( height - textHeight ) / 2, height, height )

                    SetDrawColor( light_grey.r, light_grey.g, light_grey.b, 240 )

                    rectHeight = ceil( height * progress )
                    DrawRect( x, ( y - ( height - textHeight ) / 2 + height ) - rectHeight, height, rectHeight )

                else
                    if ply\KeyDown( 32 )
                        SetDrawColor( light_grey.r, light_grey.g, light_grey.b, 240 )
                        SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b )
                    else
                        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
                        SetTextColor( dark_white.r, dark_white.g, dark_white.b )

                    DrawRect( x, y - ( height - textHeight ) / 2, height, height )

                SetTextPos( x + ( height - GetTextSize( keyName ) ) / 2, y )
                DrawText( keyName )

                x += height + margin
                SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
                DrawRect( x, y - ( height - textHeight ) / 2, width, height )
                x += ( width - textWidth ) / 2

                SetTextColor( dark_white.r, dark_white.g, dark_white.b )

                SetTextPos( x, y )
                DrawText( text )

do

    speakingIcon = Material( "icon16/sound.png" )

    do

        Jailbreak.Font( "Jailbreak::VoiceChatIcon", "Roboto Mono Medium", 3 )
        alpha = 0

        Add "HUDDrawInfo", "Jailbreak::VoiceChatIcon", =>
            if @IsSpeaking!
                if alpha < 1
                    alpha = min( 1, alpha + FrameTime! )
            elseif alpha > 0
                alpha = max( 0, alpha - FrameTime! )
                if alpha < 0.01
                    alpha = 0

            if alpha == 0
                return

            SetAlphaMultiplier( alpha )

            iconSize = VMin( 12 )
            x, y = Jailbreak.ScreenCenterX, Jailbreak.ScreenHeight - iconSize / 2
            rotation = sin( CurTime! * 3 ) * 30

            SetMaterial( speakingIcon )

            SetDrawColor( black.r, black.g, black.b, 50 )
            DrawTexturedRectRotated( x - 1, y - 1, iconSize, iconSize, rotation )

            SetDrawColor( black.r, black.g, black.b, 120 )
            DrawTexturedRectRotated( x + 3, y + 3, iconSize, iconSize, rotation )

            SetDrawColor( 255, 255, 255, 255 )
            DrawTexturedRectRotated( x, y, iconSize, iconSize, rotation )

            text = GetPhrase( "jb.hud.speaking" )
            SetFont( "Jailbreak::VoiceChatIcon" )
            textWidth, textHeight = GetTextSize( text )
            x, y = ( Jailbreak.ScreenWidth - textWidth ) / 2, Jailbreak.ScreenHeight - iconSize - textHeight

            SetTextPos( x - 1, y - 1 )
            SetTextColor( black.r, black.g, black.b, 50 )
            DrawText( text )

            SetTextPos( x + 3, y + 3 )
            SetTextColor( black.r, black.g, black.b, 120 )
            DrawText( text )

            SetTextColor( 255, 255, 255 )
            SetTextPos( x, y )
            DrawText( text )

            SetAlphaMultiplier( 1 )

    -- Player status icons
    do

        :StatusIcons, :VoiceChatMaxDistance = Jailbreak
        render_SetMaterial = render.SetMaterial
        render_DrawSprite = render.DrawSprite
        LocalToWorld = LocalToWorld
        angle_zero = angle_zero

        typingIcon = Material( "icon16/comment_edit.png" )
        radioIcon = Material( "icon16/phone_sound.png" )
        isSpeaking = false

        Add "PostPlayerDraw", "Jailbreak::StatusIcons", =>
            unless StatusIcons\GetBool! and @Alive!
                return

            isSpeaking = @IsSpeaking!
            unless isSpeaking or @IsTyping!
                return

            origin = nil

            bone = @LookupBone( "ValveBiped.Bip01_Head1" )
            if bone and bone >= 0
                origin, angles = @GetBonePosition( bone )

                hitboxset = @GetHitboxSet!
                for hitbox = 0, @GetHitBoxCount( hitboxset )
                    if bone == @GetHitBoxBone( hitbox, hitboxset )
                        mins, maxs = @GetHitBoxBounds( hitbox, hitboxset )
                        origin = LocalToWorld( ( maxs + mins ) / 2, angle_zero, origin, angles ) + angles\Forward! * ( maxs[ 3 ] - mins[ 3 ] ) * 1.5
                        break

            else
                origin = @EyePos!
                origin[ 3 ] += 14

            distance = origin\Distance( EyePos! )
            if distance > VoiceChatMaxDistance\GetInt!
                return

            origin[ 3 ] = 1 + origin[ 3 ] + sin( CurTime! * 4 ) * 1.5
            render_SetMaterial( isSpeaking and ( @UsingSecurityRadio! and radioIcon or speakingIcon ) or typingIcon )
            render_DrawSprite( origin, 12, 12, white )

Jailbreak.Font( "Jailbreak::HUD", "Roboto Mono SemiBold Italic", 2 )

do

    Color = Color
    :date = os

    PANEL = {}

    PANEL.Init = =>
        placeholder = GetPhrase( "jb.unknown" )
        @PlaceholderName = placeholder
        @HeaderColor = dark_white
        @EntityName = placeholder

        @TimeX, @TimeY = 0, 0
        @Time = "00:00"

        @Health, @MaxHealth = 0, 0
        @Armor, @MaxArmor = 0, 0

        @HealthRectX, @HealthRectY = 0, 0
        @ArmorRectX, @ArmorRectY = 0, 0
        @BarsWidth, @BarsHeight = 0, 0

        @HealthTextX, @HealthTextY = 0, 0
        @HealthText, @ArmorText = "", ""
        @ArmorTextX, @ArmorTextY = 0, 0

        @HealthRects = {}
        @ArmorRects = {}

        Add "LanguageChanged", @, @InvalidateLayout
        @InvalidateLayout( true )

    PANEL.Think = =>
        time = date( "%H:%M" )
        if @Time ~= time
            @Time = time
            @InvalidateLayout!

        entity = Jailbreak.ViewEntity
        unless entity\IsValid!
            if @EntityName ~= @PlaceholderName
                @EntityName = @PlaceholderName
                @InvalidateLayout!

            return

        isPlayer = entity\IsPlayer!
        if @IsPlayer ~= isPlayer
            @IsPlayer = isPlayer

            unless isPlayer
                @Alive = false
                @Health = 0

            @InvalidateLayout!

        unless isPlayer
            if @Color ~= light_grey
                @Color = light_grey

            if entity\IsPlayerRagdoll!
                nickname = GetPhrase( entity\GetRagdollOwnerNickname! )
                if @EntityName ~= nickname
                    @EntityName = nickname
                    @InvalidateLayout!

            else

                className = "#jb." .. entity\GetClass!
                if @EntityName ~= className
                    @EntityName = className
                    @InvalidateLayout!

            return

        teamID = entity\Team!
        if @TeamID ~= teamID
            @TeamID = teamID
            @InvalidateLayout!

        nickname = entity\Nick!
        if @EntityName ~= nickname
            @EntityName = nickname
            @InvalidateLayout!

        alive, health = entity\Alive!, entity\Health!
        if health <= 0
            alive = false

        if @Alive ~= alive
            @Alive = alive
            unless alive
                @Health = 0
                @Armor = 0

            @InvalidateLayout!

        unless alive
            return

        if @Health ~= health
            @Health = health
            @InvalidateLayout!

        if @MaxHealth ~= entity\GetMaxHealth!
            @MaxHealth = entity\GetMaxHealth!
            @InvalidateLayout!

        if @Armor ~= entity\Armor!
            @Armor = entity\Armor!
            @InvalidateLayout!

        if @MaxArmor ~= entity\GetMaxArmor!
            @MaxArmor = entity\GetMaxArmor!
            @InvalidateLayout!

    PANEL.PerformLayout = =>
        @PlaceholderName = GetPhrase( "jb.unknown" )

        margin, offset = VMin( 0.25 ), VMin( 1 )
        width = Jailbreak.ScreenWidth / 6

        SetFont( "Jailbreak::HUD" )

        headerText = @EntityName
        if #headerText > 48
            headerText = sub( headerText, 1, 48 ) .. "..."

        headerTextWidth, headerTextHeight = GetTextSize( headerText )
        headerHeight = margin + headerTextHeight + margin
        headerTextX = offset

        width = max( width, headerTextX + headerTextWidth )

        @HeaderTextX, @HeaderTextY = headerTextX, ( headerHeight - headerTextHeight ) / 2
        @HeaderText = headerText
        @HeaderHeight = headerHeight
        @BackgroundY = headerHeight

        timeWidth, timeHeight = GetTextSize( @Time )
        width, height = max( width, headerTextX + headerTextWidth + margin + timeWidth + offset ), headerHeight

        rectCount = ceil( ( width - offset ) / ( offset + margin ) )
        width = offset + rectCount * ( offset + margin ) + offset - margin

        @TimeX, @TimeY = width - timeWidth - offset, ( headerHeight - timeHeight ) / 2

        if @Alive
            @HeaderColor = GetTeamColor( @TeamID )

            healthRects = @HealthRects
            for index = 1, #healthRects
                healthRects[ index ] = nil

            healthFrac = @Health / @MaxHealth
            health = rectCount * Clamp( healthFrac, 0, 1 )
            healthCount = ceil( health )

            isOverhealth, overhealth, overhealthCount = false, nil, nil
            if healthFrac > 1
                isOverhealth = true
                overhealth = rectCount * Clamp( healthFrac - 1, 0, 1 )
                overhealthCount = ceil( overhealth )

            x, y = offset, height + offset
            @HealthRectX, @HealthRectY = x - margin, y - margin

            SetFont( "Jailbreak::HUD" )
            healthText, armorText = format( GetPhrase( "jb.hud.health" ), @Health, @MaxHealth ), format( GetPhrase( "jb.hud.armor" ), @Armor, @MaxArmor )
            @HealthText, @ArmorText = healthText, armorText

            healthTextWidth, healthTextHeight = GetTextSize( healthText )
            armorTextWidth, armorTextHeight = GetTextSize( armorText )

            rectHeight = margin + max( healthTextHeight, armorTextHeight ) + margin

            barsWidth, barsHeight = width - offset * 2 + margin * 2, margin + rectHeight + margin
            @BarsWidth, @BarsHeight = barsWidth, barsHeight

            @HealthTextX, @HealthTextY = x + ( barsWidth - healthTextWidth ) / 2, y + ( rectHeight - healthTextHeight ) / 2

            backgroundHeight = offset + rectHeight

            for index = 1, healthCount
                rect = { x, y, offset, rectHeight, asparagus }
                if isOverhealth
                    if index <= overhealthCount
                        if index == overhealthCount and overhealthCount ~= overhealth
                            frac = overhealth % 1
                            rect[ 5 ] = Color( Lerp( frac, asparagus.r, butterfly_bush.r ), Lerp( frac, asparagus.g, butterfly_bush.g ), Lerp( frac, asparagus.b, butterfly_bush.b ) )
                        else
                            rect[ 5 ] = butterfly_bush

                elseif index == healthCount
                    if healthCount ~= health
                        frac = health % 1
                        rect[ 5 ] = Color( Lerp( frac, red.r, asparagus.r ), Lerp( frac, red.g, asparagus.g ), Lerp( frac, red.b, asparagus.b ), floor( frac * 255 ) )
                        rect[ 3 ] *= frac

                healthRects[ index ] = rect
                x += offset + margin

            armor = @Armor
            if armor > 0
                armorRects = @ArmorRects
                for index = 1, #armorRects
                    armorRects[ index ] = nil

                armorFrac = armor / @MaxArmor
                armor = rectCount * Clamp( armorFrac, 0, 1 )
                armorCount = ceil( armor )

                isOverarmor, overarmor, overarmorCount = false, nil, nil
                if armorFrac > 1
                    isOverarmor = true
                    overarmor = rectCount * Clamp( armorFrac - 1, 0, 1 )
                    overarmorCount = ceil( overarmor )

                x, y = offset, y + offset + rectHeight + margin
                @ArmorRectX, @ArmorRectY = x - margin, y - margin

                @ArmorTextX, @ArmorTextY = x + ( barsWidth - armorTextWidth ) / 2, y + ( rectHeight - armorTextHeight ) / 2

                for index = 1, armorCount
                    rect = { x, y, offset, rectHeight, horizon }
                    if isOverarmor
                        if index <= overarmorCount
                            if index == overarmorCount and overarmorCount ~= overarmor
                                frac = overarmor % 1
                                rect[ 5 ] = Color( Lerp( frac, horizon.r, au_chico.r ), Lerp( frac, horizon.g, au_chico.g ), Lerp( frac, horizon.b, au_chico.b ) )
                            else
                                rect[ 5 ] = au_chico

                    elseif index == armorCount and armorCount ~= armor
                        frac = armor % 1
                        rect[ 5 ] = Color( Lerp( frac, red.r, horizon.r ), Lerp( frac, red.g, horizon.g ), Lerp( frac, red.b, horizon.b ), floor( frac * 255 ) )
                        rect[ 3 ] *= frac

                    armorRects[ index ] = rect
                    x += offset + margin

                backgroundHeight += offset + margin + rectHeight

            backgroundHeight += offset

            @BackgroundHeight = backgroundHeight
            height += backgroundHeight

        else
            @HeaderColor = dark_white

            text = GetPhrase( "jb.player.dead" )
            @RectText = text

            rectTextWidth, rectTextHeight = GetTextSize( text )

            backgroundHeight = margin + rectTextHeight + margin
            @RectTextY = headerHeight + ( backgroundHeight - rectTextHeight ) / 2
            @BackgroundHeight = backgroundHeight
            height += backgroundHeight

            @RectTextX = ( max( 1, width - rectTextWidth ) ) / 2

        @SetSize( width, height )
        @InvalidateParent!

    PANEL.Paint = ( width, height ) =>
        headerColor = @HeaderColor
        SetDrawColor( headerColor.r, headerColor.g, headerColor.b, 240 )
        DrawRect( 0, 0, width, @HeaderHeight )

        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
        DrawRect( 0, @BackgroundY, width, @BackgroundHeight )

        SetFont( "Jailbreak::HUD" )

        SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b )
        SetTextPos( @HeaderTextX, @HeaderTextY )
        DrawText( @HeaderText )

        SetTextPos( @TimeX, @TimeY )
        DrawText( @Time )

        if @Alive

            SetDrawColor( light_grey.r, light_grey.g, light_grey.b, 25 )
            DrawRect( @HealthRectX, @HealthRectY, @BarsWidth, @BarsHeight )

            color = nil
            for rect in *@HealthRects
                color = rect[ 5 ]
                SetDrawColor( color.r, color.g, color.b, color.a )
                DrawRect( rect[ 1 ], rect[ 2 ], rect[ 3 ], rect[ 4 ] )

            SetFont( "Jailbreak::HUD" )

            x, y = @HealthTextX, @HealthTextY
            text = @HealthText

            SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b, 100 )

            for sx = -2, 2
                for sy = -2, 2
                    SetTextPos( x + sx, y + sy )
                    DrawText( text )

            SetTextColor( dark_white.r, dark_white.g, dark_white.b )
            SetTextPos( x, y )
            DrawText( text )

            if @Armor > 0

                SetDrawColor( light_grey.r, light_grey.g, light_grey.b, 25 )
                DrawRect( @ArmorRectX, @ArmorRectY, @BarsWidth, @BarsHeight )

                for rect in *@ArmorRects
                    color = rect[ 5 ]
                    SetDrawColor( color.r, color.g, color.b, color.a )
                    DrawRect( rect[ 1 ], rect[ 2 ], rect[ 3 ], rect[ 4 ] )

                x, y = @ArmorTextX, @ArmorTextY
                text = @ArmorText

                SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b, 100 )

                for sx = -2, 2
                    for sy = -2, 2
                        SetTextPos( x + sx, y + sy )
                        DrawText( text )

                SetTextColor( dark_white.r, dark_white.g, dark_white.b )
                SetTextPos( x, y )
                DrawText( text )

        else

            SetTextColor( dark_white.r, dark_white.g, dark_white.b )
            SetTextPos( @RectTextX, @RectTextY )
            DrawText( @RectText )

    Register( "Jailbreak::HUDInfo", PANEL, "Panel" )

do

    lightning_delete = Material( "icon16/lightning_delete.png" )
    lightning_add = Material( "icon16/lightning_add.png" )
    lightning = Material( "icon16/lightning.png" )

    PANEL = {}

    PANEL.Init = =>
        @LineColor = dark_white
        @Color = dark_grey
        @SetAlpha( 0 )

        @SuitPowerFraction = 1
        @Direction = true
        @Value = 100

        @RotateOffset = 0
        @IconRotate = 0

        @InvalidateLayout( true )

    PANEL.Think = =>
        entity = Jailbreak.ViewEntity
        unless entity\IsValid! and entity\IsPlayer!
            return

        unless entity\Alive!
            if @GetAlpha! ~= 0
                @SetAlpha( 0 )

            return

        @IconRotate = @RotateOffset + sin( CurTime! * 2 ) * 15

        teamID = entity\Team!
        if @TeamID ~= teamID
            @TeamID = teamID
            @Color = entity\GetTeamColor!

        value, oldValue = entity\GetSuitPower!, @Value
        fraction = value / 100

        if oldValue ~= value
            color = @Color
            @LineColor = Color( Lerp( fraction, red.r, color.r ), Lerp( fraction, red.g, color.g ), Lerp( fraction, red.b, color.b ) )
            @SuitPowerFraction = fraction

            if fraction % 1 == 0
                @InvalidateLayout!

            @Direction = value > oldValue
            @Value = value

        alpha = @GetAlpha!
        if fraction == 1
            if alpha > 0
                alpha = max( 0, alpha - FrameTime! * 255 * 2 )
                @SetAlpha( alpha )
        elseif alpha < 255
            alpha = min( 255, alpha + FrameTime! * 255 * 4 )
            @SetAlpha( alpha )

    PANEL.PerformLayout = =>
        width, height = VMin( 4 ), @GetTall!
        margin = VMin( 0.25 )

        lineHeight = VMin( 1.5 )
        lineBackgroundWidth, lineBackgroundHeight = width - margin * 2, lineHeight - margin
        lineBackgroundX, lineBackgroundY = margin, height - ( lineHeight + margin )

        @LineBackgroundWidth, @LineBackgroundHeight = lineBackgroundWidth, lineBackgroundHeight
        @LineBackgroundX, @LineBackgroundY = lineBackgroundX, lineBackgroundY

        @LineWidth, @LineHeight = lineBackgroundWidth - margin * 2, lineBackgroundHeight - margin * 2
        @LineX, @LineY = lineBackgroundX + margin, lineBackgroundY + margin

        iconSize = floor( min( width, height - lineHeight ) / 2 )
        @IconX, @IconY = width / 2, ( height - lineHeight ) / 2
        @IconSize = iconSize

        @RotateOffset = Rand( 1, 10 )
        @SetWide( width )

    PANEL.Paint = ( width, height ) =>
        fraction = @SuitPowerFraction
        if fraction == 1 and @GetAlpha! == 0
            return

        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
        DrawRect( 0, 0, width, height )

        if fraction == 1
            SetMaterial( lightning )
        elseif @Direction
            SetMaterial( lightning_add )
        else
            SetMaterial( lightning_delete )

        SetDrawColor( 255, 255, 255 )
        DrawTexturedRectRotated( @IconX, @IconY, @IconSize, @IconSize, @IconRotate )

        SetDrawColor( light_grey.r, light_grey.g, light_grey.b, 25 )
        DrawRect( @LineBackgroundX, @LineBackgroundY, @LineBackgroundWidth, @LineBackgroundHeight )

        SetDrawColor( @LineColor )
        DrawRect( @LineX, @LineY, @LineWidth * fraction, @LineHeight )

    Register( "Jailbreak::HUDPower", PANEL, "Panel" )

do

    :GetWeaponName = Jailbreak

    PANEL = {}

    PANEL.Init = =>
        @HeaderColor = dark_white
        @AmmoTextColor = white

        @WeaponName = ""
        @AmmoText = ""

        @PrimaryCount, @SecondaryCount = -1, -1
        @Clip1, @Clip2 = -1, -1

        @WeaponNameX, @WeaponNameY = 0, 0
        @AmmoTextX, @AmmoTextY = 0, 0
        @RectHeight = 0

        Add "LanguageChanged", @, @InvalidateLayout
        @InvalidateLayout( true )

    PANEL.Think = =>
        entity = Jailbreak.ViewEntity
        unless entity\IsValid! and entity\IsPlayer! and entity\Alive!
            if @HeaderColor ~= dark_white
                @HeaderColor = dark_white
                @InvalidateLayout!

            weaponName = GetPhrase( "jb.nothing" )
            if @WeaponName ~= weaponName
                @WeaponName = weaponName
                @InvalidateLayout!

            if @AmmoTextColor ~= dark_white
                @AmmoTextColor = dark_white
                @InvalidateLayout!

            text = GetPhrase( "jb.unknown" )
            if @AmmoText ~= text
                @AmmoText = text
                @InvalidateLayout!

            return

        headerColor = GetTeamColor( entity\Team! )
        if @HeaderColor ~= headerColor
            @HeaderColor = headerColor
            @InvalidateLayout!

        weapon = entity\GetActiveWeapon!
        unless weapon\IsValid!
            weaponName = GetPhrase( "jb.nothing" )
            if @WeaponName ~= weaponName
                @WeaponName = weaponName
                @InvalidateLayout!

            if @AmmoTextColor ~= dark_white
                @AmmoTextColor = dark_white
                @InvalidateLayout!

            text = GetPhrase( "jb.unknown" )
            if @AmmoText ~= text
                @AmmoText = text
                @Clip1, @Clip2 = -1, -1
                @PrimaryCount, @SecondaryCount = -1, -1
                @InvalidateLayout!

            return

        weaponName = GetWeaponName( weapon )
        if @WeaponName ~= weaponName
            @WeaponName = weaponName
            @InvalidateLayout!

        clip1 = weapon\Clip1!
        if @Clip1 ~= clip1
            @Clip1 = clip1
            @InvalidateLayout!

        clip2 = weapon\Clip2!
        if @Clip2 ~= clip2
            @Clip2 = clip2
            @InvalidateLayout!

        primaryAmmoType, primaryAmmoCount = weapon\GetPrimaryAmmoType!, -1
        if primaryAmmoType >= 0
            primaryAmmoCount = entity\GetAmmoCount( primaryAmmoType )

        if @PrimaryCount ~= primaryAmmoCount
            @PrimaryCount = primaryAmmoCount
            @InvalidateLayout!

        secondaryAmmoType, secondaryAmmoCount = weapon\GetSecondaryAmmoType!, -1
        if secondaryAmmoType >= 0
            secondaryAmmoCount = entity\GetAmmoCount( secondaryAmmoType )

        if @SecondaryCount ~= secondaryAmmoCount
            @SecondaryCount = secondaryAmmoCount
            @InvalidateLayout!

    PANEL.PerformLayout = =>
        width, height = VMin( 4 ), 0
        margin1, margin2 = VMin( 0.25 ), VMin( 1 )

        SetFont( "Jailbreak::HUD" )
        weaponNameWidth, weaponNameHeight = GetTextSize( @WeaponName )
        width = max( width, margin2 + weaponNameWidth + margin2 )
        height += margin1 + weaponNameHeight + margin1

        text = ""

        clip1, primaryCount = @Clip1, @PrimaryCount
        if clip1 >= 0
            text ..= clip1
            if primaryCount >= 1
                text ..= " / " .. primaryCount
        elseif primaryCount >= 0
            text ..= primaryCount

        clip2, secondaryCount = @Clip2, @SecondaryCount
        if clip2 >= 1
            text ..= " ( " .. clip2
            if secondaryCount >= 1
                text ..= " / " .. secondaryCount
            text ..= " )"
        elseif secondaryCount >= 1
            text ..= " ( " .. secondaryCount .. " )"

        if #text == 0
            text = GetPhrase( "jb.unknown" )
            @AmmoTextColor = dark_white
        else
            @AmmoTextColor = white

        @AmmoText = text

        ammoTextWidth, ammoTextHeight = GetTextSize( text )
        height += margin1 + ammoTextHeight + margin1

        width = max( width, margin2 + ammoTextWidth + margin2 )

        headerHeight = margin1 + weaponNameHeight + margin1
        @HeaderHeight = headerHeight

        rectHeight = height - headerHeight
        @RectHeight = rectHeight

        @WeaponNameX, @WeaponNameY = ( width - weaponNameWidth ) / 2, ( headerHeight - weaponNameHeight ) / 2
        @AmmoTextX, @AmmoTextY = ( width - ammoTextWidth ) / 2, headerHeight + ( rectHeight - ammoTextHeight ) / 2

        @SetSize( width, height )

    PANEL.Paint = ( width, height ) =>
        headerColor = @HeaderColor
        SetDrawColor( headerColor.r, headerColor.g, headerColor.b, 240 )
        DrawRect( 0, 0, width, @HeaderHeight )

        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
        DrawRect( 0, @HeaderHeight, width, @RectHeight )

        SetFont( "Jailbreak::HUD" )

        SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b )
        SetTextPos( @WeaponNameX, @WeaponNameY )
        DrawText( @WeaponName )

        SetTextPos( @AmmoTextX, @AmmoTextY )
        SetTextColor( @AmmoTextColor )
        DrawText( @AmmoText )

    Register( "Jailbreak::HUDAmmo", PANEL, "Panel" )

do


    PANEL = {}

    PANEL.Init = =>
        @Info = @Add( "Jailbreak::HUDInfo" )
        @Power = @Add( "Jailbreak::HUDPower" )
        @Ammo = @Add( "Jailbreak::HUDAmmo" )
        @Dock( BOTTOM )

        @InvalidateLayout( true )

    PANEL.PerformLayout = =>
        margin = VMin( 1 )
        @DockMargin( margin, 0, margin, margin )
        @SetZPos( -1000 )

        width = @GetWide!

        info, power, ammo = @Info, @Power, @Ammo
        info\SetPos( 0, 0 )

        infoWidth, infoHeight = info\GetSize!
        power\SetPos( infoWidth + margin / 2, infoHeight - power\GetTall! )
        power\SetTall( infoHeight - ( info.HeaderHeight or 0 ) )

        ammoWidth, ammoHeight = ammo\GetSize!
        ammo\SetPos( width - ammoWidth, infoHeight - ammoHeight )

        @SetSize( width, infoHeight )

    Register( "Jailbreak::HUD", PANEL, "Panel" )

Add "InitPostEntity", "Jailbreak::HUD", ->
    if IsValid( Jailbreak.HUD )
        return

    Jailbreak.HUD = Create( "Jailbreak::HUD", GetHUDPanel! )

do

    Jailbreak.Font( "Jailbreak::PickupNotices", "Roboto Mono Bold", 1.5 )
    :PickupNotifyLifetime = Jailbreak

    PANEL = {}

    PANEL.Init = =>
        @SetAlpha( 0 )
        @Dock( BOTTOM )

        icon = @Add( "DImage" )
        @Icon = icon

        icon\Dock( LEFT )

        label = @Add( "DLabel" )
        @Label = label

        label\SetFont( "Jailbreak::PickupNotices" )
        label\SetContentAlignment( 5 )
        label\Dock( FILL )

        @InvalidateLayout( true )

    PANEL.Think = =>
        time = @Time
        unless time
            return

        alpha = @GetAlpha!
        if ( CurTime! - time ) > PickupNotifyLifetime\GetInt!
            if alpha > 0
                @SetAlpha( alpha - FrameTime! * 255 )
            else
                @Remove!

        elseif alpha < 255
            @SetAlpha( alpha + FrameTime! * 512 )

    PANEL.PerformLayout = =>
        margin = VMin( 0.5 )
        @DockPadding( margin, margin, margin, margin )

        textHeight = select( 2, @Label\GetTextSize! )
        height = margin + textHeight + margin
        @SetTall( height )

        @Label\DockMargin( margin, 0, 0, 0 )
        @Icon\SetWide( textHeight )

    do

        tonumber = tonumber

        PANEL.Setup = ( name, pickupType, item, amount ) =>
            @Time = CurTime!

            label = @Label
            if IsValid( label )
                label\SetText( format( GetPhrase( "jb.hud.pickup" ), GetPhrase( name ) ) .. " x" .. ( ( tonumber( match( label\GetText!, "x(%d+)$" ) ) or 0 ) + amount ) )

            materialPath = "icon16/information.png"
            switch pickupType
                when 1
                    materialPath = "icon16/gun.png"
                when 2
                    switch item
                        when "jb.flashlight"
                            materialPath = "icon16/lightbulb.png"

                        when "jb.security.keys"
                            materialPath = "icon16/key.png"

                        when "jb.walkie-talkie"
                            materialPath = "icon16/phone.png"

                        when "jb.shock-collar"
                            materialPath = "icon16/lock.png"

                when 3
                    materialPath = "icon16/package_green.png"

            result = Run( "Jailbreak::GetPickupIcon", pickupType, item, amount )
            if result ~= nil
                materialPath = result

            @Icon\SetImage( materialPath )

            @InvalidateLayout( true )

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
        DrawRect( 0, 0, width, height )

    Register( "Jailbreak::PickupNotify", PANEL, "Panel" )

do

    PANEL = {}

    PANEL.Init = =>
        @Notices = {}

    PANEL.PerformLayout = =>
        screenWidth = Jailbreak.ScreenWidth
        width = ceil( screenWidth / 4 )

        @SetSize( width, Jailbreak.ScreenHeight )
        @SetPos( floor( ( screenWidth - width ) / 2 ), 0 )

    PANEL.AddNotify = ( name, ... ) =>
        notify = @Notices[ name ]
        unless IsValid( notify )
            notify = @Add( "Jailbreak::PickupNotify" )
            @Notices[ name ] = notify

        notify\Setup( name, ... )

    Register( "Jailbreak::PickupNotices", PANEL, "Panel" )

do

    addPickupNotify = ( ... ) ->
        pickupNotices = Jailbreak.PickupNotices
        unless IsValid( pickupNotices )
            pickupNotices = Create( "Jailbreak::PickupNotices" )
            Jailbreak.PickupNotices = pickupNotices

        unless IsValid( pickupNotices )
            return

        pickupNotices\AddNotify( ... )

    Jailbreak.AddPickupNotify = addPickupNotify

    do

        :GetWeaponName = Jailbreak

        GM.HUDWeaponPickedUp = ( weapon ) =>
            unless IsValid( weapon ) and weapon\IsWeapon!
                return

            addPickupNotify( GetWeaponName( weapon ), 1, weapon, 1 )

    GM.HUDItemPickedUp = ( itemName ) =>
        addPickupNotify( "#" .. itemName, 2, itemName, 1 )

    GM.HUDAmmoPickedUp = ( itemName, amount ) =>
        addPickupNotify( "#" .. itemName .. "_ammo", 3, itemName, amount )

GM.PickupHistory = nil
GM.PickupHistoryLast = nil
GM.PickupHistoryWide = nil
GM.PickupHistoryTop = nil
GM.PickupHistoryCorner = nil
GM.HUDDrawPickupHistory = nil
