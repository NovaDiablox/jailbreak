Jailbreak = Jailbreak
hook_Run = hook.Run
GM = GM

:Colors, :VMin = Jailbreak
:asparagus, :white, :black, :dark_grey, :light_grey, :red, :dark_white, :turquoise = Colors

:SetMaterial, :SetDrawColor, :SetFont, :GetTextSize, :DrawText, :SetTextColor, :SetTextPos, :SetAlphaMultiplier, :DrawTexturedRectRotated = surface
:Clamp, :min, :max, :sin, :floor = math
:sub, :format = string
:GetPhrase = language
FrameTime = FrameTime
Material = Material
CurTime = CurTime
EyePos = EyePos
Lerp = Lerp

ROUND_WAITING_PLAYERS = ROUND_WAITING_PLAYERS
ROUND_RUNNING = ROUND_RUNNING
ROUND_ENDED = ROUND_ENDED

:GetName, :GetColor = team

:SourceHUD = Jailbreak
for className in *SourceHUD
    SourceHUD[ className ] = true

GM.HUDShouldDraw = ( name ) =>
    if SourceHUD[ name ] or ( Jailbreak.PlayingTaunt and name == "CHudWeaponSelection" )
        return false

    return true

do

    :GetRoundState, :GetRemainingTime, :GetWinningTeam, :Teams = Jailbreak

    Jailbreak.Font( "Jailbreak::Winners", "Roboto Mono Bold Italic", 4 )
    Jailbreak.Font( "Jailbreak::RoundState", "Roboto Mono Medium", 4 )

    GM.HUDPaint = =>
        hook_Run( "HUDDrawInfo", Jailbreak.Player )

        if @TargetID\GetBool!
            hook_Run( "HUDDrawTargetID" )

        hook_Run( "HUDDrawPickupHistory" )

        if @DeathNotice\GetBool!
            hook_Run( "DrawDeathNotice", 0.85, 0.04 )

        state = GetRoundState!
        if state == ROUND_RUNNING
            return

        text = GetPhrase( "jb.round." .. state )
        if state ~= ROUND_WAITING_PLAYERS
            remainingTime = GetRemainingTime!
            if remainingTime == 0
                return

            text = format( text, remainingTime )

        SetFont( "Jailbreak::RoundState" )

        screenCenterX = Jailbreak.ScreenCenterX
        textWidth, textHeight = GetTextSize( text )
        x, y = screenCenterX - textWidth / 2, VMin( 1 )

        SetTextPos( x - 1, y - 1 )
        SetTextColor( black.r, black.g, black.b, 50 )
        DrawText( text )

        SetTextPos( x + 3, y + 3 )
        SetTextColor( black.r, black.g, black.b, 120 )
        DrawText( text )

        SetTextColor( white )
        SetTextPos( x, y )
        DrawText( text )

        if state == ROUND_ENDED
            teamID, color = GetWinningTeam!, nil
            if Teams[ teamID ]
                text = format( GetPhrase( "#jb.victory" ), GetPhrase( GetName( teamID ) ) )
                color = GetColor( teamID )
            else
                text = GetPhrase( "#jb.draw" )
                color = dark_white

            text = "[" .. text .. "]"

            textWidth2, textHeight2 = GetTextSize( text )
            x, y = screenCenterX - textWidth2 / 2, y + ( textHeight + textHeight2 ) / 2

            SetTextPos( x - 1, y - 1 )
            SetTextColor( black.r, black.g, black.b, 50 )
            DrawText( text )

            SetTextPos( x + 3, y + 3 )
            SetTextColor( black.r, black.g, black.b, 120 )
            DrawText( text )

            SetTextColor( color )
            SetTextPos( x, y )
            DrawText( text )

do

    :Translate, :VoiceChatMinDistance = Jailbreak
    :ScreenToVector = gui
    :CursorVisible = vgui
    :GetCursorPos = input
    EyeAngles = EyeAngles
    MASK_SHOT = MASK_SHOT
    :TraceLine = util

    trace = {
        mask: MASK_SHOT
    }

    Jailbreak.Font( "Jailbreak::TargetID", "Roboto Mono Bold", 2.6 )
    Jailbreak.Font( "Jailbreak::TargetIDSmall", "Roboto Mono SemiBold Italic", 2.6 )

    GM.HUDDrawTargetID = =>
        ply = Jailbreak.Player
        unless ply\IsValid!
            return

        start = EyePos!
        trace.start = start

        filter = nil
        if ply\GetObserverMode! == OBS_MODE_IN_EYE
            target = Jailbreak.ViewEntity
            if target\IsValid!
                filter = target

        elseif ply\Alive! and not Jailbreak.PlayingTaunt
            filter = ply

        screenCenterX = Jailbreak.ScreenCenterX

        mouseX, mouseY = GetCursorPos!
        if mouseX == 0 and mouseY == 0 or not CursorVisible!
            mouseX, mouseY = screenCenterX, Jailbreak.ScreenCenterY

        trace.endpos = start + ScreenToVector( mouseX, mouseY ) * 1024
        trace.filter = filter

        traceResult = TraceLine( trace )
        unless traceResult.Hit
            return

        if traceResult.HitWorld
            return

        entity = traceResult.Entity
        unless entity\IsValid!
            return

        isPlayerRagdoll = entity\IsPlayerRagdoll!
        isPlayer = entity\IsPlayer!
        color = white

        text = nil
        if isPlayer
            unless entity\Alive!
                return

            text = entity\Nick!
            color = entity\GetModelColor!
            frac = Clamp( entity\Health! / entity\GetMaxHealth!, 0, 1 )

            if ( color.r + color.g + color.b ) < 125
                color.r = Lerp( frac, red.r, color.r )
                color.g = Lerp( frac, red.g, color.g )
                color.b = Lerp( frac, red.b, color.b )
            else
                color.r = Lerp( frac, 0, color.r )
                color.g = Lerp( frac, 0, color.g )
                color.b = Lerp( frac, 0, color.b )

        elseif isPlayerRagdoll
            text = entity\GetNW2String( "owner-nickname", "unknown" )
            color = entity\GetModelColor!

        elseif entity\IsWeapon!
            printName = nil
            if entity\IsScripted!
                printName = entity.PrintName

            if printName
                printName = "#" .. printName
            else
                printName = entity\GetPrintName!

            if printName == "Scripted Weapon"
                printName = "#" .. entity\GetClass!

            text = Translate( printName )

        else

            className = entity\GetClass!
            if className == "class C_BaseEntity"
                className = "func_button"

            text = Translate( "#jb." .. className )

        offset = VMin( 2 )

        SetFont( "Jailbreak::TargetID" )
        textWidth, textHeight = GetTextSize( text )

        x = mouseX - textWidth / 2
        y = mouseY + offset

        SetTextPos( x - 1, y - 1 )
        SetTextColor( black.r, black.g, black.b, 50 )
        DrawText( text )

        SetTextPos( x + 3, y + 3 )
        SetTextColor( black.r, black.g, black.b, 120 )
        DrawText( text )

        SetTextColor( color )
        SetTextPos( x, y )
        DrawText( text )

        color = nil
        if isPlayer
            teamID = entity\Team!
            text = GetName( teamID )
            color = GetColor( teamID )
        elseif isPlayerRagdoll
            text = "#jb.player.corpse"
            color = dark_white
        else
            return

        SetFont( "Jailbreak::TargetIDSmall" )
        textWidth2, textHeight2 = GetTextSize( text )
        x, y = mouseX - textWidth2 / 2, y + ( textHeight + textHeight2 ) / 2

        SetTextPos( x - 1, y - 1 )
        SetTextColor( black.r, black.g, black.b, 50 )
        DrawText( text )

        SetTextPos( x + 3, y + 3 )
        SetTextColor( black.r, black.g, black.b, 120 )
        DrawText( text )

        SetTextColor( color )
        SetTextPos( x, y )
        DrawText( text )

do

    speakingIcon = Material( "icon16/sound.png", "mips" )

    do

        Jailbreak.Font( "Jailbreak::VoiceChatIcon", "Roboto Mono Medium", 3 )
        alpha = 0

        hook.Add "HUDDrawInfo", "Jailbreak::VoiceChatIcon", =>
            if @IsSpeaking!
                if alpha < 1
                    alpha = min( 1, alpha + FrameTime! * 4 )
            elseif alpha > 0
                alpha = max( 0, alpha - FrameTime! * 4 )

            if alpha == 0
                return

            SetAlphaMultiplier( alpha )

            iconSize = VMin( 12 )
            x, y = screenCenterX, Jailbreak.ScreenHeight - iconSize / 2
            rotation = sin( CurTime! * 3 ) * 30

            SetMaterial( speakingIcon )

            SetDrawColor( black.r, black.g, black.b, 50 )
            DrawTexturedRectRotated( x - 1, y - 1, iconSize, iconSize, rotation )

            SetDrawColor( black.r, black.g, black.b, 120 )
            DrawTexturedRectRotated( x + 3, y + 3, iconSize, iconSize, rotation )

            SetDrawColor( 255, 255, 255, 255 )
            DrawTexturedRectRotated( x, y, iconSize, iconSize, rotation )

            text = GetPhrase( "jb.hud.speaking" )
            SetFont( "Jailbreak::VoiceChatIcon" )
            textWidth, textHeight = GetTextSize( text )
            x, y = ( Jailbreak.ScreenWidth - textWidth ) / 2, Jailbreak.ScreenHeight - iconSize - textHeight

            SetTextPos( x - 1, y - 1 )
            SetTextColor( black.r, black.g, black.b, 50 )
            DrawText( text )

            SetTextPos( x + 3, y + 3 )
            SetTextColor( black.r, black.g, black.b, 120 )
            DrawText( text )

            SetTextColor( 255, 255, 255 )
            SetTextPos( x, y )
            DrawText( text )

            SetAlphaMultiplier( 1 )

    -- Player status icons
    do

        :StatusIcons, :VoiceChatMaxDistance = Jailbreak
        render_SetMaterial = render.SetMaterial
        render_DrawSprite = render.DrawSprite
        LocalToWorld = LocalToWorld
        :GetAll = player

        typingIcon = Material( "icon16/comment_edit.png", "mips" )

        hook.Add "PostDrawTranslucentRenderables", "Jailbreak::StatusIcons", ( drawingDepth, drawingSkybox ) ->
            if drawingDepth or drawingSkybox or not StatusIcons\GetBool!
                return

            eyePos = EyePos!
            for ply in *GetAll!
                if ply\IsLocalPlayer! or not ply\IsInGame!
                    continue

                isSpeaking = ply\IsSpeaking!
                unless isSpeaking or ply\IsTyping!
                    continue

                origin = nil

                headBoneID = ply\LookupBone( "ValveBiped.Bip01_Head1" )
                if headBoneID and headBoneID >= 0
                    origin, angles = ply\GetBonePosition( headBoneID )

                    hitboxset = ply\GetHitboxSet!
                    for hitbox = 0, ply\GetHitBoxCount( hitboxset )
                        if headBoneID == ply\GetHitBoxBone( hitbox, hitboxset )
                            mins, maxs = ply\GetHitBoxBounds( hitbox, hitboxset )
                            origin = LocalToWorld( ( maxs + mins ) / 2, angle_zero, origin, angles ) + angles\Forward! * ( maxs[ 3 ] - mins[ 3 ] ) * 1.5
                            break

                else
                    origin = ply\EyePos!
                    origin[ 3 ] += 14

                distance = origin\Distance( eyePos )
                if distance > VoiceChatMaxDistance\GetInt!
                    continue

                origin[ 3 ] = 1 + origin[ 3 ] + sin( CurTime! * 4 ) * 1.5
                render_SetMaterial( isSpeaking and speakingIcon or typingIcon )
                render_DrawSprite( origin, 12, 12, white )

do

    Jailbreak.Font( "Jailbreak::HUD", "Roboto Mono SemiBold Italic", 2 )

    gradient = Material( "gui/gradient", "smooth" )
    :DrawRect, :DrawTexturedRect = surface

    do

        :date = os

        PANEL = {}

        PANEL.Init = =>
            @Color = light_grey

            name = @Add( "DLabel" )
            @Name = name

            name\SetFont( "Jailbreak::HUD" )
            name\SetTextColor( dark_grey )
            name\SetContentAlignment( 4 )

            time = @Add( "DLabel" )
            @Time = time

            time\SetFont( "Jailbreak::HUD" )
            time\SetTextColor( dark_grey )
            time\SetContentAlignment( 6 )
            @InvalidateLayout( true )

        PANEL.PerformLayout = =>
            if @GetDock! ~= TOP
                @Dock( TOP )

            name = @Name
            if IsValid( name )
                name\DockMargin( VMin( 1 ), 0, 0, 0 )
                if name\GetDock! ~= FILL
                    name\Dock( FILL )

            time = @Time
            if IsValid( time )
                time\DockMargin( 0, 0, VMin( 0.5 ), 0 )
                if time\GetDock! ~= RIGHT
                    time\Dock( RIGHT )

        PANEL.Think = =>
            changed = false

            time = @Time
            if IsValid( time )
                text = date( "%H:%M" )
                if time\GetText! ~= text
                    time\SetText( text )
                    time\SizeToContentsX!
                    changed = true

            entity = Jailbreak.ViewEntity
            unless entity\IsValid!
                name = @Name
                if IsValid( name )
                    text = "unknown"
                    if name\GetText! ~= text
                        name\SetText( text )
                        changed = true

                return

            if entity\IsPlayer!
                if @ViewClass ~= nil
                    @ViewClass = nil
                    changed = true

                teamID = entity\Team!
                if @TeamID ~= teamID
                    @TeamID = teamID
                    changed = true

                name = @Name
                if IsValid( name )
                    nickname = entity\Nick!
                    if name\GetText! ~= nickname
                        name\SetText( nickname )
                        changed = true

                if changed
                    @Color = entity\GetTeamColor!

            else

                name = @Name
                if IsValid( name )
                    if entity\IsPlayerRagdoll!
                        nickname = entity\GetNW2String( "owner-nickname", "unknown" )
                        if name\GetText! ~= nickname
                            name\SetText( nickname )
                            changed = true

                    else
                        className = entity\GetClass!
                        if @ViewClass ~= className
                            @ViewClass = className
                            name\SetText( "#jb." .. className )
                            changed = true

                if changed
                   @Color = light_grey

            if changed
                parent = @GetParent!
                if parent and parent\IsValid!
                    parent\InvalidateLayout!

        PANEL.Paint = ( width, height ) =>
            color = @Color
            SetDrawColor( color.r, color.g, color.b )
            DrawRect( 0, 0, width, height )

        vgui.Register( "Jailbreak::HUDHeader", PANEL, "Panel" )

    do

        PANEL = {}

        PANEL.Init = =>
            @Material = CreateMaterial( "Jailbreak_HUD_Material", "UnlitGeneric", { ["$translucent"]: "1", ["$vertexcolor"]: "1" } )
            @Header = @Add( "Jailbreak::HUDHeader" )

            @Health, @MaxHealth = 0, 0
            @Armor, @MaxArmor = 0, 0
            @Alive = false

            @InvalidateLayout( true )
            hook.Add "LanguageChanged", @, @InvalidateLayout

        PANEL.CreateTexture = ( width, height ) =>
            texture = GetRenderTarget( "Jailbreak_HUD_Texture" .. width .. "x" .. height, width, height )

            material = @Material
            if material ~= nil
                material\SetTexture( "$basetexture", texture )
                material\Recompute!

            @Texture = texture

        do

            :PushRenderTarget, :ClearDepth, :Clear, :OverrideAlphaWriteEnable, :PopRenderTarget = render
            :Start2D, :End2D = cam
            pcall = pcall

            PANEL.UpdateTexture = ( func ) =>
                texture = @Texture
                unless texture
                    return

                if texture\IsError! or texture\IsErrorTexture!
                    return

                texture\Download!

                width, height = texture\Width!, texture\Height!
                PushRenderTarget( texture, 0, 0, width, height )
                Start2D!

                OverrideAlphaWriteEnable( true, true )

                ClearDepth!
                Clear( 0, 0, 0, 0 )

                if func ~= nil
                    ok, msg = pcall( func, width, height )
                    unless ok
                        ErrorNoHaltWithStack( msg )
                        SetDrawColor( 255, 150, 0 )
                        DrawRect( 0, 0, width, height )
                        draw.DrawText( msg, "Default", width / 2, 2, dark_grey, TEXT_ALIGN_CENTER )

                OverrideAlphaWriteEnable( false )

                End2D!
                PopRenderTarget!

        PANEL.Think = =>
            entity = Jailbreak.ViewEntity
            unless entity\IsValid!
                return

            isPlayer = entity\IsPlayer!
            if @IsPlayer ~= isPlayer
                @IsPlayer = isPlayer

                unless isPlayer
                    @Alive = alive
                    @Health = 0

                @InvalidateLayout!

            unless isPlayer
                return

            alive, health = entity\Alive!, entity\Health!
            if health <= 0
                alive = false

            if @Alive ~= alive
                @Alive = alive
                unless alive
                    @Health = 0
                    @Armor = 0

                @InvalidateLayout!

            unless alive
                return

            if @Health ~= health
                @Health = health
                @InvalidateLayout!

            if @MaxHealth ~= entity\GetMaxHealth!
                @MaxHealth = entity\GetMaxHealth!
                @InvalidateLayout!

            if @Armor ~= entity\Armor!
                @Armor = entity\Armor!
                @InvalidateLayout!

            if @MaxArmor ~= entity\GetMaxArmor!
                @MaxArmor = entity\GetMaxArmor!
                @InvalidateLayout!

        do

            bullet_white = Material( "icon16/bullet_white.png", "mips smooth"  )
            :ceil = math
            Color = Color

            PANEL.PerformLayout = =>
                offset = VMin( 0.5 )
                width, height = Jailbreak.ScreenWidth / 6, offset * 2

                headerTall = @Header\GetTall!
                @HeaderTall = headerTall

                size = floor( ( width - offset * 2 ) / 10 )

                alive = @Alive
                if alive
                    height += size
                    if @Armor > 0
                        height += offset + size

                else
                    SetFont( "Jailbreak::HUD" )
                    textWidth, textHeight = GetTextSize( GetPhrase( "jb.team.dead" ) )
                    width = max( width, textWidth + 2 * offset )
                    height += textHeight

                @CreateTexture( width, height )

                @UpdateTexture ( width, height ) ->
                    SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
                    DrawRect( 0, 0, width, height )

                    unless alive
                        SetFont( "Jailbreak::HUD" )
                        text = GetPhrase( "jb.team.dead" )
                        SetTextPos( ( width - GetTextSize( text ) ) / 2, offset )
                        SetTextColor( dark_white )
                        DrawText( text )
                        return

                    SetMaterial( bullet_white )

                    do

                        health = 10 * Clamp( @Health / @MaxHealth, 0, 1 )
                        healthCount = ceil( health )

                        for i = 1, healthCount
                            if i == healthCount and healthCount ~= health
                                frac = health % 1
                                SetDrawColor( Lerp( frac, red.r, asparagus.r ), Lerp( frac, red.g, asparagus.g ), Lerp( frac, red.b, asparagus.b ), floor( frac * 255 ) )
                            else
                                SetDrawColor( asparagus.r, asparagus.g, asparagus.b )

                            DrawTexturedRect( offset + ( size * ( i - 1 ) ), offset, size, size )

                    do

                        armor = 10 * Clamp( @Armor / @MaxArmor, 0, 1 )
                        armorCount = ceil( armor )

                        for i = 1, armorCount
                            if i == armorCount and armorCount ~= armor
                                frac = armor % 1
                                SetDrawColor( Lerp( frac, red.r, turquoise.r ), Lerp( frac, red.g, turquoise.g ), Lerp( frac, red.b, turquoise.b ), floor( frac * 255 ) )
                            else
                                SetDrawColor( turquoise.r, turquoise.g, turquoise.b )

                            DrawTexturedRect( offset + ( size * ( i - 1 ) ), offset * 2 + size, size, size )

                @SetSize( width, height + headerTall )
                @SetPos( 0, 0 )

                parent = @GetParent!
                if parent and parent\IsValid!
                    parent\InvalidateLayout!

        PANEL.Paint = ( width, height ) =>
            SetDrawColor( white )
            SetMaterial( @Material )
            DrawTexturedRect( 0, @HeaderTall, width, height - @HeaderTall )

        vgui.Register( "Jailbreak::HUDInfo", PANEL, "Panel" )

    do

        lightning_delete = Material( "icon16/lightning_delete.png", "mips" )
        lightning_add = Material( "icon16/lightning_add.png", "mips" )
        lightning = Material( "icon16/lightning.png", "mips" )

        PANEL = {}

        PANEL.Init = =>
            @LineColor = dark_white
            @SuitPowerFraction = 1
            @Color = dark_grey
            @Direction = true
            @SetAlpha( 0 )
            @Value = 100

        PANEL.Think = =>
            entity = Jailbreak.ViewEntity
            unless entity\IsValid! and entity\IsPlayer!
                return

            unless entity\Alive!
                if @GetAlpha! ~= 0
                    @SetAlpha( 0 )

                return

            teamID = entity\Team!
            if @TeamID ~= teamID
                @TeamID = teamID
                @Color = entity\GetTeamColor!

            value, oldValue = entity\GetSuitPower!, @Value
            fraction = value / 100

            if oldValue ~= value
                @LineColor = Color( Lerp( fraction, red.r, asparagus.r ), Lerp( fraction, red.g, asparagus.g ), Lerp( fraction, red.b, asparagus.b ) )
                @SuitPowerFraction = fraction

                if fraction % 1 == 0
                    @InvalidateLayout!

                @Direction = value > oldValue
                @Value = value

            alpha = @GetAlpha!
            if fraction == 1
                if alpha > 0
                    alpha = max( 0, alpha - FrameTime! * 255 * 2 )
                    @SetAlpha( alpha )
            elseif alpha < 255
                alpha = min( 255, alpha + FrameTime! * 255 * 4 )
                @SetAlpha( alpha )

        PANEL.PerformLayout = =>
            @LineHeight = VMin( 1 )
            @IconSize = floor( min( @GetSize! ) / 3 )

            SetFont( "Jailbreak::HUD" )
            text = GetPhrase( "jb.hud.stamina" )
            textWidth, textHeight = GetTextSize( text )
            @TextWidth, @TextHeight, @Text = textWidth, textHeight, text

            parent = @GetParent!
            if IsValid( parent )
                info = parent.Info
                if IsValid( info )
                    width, height = info\GetSize!
                    @SetSize( max( VMin( 4 ), textWidth + VMin( 2 ) ), height )
                    @SetPos( VMin( 1 ) + width, 0 )

        PANEL.Paint = ( width, height ) =>
            fraction = @SuitPowerFraction
            if fraction == 1 and @GetAlpha! == 0
                return

            textHeight = @TextHeight
            height -= textHeight

            SetDrawColor( @Color )
            DrawRect( 0, 0, width, textHeight )

            SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b )
            SetTextPos( ( width - @TextWidth ) / 2, 0 )
            SetFont( "Jailbreak::HUD" )
            DrawText( @Text )

            SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
            DrawRect( 0, textHeight, width, height )

            if fraction == 1
                SetMaterial( lightning )
            elseif @Direction
                SetMaterial( lightning_add )
            else
                SetMaterial( lightning_delete )

            lineHeight = @LineHeight
            size = @IconSize
            SetDrawColor( 255, 255, 255 )
            DrawTexturedRectRotated( width / 2, textHeight + ( height - lineHeight ) / 2, size, size, sin( CurTime! * 2 ) * 15 )

            SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 100 )
            DrawRect( 0, height - lineHeight + textHeight, width, lineHeight )

            SetDrawColor( @LineColor )
            DrawRect( 0, height - lineHeight + textHeight, width * fraction, lineHeight )

        vgui.Register( "Jailbreak::HUDPower", PANEL, "Panel" )

    do


        PANEL = {}

        PANEL.Init = =>
            @Info = @Add( "Jailbreak::HUDInfo" )
            @Power = @Add( "Jailbreak::HUDPower" )
            @InvalidateLayout( true )

        PANEL.PerformLayout = =>
            if @GetDock! ~= BOTTOM
                @Dock( BOTTOM )

            margin = VMin( 1 )
            @DockMargin( margin, 0, margin, margin )
            @SetTall( @Info\GetTall! )
            @SetZPos( -1000 )

            power = @Power
            if IsValid( power )
                power\InvalidateLayout!

        vgui.Register( "Jailbreak::HUD", PANEL, "Panel" )

if IsValid( Jailbreak.HUD )
    Jailbreak.HUD\Remove!

Jailbreak.HUD = vgui.Create( "Jailbreak::HUD", GetHUDPanel! )

hook.Add "InitPostEntity", "Jailbreak::HUD", ->
    if IsValid( Jailbreak.HUD )
        return

    Jailbreak.HUD = vgui.Create( "Jailbreak::HUD", GetHUDPanel! )
