Jailbreak = Jailbreak
hook_Run = hook.Run
GM = GM

:Colors, :VMin = Jailbreak
:asparagus, :white, :black, :dark_grey, :light_grey, :red, :dark_white, :horizon, :butterfly_bush, :au_chico = Colors

:SetMaterial, :SetDrawColor, :SetFont, :GetTextSize, :DrawText, :SetTextColor, :SetTextPos, :SetAlphaMultiplier, :DrawTexturedRectRotated = surface
:Clamp, :min, :max, :sin, :floor, :ceil = math
:sub, :format = string
:GetPhrase = language
FrameTime = FrameTime
Material = Material
CurTime = CurTime
EyePos = EyePos
Lerp = Lerp

ROUND_WAITING_PLAYERS = ROUND_WAITING_PLAYERS
ROUND_RUNNING = ROUND_RUNNING
ROUND_ENDED = ROUND_ENDED

:GetName, :GetColor = team

:SourceHUD = Jailbreak
for className in *SourceHUD
    SourceHUD[ className ] = true

GM.HUDShouldDraw = ( name ) =>
    if SourceHUD[ name ] or ( Jailbreak.PlayingTaunt and name == "CHudWeaponSelection" )
        return false

    return true

do

    :GetRoundState, :GetRemainingTime, :GetWinningTeam, :Teams = Jailbreak

    Jailbreak.Font( "Jailbreak::Winners", "Roboto Mono Bold Italic", 4 )
    Jailbreak.Font( "Jailbreak::RoundState", "Roboto Mono Medium", 4 )

    GM.HUDPaint = =>
        hook_Run( "HUDDrawInfo", Jailbreak.Player )

        if @TargetID\GetBool!
            hook_Run( "HUDDrawTargetID" )

        hook_Run( "HUDDrawPickupHistory" )

        if @DeathNotice\GetBool!
            hook_Run( "DrawDeathNotice", 0.85, 0.04 )

        state = GetRoundState!
        if state == ROUND_RUNNING
            return

        text = GetPhrase( "jb.round." .. state )
        if state ~= ROUND_WAITING_PLAYERS
            remainingTime = GetRemainingTime!
            if remainingTime == 0
                return

            text = format( text, remainingTime )

        SetFont( "Jailbreak::RoundState" )

        screenCenterX = Jailbreak.ScreenCenterX
        textWidth, textHeight = GetTextSize( text )
        x, y = screenCenterX - textWidth / 2, VMin( 1 )

        SetTextPos( x - 1, y - 1 )
        SetTextColor( black.r, black.g, black.b, 50 )
        DrawText( text )

        SetTextPos( x + 3, y + 3 )
        SetTextColor( black.r, black.g, black.b, 120 )
        DrawText( text )

        SetTextColor( white )
        SetTextPos( x, y )
        DrawText( text )

        if state == ROUND_ENDED
            teamID, color = GetWinningTeam!, nil
            if Teams[ teamID ]
                text = format( GetPhrase( "#jb.victory" ), GetPhrase( GetName( teamID ) ) )
                color = GetColor( teamID )
            else
                text = GetPhrase( "#jb.draw" )
                color = dark_white

            text = "[" .. text .. "]"

            textWidth2, textHeight2 = GetTextSize( text )
            x, y = screenCenterX - textWidth2 / 2, y + ( textHeight + textHeight2 ) / 2

            SetTextPos( x - 1, y - 1 )
            SetTextColor( black.r, black.g, black.b, 50 )
            DrawText( text )

            SetTextPos( x + 3, y + 3 )
            SetTextColor( black.r, black.g, black.b, 120 )
            DrawText( text )

            SetTextColor( color )
            SetTextPos( x, y )
            DrawText( text )

do

    :Translate, :VoiceChatMinDistance = Jailbreak
    :ScreenToVector = gui
    :CursorVisible = vgui
    :GetCursorPos = input
    MASK_SHOT = MASK_SHOT
    :TraceLine = util

    trace = {
        mask: MASK_SHOT
    }

    Jailbreak.Font( "Jailbreak::TargetID", "Roboto Mono Bold", 2.6 )
    Jailbreak.Font( "Jailbreak::TargetIDSmall", "Roboto Mono SemiBold Italic", 2.6 )

    GM.HUDDrawTargetID = =>
        ply = Jailbreak.Player
        unless ply\IsValid!
            return

        start = EyePos!
        trace.start = start

        filter = nil
        if ply\GetObserverMode! == OBS_MODE_IN_EYE
            target = Jailbreak.ViewEntity
            if target\IsValid!
                filter = target

        elseif ply\Alive! and not Jailbreak.PlayingTaunt
            filter = ply

        screenCenterX = Jailbreak.ScreenCenterX
        mouseX, mouseY = screenCenterX, Jailbreak.ScreenCenterY

        isWorldClicking = ply\IsWorldClicking!
        if isWorldClicking and CursorVisible!
            mouseX, mouseY = GetCursorPos!

        trace.endpos = start + ScreenToVector( mouseX, mouseY ) * ( isWorldClicking and 1024 or VoiceChatMinDistance\GetInt! )
        trace.filter = filter

        traceResult = TraceLine( trace )
        unless traceResult.Hit
            return

        if traceResult.HitWorld
            return

        entity = traceResult.Entity
        unless entity\IsValid!
            return

        isPlayerRagdoll = entity\IsPlayerRagdoll!
        isPlayer = entity\IsPlayer!
        color = white

        text = nil
        if isPlayer
            unless entity\Alive!
                return

            text = entity\Nick!
            color = entity\GetModelColor!
            frac = Clamp( entity\Health! / entity\GetMaxHealth!, 0, 1 )

            if ( color.r + color.g + color.b ) < 125
                color.r = Lerp( frac, red.r, color.r )
                color.g = Lerp( frac, red.g, color.g )
                color.b = Lerp( frac, red.b, color.b )
            else
                color.r = Lerp( frac, 0, color.r )
                color.g = Lerp( frac, 0, color.g )
                color.b = Lerp( frac, 0, color.b )

        elseif isPlayerRagdoll
            text = entity\GetRagdollOwnerNickname!
            color = entity\GetModelColor!

        elseif entity\IsWeapon!
            printName = nil
            if entity\IsScripted!
                printName = entity.PrintName

            if printName
                printName = "#" .. printName
            else
                printName = entity\GetPrintName!

            if printName == "Scripted Weapon"
                printName = "#" .. entity\GetClass!

            text = Translate( printName )

        else

            className = entity\GetClass!
            if className == "class C_BaseEntity"
                className = "func_button"

            text = Translate( "#jb." .. className )

        offset = VMin( 2 )

        SetFont( "Jailbreak::TargetID" )
        textWidth, textHeight = GetTextSize( text )

        x = mouseX - textWidth / 2
        y = mouseY + offset

        SetTextPos( x - 1, y - 1 )
        SetTextColor( black.r, black.g, black.b, 50 )
        DrawText( text )

        SetTextPos( x + 3, y + 3 )
        SetTextColor( black.r, black.g, black.b, 120 )
        DrawText( text )

        SetTextColor( color )
        SetTextPos( x, y )
        DrawText( text )

        color = nil
        if isPlayer
            teamID = entity\Team!
            text = GetName( teamID )
            color = GetColor( teamID )
        elseif isPlayerRagdoll
            text = "#jb.player.corpse"
            color = dark_white
        else
            return

        SetFont( "Jailbreak::TargetIDSmall" )
        textWidth2, textHeight2 = GetTextSize( text )
        x, y = mouseX - textWidth2 / 2, y + ( textHeight + textHeight2 ) / 2

        SetTextPos( x - 1, y - 1 )
        SetTextColor( black.r, black.g, black.b, 50 )
        DrawText( text )

        SetTextPos( x + 3, y + 3 )
        SetTextColor( black.r, black.g, black.b, 120 )
        DrawText( text )

        SetTextColor( color )
        SetTextPos( x, y )
        DrawText( text )

do

    speakingIcon = Material( "icon16/sound.png", "mips" )

    do

        Jailbreak.Font( "Jailbreak::VoiceChatIcon", "Roboto Mono Medium", 3 )
        alpha = 0

        hook.Add "HUDDrawInfo", "Jailbreak::VoiceChatIcon", =>
            if @IsSpeaking!
                if alpha < 1
                    alpha = min( 1, alpha + FrameTime! * 4 )
            elseif alpha > 0
                alpha = max( 0, alpha - FrameTime! * 4 )

            if alpha == 0
                return

            SetAlphaMultiplier( alpha )

            iconSize = VMin( 12 )
            x, y = Jailbreak.ScreenCenterX, Jailbreak.ScreenHeight - iconSize / 2
            rotation = sin( CurTime! * 3 ) * 30

            SetMaterial( speakingIcon )

            SetDrawColor( black.r, black.g, black.b, 50 )
            DrawTexturedRectRotated( x - 1, y - 1, iconSize, iconSize, rotation )

            SetDrawColor( black.r, black.g, black.b, 120 )
            DrawTexturedRectRotated( x + 3, y + 3, iconSize, iconSize, rotation )

            SetDrawColor( 255, 255, 255, 255 )
            DrawTexturedRectRotated( x, y, iconSize, iconSize, rotation )

            text = GetPhrase( "jb.hud.speaking" )
            SetFont( "Jailbreak::VoiceChatIcon" )
            textWidth, textHeight = GetTextSize( text )
            x, y = ( Jailbreak.ScreenWidth - textWidth ) / 2, Jailbreak.ScreenHeight - iconSize - textHeight

            SetTextPos( x - 1, y - 1 )
            SetTextColor( black.r, black.g, black.b, 50 )
            DrawText( text )

            SetTextPos( x + 3, y + 3 )
            SetTextColor( black.r, black.g, black.b, 120 )
            DrawText( text )

            SetTextColor( 255, 255, 255 )
            SetTextPos( x, y )
            DrawText( text )

            SetAlphaMultiplier( 1 )

    -- Player status icons
    do

        :StatusIcons, :VoiceChatMaxDistance = Jailbreak
        render_SetMaterial = render.SetMaterial
        render_DrawSprite = render.DrawSprite
        LocalToWorld = LocalToWorld
        :GetAll = player

        typingIcon = Material( "icon16/comment_edit.png", "mips" )

        hook.Add "PostDrawTranslucentRenderables", "Jailbreak::StatusIcons", ( drawingDepth, drawingSkybox ) ->
            if drawingDepth or drawingSkybox or not StatusIcons\GetBool!
                return

            eyePos = EyePos!
            for ply in *GetAll!
                if ( ply\IsLocalPlayer! and not ply\ShouldDrawLocalPlayer! ) or not ply\IsInGame!
                    continue

                isSpeaking = ply\IsSpeaking!
                unless isSpeaking or ply\IsTyping!
                    continue

                origin = nil

                headBoneID = ply\LookupBone( "ValveBiped.Bip01_Head1" )
                if headBoneID and headBoneID >= 0
                    origin, angles = ply\GetBonePosition( headBoneID )

                    hitboxset = ply\GetHitboxSet!
                    for hitbox = 0, ply\GetHitBoxCount( hitboxset )
                        if headBoneID == ply\GetHitBoxBone( hitbox, hitboxset )
                            mins, maxs = ply\GetHitBoxBounds( hitbox, hitboxset )
                            origin = LocalToWorld( ( maxs + mins ) / 2, angle_zero, origin, angles ) + angles\Forward! * ( maxs[ 3 ] - mins[ 3 ] ) * 1.5
                            break

                else
                    origin = ply\EyePos!
                    origin[ 3 ] += 14

                distance = origin\Distance( eyePos )
                if distance > VoiceChatMaxDistance\GetInt!
                    continue

                origin[ 3 ] = 1 + origin[ 3 ] + sin( CurTime! * 4 ) * 1.5
                render_SetMaterial( isSpeaking and speakingIcon or typingIcon )
                render_DrawSprite( origin, 12, 12, white )

do

    Jailbreak.Font( "Jailbreak::HUD", "Roboto Mono SemiBold Italic", 2 )

    gradient = Material( "gui/gradient", "smooth" )
    :DrawRect, :DrawTexturedRect = surface

    do

        Color = Color
        :date = os

        PANEL = {}

        PANEL.Init = =>
            placeholder = GetPhrase( "jb.unknown" )
            @PlaceholderName = placeholder
            @HeaderColor = dark_white
            @EntityName = placeholder

            @TimeX, @TimeY = 0, 0
            @Time = "00:00"

            @Health, @MaxHealth = 0, 0
            @Armor, @MaxArmor = 0, 0

            @HealthRectX, @HealthRectY = 0, 0
            @ArmorRectX, @ArmorRectY = 0, 0
            @BarsWidth, @BarsHeight = 0, 0

            @HealthTextX, @HealthTextY = 0, 0
            @HealthText, @ArmorText = "", ""
            @ArmorTextX, @ArmorTextY = 0, 0

            @HealthRects = {}
            @ArmorRects = {}

            hook.Add "LanguageChanged", @, @InvalidateLayout
            @InvalidateLayout( true )

        PANEL.Think = =>
            time = date( "%H:%M" )
            if @Time ~= time
                @Time = time
                @InvalidateLayout!

            entity = Jailbreak.ViewEntity
            unless entity\IsValid!
                if @EntityName ~= @PlaceholderName
                    @EntityName = @PlaceholderName
                    @InvalidateLayout!

                return

            isPlayer = entity\IsPlayer!
            if @IsPlayer ~= isPlayer
                @IsPlayer = isPlayer

                unless isPlayer
                    @Alive = alive
                    @Health = 0

                @InvalidateLayout!

            unless isPlayer
                if @Color ~= light_grey
                    @Color = light_grey

                if entity\IsPlayerRagdoll!
                    nickname = GetPhrase( entity\GetRagdollOwnerNickname! )
                    if @EntityName ~= nickname
                        @EntityName = nickname
                        @InvalidateLayout!

                else

                    className = "#jb." .. entity\GetClass!
                    if @EntityName ~= className
                        @EntityName = className
                        @InvalidateLayout!

                return

            teamID = entity\Team!
            if @TeamID ~= teamID
                @TeamID = teamID
                @InvalidateLayout!

            nickname = entity\Nick!
            if @EntityName ~= nickname
                @EntityName = nickname
                @InvalidateLayout!

            alive, health = entity\Alive!, entity\Health!
            if health <= 0
                alive = false

            if @Alive ~= alive
                @Alive = alive
                unless alive
                    @Health = 0
                    @Armor = 0

                @InvalidateLayout!

            unless alive
                return

            if @Health ~= health
                @Health = health
                @InvalidateLayout!

            if @MaxHealth ~= entity\GetMaxHealth!
                @MaxHealth = entity\GetMaxHealth!
                @InvalidateLayout!

            if @Armor ~= entity\Armor!
                @Armor = entity\Armor!
                @InvalidateLayout!

            if @MaxArmor ~= entity\GetMaxArmor!
                @MaxArmor = entity\GetMaxArmor!
                @InvalidateLayout!

        PANEL.PerformLayout = =>
            @PlaceholderName = GetPhrase( "jb.unknown" )

            margin, offset = VMin( 0.25 ), VMin( 1 )
            width = Jailbreak.ScreenWidth / 6

            SetFont( "Jailbreak::HUD" )

            headerText = @EntityName
            if #headerText > 48
                headerText = sub( headerText, 1, 48 ) .. "..."

            headerTextWidth, headerTextHeight = GetTextSize( headerText )
            headerHeight = margin + headerTextHeight + margin
            headerTextX = offset

            width = max( width, headerTextX + headerTextWidth )

            @HeaderTextX, @HeaderTextY = headerTextX, ( headerHeight - headerTextHeight ) / 2
            @HeaderText = headerText
            @HeaderHeight = headerHeight
            @BackgroundY = headerHeight

            timeWidth, timeHeight = GetTextSize( @Time )
            width, height = max( width, headerTextX + headerTextWidth + margin + timeWidth + offset ), headerHeight

            rectCount = ceil( ( width - offset ) / ( offset + margin ) )
            width = offset + rectCount * ( offset + margin ) + offset - margin

            @TimeX, @TimeY = width - timeWidth - offset, ( headerHeight - timeHeight ) / 2

            alive = @Alive
            if alive
                @HeaderColor = GetColor( @TeamID )

                healthRects = @HealthRects
                for index = 1, #healthRects
                    healthRects[ index ] = nil

                healthFrac = @Health / @MaxHealth
                health = rectCount * Clamp( healthFrac, 0, 1 )
                healthCount = ceil( health )

                isOverhealth, overhealth, overhealthCount = false, nil, nil
                if healthFrac > 1
                    isOverhealth = true
                    overhealth = rectCount * Clamp( healthFrac - 1, 0, 1 )
                    overhealthCount = ceil( overhealth )

                x, y = offset, height + offset
                @HealthRectX, @HealthRectY = x - margin, y - margin

                SetFont( "Jailbreak::HUD" )
                healthText, armorText = format( GetPhrase( "jb.hud.health" ), @Health, @MaxHealth ), format( GetPhrase( "jb.hud.armor" ), @Armor, @MaxArmor )
                @HealthText, @ArmorText = healthText, armorText

                healthTextWidth, healthTextHeight = GetTextSize( healthText )
                armorTextWidth, armorTextHeight = GetTextSize( armorText )

                rectHeight = margin + max( healthTextHeight, armorTextHeight ) + margin

                barsWidth, barsHeight = width - offset * 2 + margin * 2, rectHeight + margin * 2
                @BarsWidth, @BarsHeight = barsWidth, barsHeight

                @HealthTextX, @HealthTextY = x + ( barsWidth - healthTextWidth ) / 2, y + ( rectHeight - healthTextHeight ) / 2

                backgroundHeight = offset + rectHeight

                for index = 1, healthCount
                    rect = { x, y, offset, rectHeight, asparagus }
                    if isOverhealth
                        if index <= overhealthCount
                            if index == overhealthCount and overhealthCount ~= overhealth
                                frac = overhealth % 1
                                rect[ 5 ] = Color( Lerp( frac, asparagus.r, butterfly_bush.r ), Lerp( frac, asparagus.g, butterfly_bush.g ), Lerp( frac, asparagus.b, butterfly_bush.b ) )
                            else
                                rect[ 5 ] = butterfly_bush

                    elseif index == healthCount
                        if healthCount ~= health
                            frac = health % 1
                            rect[ 5 ] = Color( Lerp( frac, red.r, asparagus.r ), Lerp( frac, red.g, asparagus.g ), Lerp( frac, red.b, asparagus.b ), floor( frac * 255 ) )
                            rect[ 3 ] *= frac

                    healthRects[ index ] = rect
                    x += offset + margin

                armor = @Armor
                if armor > 0
                    armorRects = @ArmorRects
                    for index = 1, #armorRects
                        armorRects[ index ] = nil

                    armorFrac = armor / @MaxArmor
                    armor = rectCount * Clamp( armorFrac, 0, 1 )
                    armorCount = ceil( armor )

                    isOverarmor, overarmor, overarmorCount = false, nil, nil
                    if armorFrac > 1
                        isOverarmor = true
                        overarmor = rectCount * Clamp( armorFrac - 1, 0, 1 )
                        overarmorCount = ceil( overarmor )

                    x, y = offset, y + offset + rectHeight + margin
                    @ArmorRectX, @ArmorRectY = x - margin, y - margin

                    @ArmorTextX, @ArmorTextY = x + ( barsWidth - armorTextWidth ) / 2, y + ( rectHeight - armorTextHeight ) / 2

                    for index = 1, armorCount
                        rect = { x, y, offset, rectHeight, horizon }
                        if isOverarmor
                            if index <= overarmorCount
                                if index == overarmorCount and overarmorCount ~= overarmor
                                    frac = overarmor % 1
                                    rect[ 5 ] = Color( Lerp( frac, horizon.r, au_chico.r ), Lerp( frac, horizon.g, au_chico.g ), Lerp( frac, horizon.b, au_chico.b ) )
                                else
                                    rect[ 5 ] = au_chico

                        elseif index == armorCount and armorCount ~= armor
                            frac = armor % 1
                            rect[ 5 ] = Color( Lerp( frac, red.r, horizon.r ), Lerp( frac, red.g, horizon.g ), Lerp( frac, red.b, horizon.b ), floor( frac * 255 ) )
                            rect[ 3 ] *= frac

                        armorRects[ index ] = rect
                        x += offset + margin

                    backgroundHeight += offset + margin + rectHeight

                backgroundHeight += offset

                @BackgroundHeight = backgroundHeight
                height += backgroundHeight

            else
                @HeaderColor = dark_white

                text = GetPhrase( "jb.player.dead" )
                @RectText = text

                rectTextWidth, rectTextHeight = GetTextSize( text )

                backgroundHeight = margin + rectTextHeight + margin
                @RectTextY = headerHeight + ( backgroundHeight - rectTextHeight ) / 2
                @BackgroundHeight = backgroundHeight
                height += backgroundHeight

                @RectTextX = ( max( 1, width - rectTextWidth ) ) / 2

            @SetSize( width, height )
            @InvalidateParent!

        PANEL.Paint = ( width, height ) =>
            headerColor = @HeaderColor
            SetDrawColor( headerColor.r, headerColor.g, headerColor.b, 240 )
            DrawRect( 0, 0, width, @HeaderHeight )

            SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
            DrawRect( 0, @BackgroundY, width, @BackgroundHeight )

            SetFont( "Jailbreak::HUD" )

            SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b )
            SetTextPos( @HeaderTextX, @HeaderTextY )
            DrawText( @HeaderText )

            SetTextPos( @TimeX, @TimeY )
            DrawText( @Time )

            if @Alive

                SetDrawColor( light_grey.r, light_grey.g, light_grey.b, 25 )
                DrawRect( @HealthRectX, @HealthRectY, @BarsWidth, @BarsHeight )

                color = nil
                for rect in *@HealthRects
                    color = rect[ 5 ]
                    SetDrawColor( color.r, color.g, color.b, color.a )
                    DrawRect( rect[ 1 ], rect[ 2 ], rect[ 3 ], rect[ 4 ] )

                SetFont( "Jailbreak::HUD" )

                x, y = @HealthTextX, @HealthTextY
                text = @HealthText

                SetTextPos( x - 1, y - 1 )
                SetTextColor( black.r, black.g, black.b, 120 )
                DrawText( text )

                SetTextPos( x + 2, y + 2 )
                SetTextColor( black.r, black.g, black.b, 200 )
                DrawText( text )

                SetTextColor( dark_white.r, dark_white.g, dark_white.b )
                SetTextPos( x, y )
                DrawText( text )

                if @Armor > 0

                    SetDrawColor( light_grey.r, light_grey.g, light_grey.b, 25 )
                    DrawRect( @ArmorRectX, @ArmorRectY, @BarsWidth, @BarsHeight )

                    for rect in *@ArmorRects
                        color = rect[ 5 ]
                        SetDrawColor( color.r, color.g, color.b, color.a )
                        DrawRect( rect[ 1 ], rect[ 2 ], rect[ 3 ], rect[ 4 ] )

                    x, y = @ArmorTextX, @ArmorTextY
                    text = @ArmorText

                    SetTextPos( x - 1, y - 1 )
                    SetTextColor( black.r, black.g, black.b, 120 )
                    DrawText( text )

                    SetTextPos( x + 2, y + 2 )
                    SetTextColor( black.r, black.g, black.b, 200 )
                    DrawText( text )

                    SetTextColor( dark_white.r, dark_white.g, dark_white.b )
                    SetTextPos( x, y )
                    DrawText( text )

            else

                SetTextColor( dark_white.r, dark_white.g, dark_white.b )
                SetTextPos( @RectTextX, @RectTextY )
                DrawText( @RectText )

        vgui.Register( "Jailbreak::HUDInfo", PANEL, "Panel" )

    do

        lightning_delete = Material( "icon16/lightning_delete.png", "mips" )
        lightning_add = Material( "icon16/lightning_add.png", "mips" )
        lightning = Material( "icon16/lightning.png", "mips" )
        :Rand = math

        PANEL = {}

        PANEL.Init = =>
            @LineColor = dark_white
            @Color = dark_grey
            @SetAlpha( 0 )

            @SuitPowerFraction = 1
            @Direction = true
            @Value = 100

            @RotateOffset = 0
            @IconRotate = 0

            @InvalidateLayout( true )

        PANEL.Think = =>
            entity = Jailbreak.ViewEntity
            unless entity\IsValid! and entity\IsPlayer!
                return

            unless entity\Alive!
                if @GetAlpha! ~= 0
                    @SetAlpha( 0 )

                return

            @IconRotate = @RotateOffset + sin( CurTime! * 2 ) * 15

            teamID = entity\Team!
            if @TeamID ~= teamID
                @TeamID = teamID
                @Color = entity\GetTeamColor!

            value, oldValue = entity\GetSuitPower!, @Value
            fraction = value / 100

            if oldValue ~= value
                color = @Color
                @LineColor = Color( Lerp( fraction, red.r, color.r ), Lerp( fraction, red.g, color.g ), Lerp( fraction, red.b, color.b ) )
                @SuitPowerFraction = fraction

                if fraction % 1 == 0
                    @InvalidateLayout!

                @Direction = value > oldValue
                @Value = value

            alpha = @GetAlpha!
            if fraction == 1
                if alpha > 0
                    alpha = max( 0, alpha - FrameTime! * 255 * 2 )
                    @SetAlpha( alpha )
            elseif alpha < 255
                alpha = min( 255, alpha + FrameTime! * 255 * 4 )
                @SetAlpha( alpha )

        PANEL.PerformLayout = =>
            width, height = VMin( 4 ), @GetTall!
            margin = VMin( 0.25 )

            lineHeight = VMin( 1.5 )
            lineBackgroundWidth, lineBackgroundHeight = width - margin * 2, lineHeight - margin
            lineBackgroundX, lineBackgroundY = margin, height - ( lineHeight + margin )

            @LineBackgroundWidth, @LineBackgroundHeight = lineBackgroundWidth, lineBackgroundHeight
            @LineBackgroundX, @LineBackgroundY = lineBackgroundX, lineBackgroundY

            @LineWidth, @LineHeight = lineBackgroundWidth - margin * 2, lineBackgroundHeight - margin * 2
            @LineX, @LineY = lineBackgroundX + margin, lineBackgroundY + margin

            iconSize = floor( min( width, height - lineHeight ) / 2 )
            @IconX, @IconY = width / 2, ( height - lineHeight ) / 2
            @IconSize = iconSize

            @RotateOffset = Rand( 1, 10 )
            @SetWide( width )

        PANEL.Paint = ( width, height ) =>
            fraction = @SuitPowerFraction
            if fraction == 1 and @GetAlpha! == 0
                return

            SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
            DrawRect( 0, 0, width, height )

            if fraction == 1
                SetMaterial( lightning )
            elseif @Direction
                SetMaterial( lightning_add )
            else
                SetMaterial( lightning_delete )

            SetDrawColor( 255, 255, 255 )
            DrawTexturedRectRotated( @IconX, @IconY, @IconSize, @IconSize, @IconRotate )

            SetDrawColor( light_grey.r, light_grey.g, light_grey.b, 25 )
            DrawRect( @LineBackgroundX, @LineBackgroundY, @LineBackgroundWidth, @LineBackgroundHeight )

            SetDrawColor( @LineColor )
            DrawRect( @LineX, @LineY, @LineWidth * fraction, @LineHeight )

        vgui.Register( "Jailbreak::HUDPower", PANEL, "Panel" )

    do

        PANEL = {}

        PANEL.Init = =>
            @HeaderColor = dark_white
            @AmmoTextColor = white

            @WeaponName = ""
            @AmmoText = ""

            @PrimaryCount, @SecondaryCount = -1, -1
            @Clip1, @Clip2 = -1, -1

            @WeaponNameX, @WeaponNameY = 0, 0
            @AmmoTextX, @AmmoTextY = 0, 0
            @RectHeight = 0

            hook.Add "LanguageChanged", @, @InvalidateLayout
            @InvalidateLayout( true )

        PANEL.Think = =>
            entity = Jailbreak.ViewEntity
            unless entity\IsValid! and entity\IsPlayer! and entity\Alive!
                return

            alive = entity\Alive!
            if alive
                teamID = entity\Team!
                if @TeamID ~= teamID
                    @TeamID = teamID
                    @HeaderColor = GetColor( teamID )
                    @InvalidateLayout!
            elseif @HeaderColor ~= dark_white
                @HeaderColor = dark_white
                @InvalidateLayout!

            weapon = entity\GetActiveWeapon!
            unless IsValid( weapon )
                return

            weaponName = weapon\GetPrintName!
            if @WeaponName ~= weaponName
                @WeaponName = weaponName
                @InvalidateLayout!

            primaryAmmoType = weapon\GetPrimaryAmmoType!
            primaryAmmoCount = -1
            clip1 = -1

            if primaryAmmoType >= 0
                primaryAmmoCount = entity\GetAmmoCount( primaryAmmoType )
                clip1 = weapon\Clip1!

            @PrimaryType = primaryAmmoType

            if @Clip1 ~= clip1
                @Clip1 = clip1
                @InvalidateLayout!

            if @PrimaryCount ~= primaryAmmoCount
                @PrimaryCount = primaryAmmoCount
                @InvalidateLayout!

            secondaryAmmoType = weapon\GetSecondaryAmmoType!
            secondaryAmmoCount = -1
            clip2 = -1

            if secondaryAmmoType >= 0
                secondaryAmmoCount = entity\GetAmmoCount( secondaryAmmoType )
                clip2 = weapon\Clip2!

            @SecondaryType = secondaryAmmoType

            if @Clip2 ~= clip2
                @Clip2 = clip2
                @InvalidateLayout!

            if @SecondaryCount ~= secondaryAmmoCount
                @SecondaryCount = secondaryAmmoCount
                @InvalidateLayout!

        PANEL.PerformLayout = =>
            width, height = VMin( 4 ), @GetTall!
            margin1, margin2 = VMin( 0.25 ), VMin( 1 )

            SetFont( "Jailbreak::HUD" )
            weaponNameWidth, weaponNameHeight = GetTextSize( @WeaponName )
            width = max( width, margin2 + weaponNameWidth + margin2 )

            text = ""

            clip1, primaryCount = @Clip1, @PrimaryCount
            if clip1 >= 0
                text ..= clip1
                if primaryCount >= 1
                    text ..= " / " .. primaryCount
            elseif primaryCount >= 0
                text ..= primaryCount

            clip2, secondaryCount = @Clip2, @SecondaryCount
            if clip2 >= 1
                text ..= " ( " .. clip2
                if secondaryCount >= 1
                    text ..= " / " .. secondaryCount
                text ..= " )"
            elseif secondaryCount >= 1
                text ..= " ( " .. secondaryCount .. " )"

            if #text == 0
                text = GetPhrase( "jb.unknown" )
                @AmmoTextColor = dark_white
            else
                @AmmoTextColor = white

            @AmmoText = text

            ammoTextWidth, ammoTextHeight = GetTextSize( text )
            width = max( width, margin2 + ammoTextWidth + margin2 )

            headerHeight = margin1 + weaponNameHeight + margin1
            @HeaderHeight = headerHeight

            rectHeight = height - headerHeight
            @RectHeight = rectHeight

            @WeaponNameX, @WeaponNameY = ( width - weaponNameWidth ) / 2, ( headerHeight - weaponNameHeight ) / 2
            @AmmoTextX, @AmmoTextY = ( width - ammoTextWidth ) / 2, headerHeight + ( rectHeight - ammoTextHeight ) / 2

            @SetWide( width )

        PANEL.Paint = ( width, height ) =>
            SetDrawColor( @HeaderColor )
            DrawRect( 0, 0, width, @HeaderHeight )

            SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
            DrawRect( 0, @HeaderHeight, width, @RectHeight )

            SetFont( "Jailbreak::HUD" )

            SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b )
            SetTextPos( @WeaponNameX, @WeaponNameY )
            DrawText( @WeaponName )

            SetTextPos( @AmmoTextX, @AmmoTextY )
            SetTextColor( @AmmoTextColor )
            DrawText( @AmmoText )

        vgui.Register( "Jailbreak::HUDAmmo", PANEL, "Panel" )

    do


        PANEL = {}

        PANEL.Init = =>
            @Info = @Add( "Jailbreak::HUDInfo" )
            @Power = @Add( "Jailbreak::HUDPower" )
            @Ammo = @Add( "Jailbreak::HUDAmmo" )
            @InvalidateLayout( true )

        PANEL.PerformLayout = =>
            if @GetDock! ~= BOTTOM
                @Dock( BOTTOM )

            margin = VMin( 1 )
            @DockMargin( margin, 0, margin, margin )
            @SetZPos( -1000 )

            width = @GetWide!

            info, power, ammo = @Info, @Power, @Ammo
            info\SetPos( 0, 0 )

            infoWidth, infoHeight = info\GetSize!
            power\SetPos( infoWidth + margin / 2, infoHeight - power\GetTall! )
            power\SetTall( infoHeight - ( info.HeaderHeight or 0 ) )

            ammoWidth, ammoHeight = ammo\GetSize!
            ammo\SetPos( width - ammoWidth, infoHeight - ammoHeight )
            ammo\SetTall( infoHeight )

            @SetSize( width, infoHeight )

        vgui.Register( "Jailbreak::HUD", PANEL, "Panel" )

if IsValid( Jailbreak.HUD )
    Jailbreak.HUD\Remove!

Jailbreak.HUD = vgui.Create( "Jailbreak::HUD", GetHUDPanel! )

hook.Add "InitPostEntity", "Jailbreak::HUD", ->
    if IsValid( Jailbreak.HUD )
        return

    Jailbreak.HUD = vgui.Create( "Jailbreak::HUD", GetHUDPanel! )
