Jailbreak = Jailbreak
:Colors = Jailbreak
GM = GM

:dark_white, :light_grey, :white = Colors
:Clamp, :Rand, :abs, :sin, :min = math
:GetPhrase = language
:find = string

do

    TEXT_FILTER_GAME_CONTENT = TEXT_FILTER_GAME_CONTENT
    TEXT_FILTER_CHAT = TEXT_FILTER_CHAT
    :AddText, :PlaySound = chat
    :Translate = Jailbreak
    isstring = isstring
    :FilterText = util
    unpack = unpack
    :band = bit
    :date = os

    chatSound = CreateClientConVar( "jb_chat_sound", "1", true, false, "Play sound of chat messages.", 0, 1 )
    chatTime = CreateClientConVar( "jb_chat_time", "1", true, false, "Draw time of chat messages.", 0, 1 )
    cl_chatfilters = GetConVar( "cl_chatfilters" )

    message = {}
    length = 0

    insert = ( value, borders, isTag ) ->
        length += 1

        if borders ~= nil
            value = borders[ 1 ] .. value .. borders[ 2 ]

        if isTag
            value ..= " "

        message[ length ] = value

    messageHandlers = Jailbreak.MessageHandlers
    unless istable( messageHandlers )
        messageHandlers = {}
        Jailbreak.MessageHandlers = messageHandlers

    messageHandlers[ CHAT_TEXT ] = ( listener, speaker, data ) ->
        if data[ 3 ]
            insert( dark_white )
            insert( GetPhrase( "jb.chat.dead" ), "[]", true )

        teamID = data[ 4 ]
        if teamID
            insert( Jailbreak.GetTeamColor( teamID ) )
            insert( GetPhrase( "jb.chat.team." .. teamID ), "[]", true )

        if data[ 5 ]
            insert( Colors.horizon )
            insert( GetPhrase( "jb.walkie-talkie" ), "[]", true )

        text, nickname, isMuted = data[ 1 ], data[ 2 ], false

        if speaker\IsValid!
            if speaker\IsPlayer!
                if speaker\IsDeveloper!
                    insert( Colors.butterfly_bush )
                    insert( "/", "<>", true )

                insert( speaker\GetModelColor! )
                insert( nickname or speaker\Nick! )

                if speaker\IsMuted!
                    text, isMuted = GetPhrase( "jb.chat.muted" ), true
                else
                    text = FilterText( text, ( band( cl_chatfilters\GetInt!, 64 ) ~= 0 ) and TEXT_FILTER_CHAT or TEXT_FILTER_GAME_CONTENT, speaker )

        elseif nickname
            insert( dark_white )
            insert( nickname )

        else
            insert( Colors.butterfly_bush )
            insert( GetPhrase( "jb.chat.console" ) )

        insert( white )
        insert( " " .. GetPhrase( "jb.chat.says" ) .. ": \"" )

        if isMuted
            insert( dark_white )

        insert( text )

        if isMuted
            insert( white )

        insert( "\"" )

    do

        OOCHandler = ( listener, speaker, data, isLocal ) ->
            if isLocal
                insert( Colors.blue )
                insert( GetPhrase( "jb.chat.looc" ), "[]", true )
            else
                insert( Colors.turquoise )
                insert( GetPhrase( "jb.chat.ooc" ), "[]", true )

            unless data[ 3 ]
                insert( dark_white )
                insert( GetPhrase( "jb.chat.dead" ), "[]", true )

            teamID = data[ 4 ]
            if teamID
                insert( Jailbreak.GetTeamColor( teamID ) )
                insert( GetPhrase( "jb.chat.team." .. teamID ), "[]", true )

            text, nickname, isMuted = data[ 1 ], data[ 2 ], false

            if speaker\IsValid! and speaker\IsPlayer!
                if speaker\IsDeveloper!
                    insert( Colors.butterfly_bush )
                    insert( "/", "<>", true )

                insert( speaker\GetModelColor! )
                insert( nickname or speaker\Nick! )

                if speaker\IsMuted!
                    text, isMuted = GetPhrase( "jb.chat.muted" ), true
                else
                    text = FilterText( text, ( band( cl_chatfilters\GetInt!, 64 ) ~= 0 ) and TEXT_FILTER_CHAT or TEXT_FILTER_GAME_CONTENT, speaker )

            else
                insert( dark_white )
                insert( nickname )

            insert( white )
            insert( ": " )

            if isMuted
                insert( dark_white )

            insert( text )

        messageHandlers[ CHAT_OOC ] = OOCHandler

        messageHandlers[ CHAT_LOOC ] = ( listener, speaker, data ) ->
            return OOCHandler( listener, speaker, data, true )

    messageHandlers[ CHAT_EMOTION ] = ( listener, speaker, data ) ->
        unless table.remove( data, 2 )
            insert( dark_white )
            insert( GetPhrase( "jb.chat.dead" ), "[]", true )

        nickname = table.remove( data, 1 )
        if speaker\IsValid! and speaker\IsPlayer!
            if speaker\IsMuted!
                return true

            if speaker\IsDeveloper!
                insert( Colors.butterfly_bush )
                insert( "/", "<>", true )

            insert( speaker\GetModelColor! )
            insert( nickname or speaker\Nick! )
        else
            insert( dark_white )
            insert( nickname )

        insert( white )
        insert( " " )

        for value in *data
            if isstring( value )
                value = Translate( value )

            insert( value )

    messageHandlers[ CHAT_WHISPER ] = ( listener, speaker, data ) ->
        unless data[ 3 ]
            insert( dark_white )
            insert( GetPhrase( "jb.chat.dead" ), "[]", true )

        teamID = data[ 4 ]
        if teamID
            insert( Jailbreak.GetTeamColor( teamID ) )
            insert( GetPhrase( "jb.chat.team." .. teamID ), "[]", true )

        text, nickname, isMuted = data[ 1 ], data[ 2 ], false

        if speaker\IsValid! and speaker\IsPlayer!
            if speaker\IsDeveloper!
                insert( Colors.butterfly_bush )
                insert( "/", "<>", true )

            insert( speaker\GetModelColor! )
            insert( nickname or speaker\Nick! )

            if speaker\IsMuted!
                text, isMuted = GetPhrase( "jb.chat.muted" ), true
            else
                text = FilterText( text, ( band( cl_chatfilters\GetInt!, 64 ) ~= 0 ) and TEXT_FILTER_CHAT or TEXT_FILTER_GAME_CONTENT, speaker )

        else
            insert( dark_white )
            insert( nickname )

        insert( white )
        insert( " " .. GetPhrase( "jb.chat.whispers" ) .. ": \"" )

        if isMuted
            insert( dark_white )

        insert( text )

        if isMuted
            insert( white )

        insert( "\"" )

    messageHandlers[ CHAT_CUSTOM ] = ( _, __, data ) ->
        for value in *data
            if isstring( value )
                value = Translate( value )

            insert( value )

    messageHandlers[ CHAT_SERVERMESSAGE ] = ( _, __, data ) ->
        insert( data[ 2 ] or dark_white )
        insert( Translate( data[ 1 ] ), nil )

    messageHandlers[ CHAT_CONNECTED ] = ( _, __, data ) ->
        insert( white )
        insert( GetPhrase( "jb.player" ) .. " " )

        insert( data[ 1 ] )
        insert( data[ 2 ] )

        steamID = data[ 3 ]
        if steamID
            insert( white )
            insert( " ( " )

            insert( Colors.blue )
            insert( steamID )

            insert( white )
            insert( " )" )

        insert( white )
        insert( " " .. GetPhrase( "jb.chat.player.connected" ) )

    messageHandlers[ CHAT_CONNECT ] = ( _, __, data ) ->
        insert( white )
        insert( GetPhrase( "jb.player" ) .. " " )

        insert( Colors.asparagus )
        insert( data[ 1 ] )

        address = data[ 2 ]
        if address
            insert( white )
            insert( " ( " )

            insert( Colors.blue )
            insert( address )

            insert( white )
            insert( " )" )

        insert( white )
        insert( " " .. GetPhrase( "jb.chat.player.connecting" ) )

    messageHandlers[ CHAT_DISCONNECT ] = ( _, __, data ) ->
        insert( white )
        insert( GetPhrase( "jb.player" ) .. " " )

        insert( Colors.au_chico )
        insert( data[ 1 ] )

        steamID = data[ 2 ]
        if steamID
            insert( white )
            insert( " ( " )

            insert( Colors.blue )
            insert( steamID )

            insert( white )
            insert( " )" )

        insert( white )

        reason = data[ 3 ]
        if reason ~= nil
            insert( " " .. GetPhrase( "jb.chat.player.disconnected_with_reason" ) .. ": \"" )

            insert( dark_white )
            insert( reason )

            insert( white )
            insert( "\"" )
        else
            insert( " " .. GetPhrase( "jb.chat.player.disconnected" ) )

    messageHandlers[ CHAT_NAMECHANGE ] = ( _, __, data ) ->
        insert( white )
        insert( GetPhrase( "jb.player" ) .. " " )

        color = data[ 1 ]
        insert( color )
        insert( data[ 2 ] )

        insert( white )
        insert( " " .. GetPhrase( "jb.chat.player.changed_name" ) .. " " )

        insert( color )
        insert( data[ 3 ] )

        insert( white )
        insert( "." )

    GM.OnChatText = ( speaker, messageType, data ) =>
        for index = 1, #message
            message[ index ] = nil
        length = 0

        handler = messageHandlers[ messageType ]
        if handler and handler( Jailbreak.Player, speaker, data )
            return

        if chatTime\GetBool!
            AddText( light_grey, date( "[%H:%M:%S] " ), unpack( message ) )
        else
            AddText( unpack( message ) )

        if chatSound\GetBool!
            PlaySound!

do

    :SetVoiceVolumeScale = FindMetaTable( "Player" )
    :ReadEntity, :ReadFloat, :ReadUInt = net

    net.Receive "JB::Communication", ->
        for i = 1, ReadUInt( 10 )
            ply, volume = ReadEntity!, ReadFloat!
            if ply\IsValid!
                SetVoiceVolumeScale( ply, volume )

do

    GESTURE_SLOT_VCD = GESTURE_SLOT_VCD
    ACT_GMOD_IN_CHAT = ACT_GMOD_IN_CHAT
    FrameTime = FrameTime
    :Approach = math

    GM.GrabEarAnimation = ( ply ) =>
        if ply\IsPlayingTaunt!
            return

        weight = ply.ChatGestureWeight or 0

        if ply\IsTyping! or ( ply\IsSpeaking! and ply\UsingSecurityRadio! )
            weight = Approach( weight, 1, FrameTime! * 5 )
        else
            weight = Approach( weight, 0, FrameTime! * 5 )

        if weight > 0
            ply\AnimRestartGesture( GESTURE_SLOT_VCD, ACT_GMOD_IN_CHAT, true )
            ply\AnimSetGestureWeight( GESTURE_SLOT_VCD, weight )

        ply.ChatGestureWeight = weight

do

    :VoiceFlexLess, :VoiceForceFlexLess = Jailbreak

    patterns = {
        "right_corner_puller"
    	"left_corner_puller"

        "right_cheek_raiser"
        "left_cheek_raiser"

        "right_part"
        "left_part"

        "jaw_drop"

        "right_mouth_drop"
        "left_mouth_drop"

        "smile"
        "lower_lip"

        -- "corner_depressor"
    }

    mults = {
        right_cheek_raiser: 0.25
        left_cheek_raiser: 0.25
        -- right_mouth_drop: 0.5
        -- left_mouth_drop: 0.5
        lower_lip: 0.05
        jaw_drop: 0.5
        smile: 0.05
    }

    angle_zero = angle_zero
    cache = {}

    GM.MouthMoveAnimation = ( ply ) =>
        flexes = cache[ ply\GetModel! ]
        if flexes == nil
            flexes = {}
            for flex = 0, ply\GetFlexNum!
                sourceIndex = -1
                for index, pattern in ipairs( patterns )
                    flexName = ply\GetFlexName( flex )
                    if flexName == pattern or find( flexName, pattern, 1, false ) ~= nil
                        mults[ index ] = mults[ flexName ]
                        sourceIndex = index
                        break

                if sourceIndex ~= -1
                    flexes[] = { flex, sourceIndex, ply\GetFlexBounds( flex ) }

            if #flexes == 0
                flexes = false

            cache[ ply\GetModel! ] = flexes

        fraction = ply\VoiceFraction!

        if flexes and not VoiceForceFlexLess\GetBool!
            ply\SetFlexScale( 2 )

            for data in *flexes
                flex = data[ 1 ]
                if fraction > 0
                    nextVolume = abs( sin( flex * ( 1 / #flexes ) + CurTime! ) ) * fraction + fraction
                    ply\SetFlexWeight( flex, Clamp( nextVolume, data[ 3 ], data[ 4 ] ) * ( mults[ data[ 2 ] ] or 1 ) )
                else
                    ply\SetFlexWeight( flex, 0 )

            return

        value = VoiceFlexLess\GetInt!
        if value == 0
            return

        angles = Angle!
        if fraction > 0
            if value <= 2
                angles[ 1 ] = Rand( -90, 90 )
                angles[ 2 ] = Rand( -180, 180 )
                angles[ 3 ] = 0

            elseif value <= 5
                angle = min( 720, value * 144 )
                angles[ 1 ] = Rand( -angle, angle )
                angles[ 2 ] = Rand( -angle, angle )
                angles[ 3 ] = 0

            else
                angle = min( 720, value * 72 )
                angles[ 1 ] = Rand( -angle, angle )
                angles[ 2 ] = Rand( -angle, angle )
                angles[ 3 ] = Rand( -angle, angle )

            angles = ( angles / 2 ) * fraction

        angles = LerpAngle( 0.25, ply.MouthLessAngles or angle_zero, angles )
        ply.MouthLessAngles = angles

        if value > 1
            ply\ManipulateBoneAngles( 0, angles, false )
        else
            boneID = ply\LookupBone( "ValveBiped.Bip01_Head1" )
            if boneID and boneID >= 0
                ply\ManipulateBoneAngles( boneID, angles, false )
            else
                ply\ManipulateBoneAngles( 0, angles, false )

do

    :TrimLeft, :sub, :match = string

    GM.OnChatTab = ( text ) =>
        text = TrimLeft( text )
        if sub( text, 1, 1 ) == "/"
            command = match( text, "/([^%s]+)" )
            unless command
                return "/whisper " .. sub( text, 2 )

            arguments = sub( text, #command + 2 )

            switch command
                when "whisper"
                    text = "/emotion" .. arguments
                when "emotion"
                    text = "/coin" .. arguments
                when "coin"
                    text = "/roll" .. arguments
                when "roll"
                    text = "/looc" .. arguments
                when "looc"
                    text = "/ooc" .. arguments
                when "ooc"
                    text = "/whisper" .. arguments

        else
            text = "/whisper " .. text

        return text
