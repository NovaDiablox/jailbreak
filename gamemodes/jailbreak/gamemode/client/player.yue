Jailbreak = Jailbreak
hook_Run = hook.Run
IsValid = IsValid
:Clamp = math
drive = drive
GM = GM

Jailbreak.ViewEntity = NULL
Jailbreak.Player = NULL

GM.ShouldDrawLocalPlayer = ( ply ) =>
    if ply ~= Jailbreak.ViewEntity
        return true

    if ply\IsPlayingTaunt!
        return true

    tauntLerpOut = ply.TauntFraction
    if tauntLerpOut and tauntLerpOut > 0
        return true

    return false

do

    LerpVector = LerpVector
    LerpAngle = LerpAngle
    :CalcView = drive

    tauntTrace = {
        mask: MASK_SHOT
        mins: Vector( -8, -8, -8 )
        maxs: Vector( 8, 8, 8 )
    }

    view = Jailbreak.PlayerView
    unless istable( view )
        view = {}
        Jailbreak.PlayerView = view

    GM.CalcView = ( ply, origin, angles, fov, znear, zfar ) =>
        Jailbreak.Player = ply

        view.origin = origin
        view.angles = angles
        view.fov = fov
        view.znear = znear
        view.zfar = zfar
        view.drawviewer = false

        if CalcView( ply, view )
            return view

        entity = nil
        unless ply\Alive!
            entity = ply\GetObserverTarget!

        unless entity and entity\IsValid!
            entity = ply\GetViewEntity!

        unless entity and entity\IsValid!
            entity = ply

        Jailbreak.ViewEntity = entity

        unless entity\IsPlayer! and entity\Alive!
            return view

        isPlayingTaunt = Jailbreak.PlayingTaunt

        tauntFraction = entity.TauntFraction
        unless tauntFraction
            tauntFraction = 0
            entity.TauntFraction = tauntFraction

        if isPlayingTaunt or tauntFraction > 0
            tauntViewAngles, tauntDistance = entity.TauntViewAngles, entity.TauntDistance

            unless tauntViewAngles
                tauntViewAngles = angles
                entity.TauntViewAngles = tauntViewAngles

            unless tauntDistance
                tauntDistance = 128
                entity.TauntDistance = tauntDistance

            headBoneID = ply\LookupBone( "ValveBiped.Bip01_Head1" )
            if headBoneID and headBoneID >= 0
                origin = ply\GetBonePosition( headBoneID )

            targetOrigin = origin - tauntViewAngles\Forward! * tauntDistance

            tauntTrace.start = origin
            tauntTrace.endpos = targetOrigin
            tauntTrace.filter = entity

            traceResult = util.TraceHull( tauntTrace )
            targetOrigin = traceResult.HitPos + traceResult.HitNormal

            tauntPlayerAngles = entity.TauntPlayerAngles
            unless tauntPlayerAngles
                tauntPlayerAngles = Angle( angles )
                entity.TauntPlayerAngles = tauntPlayerAngles

            if isPlayingTaunt
                if tauntFraction < 1
                    tauntFraction += FrameTime! * 4
                    entity.TauntFraction = tauntFraction

                    view.origin = LerpVector( tauntFraction, origin, targetOrigin )
                    view.angles = LerpAngle( tauntFraction, tauntPlayerAngles, tauntViewAngles )
                    return view

            else

                if tauntFraction > 0
                    tauntFraction -= FrameTime! * 4
                    entity.TauntFraction = tauntFraction

                    view.origin = LerpVector( tauntFraction, origin, targetOrigin )
                    view.angles = LerpAngle( tauntFraction, tauntPlayerAngles, tauntViewAngles )
                    return view

            view.origin = targetOrigin
            view.angles = tauntViewAngles
            return view

        if entity.TauntPlayerAngles
            entity.TauntPlayerAngles = nil

        if entity.TauntViewAngles
            entity.TauntViewAngles = nil

        if ply\InVehicle!
            return hook_Run( "CalcVehicleView", ply\GetVehicle!, ply, view )

        weapon = ply\GetActiveWeapon!
        if weapon and weapon\IsValid!
            func = weapon.CalcView
            if func
                origin, angles, fov = func( weapon, ply, Vector( view.origin ), Angle( view.angles ), view.fov )
                view.origin, view.angles, view.fov = origin or view.origin, angles or view.angles, fov or view.fov

        return view

do

    :CreateMove = drive

    GM.CreateMove = ( cmd ) =>
        if CreateMove( cmd )
            return true

        entity = Jailbreak.ViewEntity
        unless entity\IsValid! and entity\IsPlayer! and entity\Alive!
            return

        unless entity\IsPlayingTaunt!
            Jailbreak.PlayingTaunt = false
            return

        Jailbreak.PlayingTaunt = true

        -- FrameTime!
        tauntViewAngles = entity.TauntViewAngles
        if tauntViewAngles
            tauntViewAngles[ 1 ] += cmd\GetMouseY! * 0.01
            tauntViewAngles[ 2 ] -= cmd\GetMouseX! * 0.01

        tauntDistance = entity.TauntDistance
        if tauntDistance
            entity.TauntDistance = Clamp( tauntDistance - cmd\GetMouseWheel! * ( tauntDistance * 0.25 ), 16, 1024 )

        tauntPlayerAngles = entity.TauntPlayerAngles
        if tauntPlayerAngles
            cmd\SetViewAngles( tauntPlayerAngles )

        cmd\ClearMovement!
        cmd\ClearButtons!
        return true

GM.PreDrawViewModel = ( vm, ply, weapon ) =>
	unless weapon and weapon\IsValid!
        return false

    func = weapon.PreDrawViewModel
    if func
    	return func( weapon, vm, weapon, ply )

    return false

GM.PostDrawViewModel = ( vm, ply, weapon ) =>
	unless weapon and weapon\IsValid!
        return false

	if not weapon\IsScripted! or weapon.UseHands
		hands = ply\GetHands!
		if IsValid( hands ) and IsValid( hands\GetParent! )
			unless hook_Run( "PreDrawPlayerHands", hands, vm, ply, weapon )
				if weapon.ViewModelFlip
                    render.CullMode( MATERIAL_CULLMODE_CW )

				hands\DrawModel!
				render.CullMode( MATERIAL_CULLMODE_CCW )

			hook_Run( "PostDrawPlayerHands", hands, vm, ply, weapon )

    func = weapon.PostDrawViewModel
	if func
	    return func( weapon, vm, weapon, ply )

    return false

do

    :HandsTransparency = Jailbreak

    handsAlpha = 1 - HandsTransparency\GetFloat!
    tonumber = tonumber
    :SetBlend = render

    cvars.AddChangeCallback( HandsTransparency\GetName!, ( _, __, value ) ->
        handsAlpha = 1 - ( tonumber( value ) or 0 )
    "Jailbreak::HandsTransparency" )

    GM.PreDrawPlayerHands = =>
        SetBlend( handsAlpha )

    GM.PostDrawPlayerHands = =>
        SetBlend( 1 )
