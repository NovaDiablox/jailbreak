:Alive, :IsPlayingTaunt = FindMetaTable( "Player" )
Jailbreak = Jailbreak
FrameTime = FrameTime
drive = drive
:Run = hook
GM = GM

unless Jailbreak.ViewEntity
    Jailbreak.ViewEntity = NULL

unless Jailbreak.Player
    Jailbreak.Player = NULL

GM.ShouldDrawLocalPlayer = ( ply ) =>
    if ply ~= Jailbreak.ViewEntity
        if Jailbreak.PlayingTaunt
            Jailbreak.PlayingTaunt = false

        return true

    if IsPlayingTaunt( ply ) and Alive( ply )
        Jailbreak.PlayingTaunt = true
        return true

    Jailbreak.PlayingTaunt = false
    return Jailbreak.TauntFraction > 0

do

    :LookupBone, :GetBonePosition = FindMetaTable( "Entity" )
    :Forward = FindMetaTable( "Angle" )
    LerpVector = LerpVector
    LerpAngle = LerpAngle
    :TraceHull = util
    :CalcView = drive

    traceResult = {}
    trace = {
        mins: Vector( -8, -8, -8 )
        maxs: Vector( 8, 8, 8 )
        output: traceResult
        mask: MASK_SHOT
    }

    view = Jailbreak.PlayerView
    unless istable( view )
        view = {}
        Jailbreak.PlayerView = view

    boneID = 0

    GM.CalcView = ( ply, origin, angles, fov, znear, zfar ) =>
        Jailbreak.Player = ply

        view.origin = origin
        view.angles = angles
        view.fov = fov
        view.znear = znear
        view.zfar = zfar
        view.drawviewer = false

        if CalcView( ply, view )
            return view

        entity = nil
        if Alive( ply )
            if ply\GetNW2Bool( "lost-consciousness" )
                if Jailbreak.TauntViewAngles
                    Jailbreak.TauntViewAngles = nil

                if Jailbreak.TauntDistance
                    Jailbreak.TauntDistance = nil

                if Jailbreak.TauntEyeAngles
                    Jailbreak.TauntEyeAngles = nil

                entity = ply\GetRagdollEntity!
                unless entity\IsValid!
                    return view

                attachmentID = entity\LookupAttachment( "eyes" )
                if attachmentID >= 0
                    attachment = entity\GetAttachment( attachmentID )
                    if attachment
                        view.origin = attachment.Pos
                        view.angles = attachment.Ang

                view.drawviewer = false
                return view

        else
            entity = ply\GetObserverTarget!

        unless entity and entity\IsValid!
            entity = ply\GetViewEntity!

        unless entity and entity\IsValid!
            entity = ply

        Jailbreak.ViewEntity = entity

        if ply ~= entity
            if Jailbreak.TauntViewAngles
                Jailbreak.TauntViewAngles = nil

            if Jailbreak.TauntDistance
                Jailbreak.TauntDistance = nil

            if Jailbreak.TauntEyeAngles
                Jailbreak.TauntEyeAngles = nil

            return view

        unless Alive( ply )
            if Jailbreak.TauntViewAngles
                Jailbreak.TauntViewAngles = nil

            if Jailbreak.TauntDistance
                Jailbreak.TauntDistance = nil

            if Jailbreak.TauntEyeAngles
                Jailbreak.TauntEyeAngles = nil

            return view

        if entity\Health! < 1
            if Jailbreak.TauntViewAngles
                Jailbreak.TauntViewAngles = nil

            if Jailbreak.TauntDistance
                Jailbreak.TauntDistance = nil

            if Jailbreak.TauntEyeAngles
                Jailbreak.TauntEyeAngles = nil

            attachmentID = entity\LookupAttachment( "eyes" )
            if attachmentID >= 0
                attachment = entity\GetAttachment( attachmentID )
                if attachment
                    view.origin = attachment.Pos
                    view.angles = attachment.Ang

            view.drawviewer = true

            return view

        if Jailbreak.PlayingTaunt or Jailbreak.TauntFraction > 0
            viewAngles = Jailbreak.TauntViewAngles
            unless viewAngles
                viewAngles = angles
                viewAngles[ 1 ], viewAngles[ 3 ] = 0, 0
                Jailbreak.TauntViewAngles = viewAngles

            distance = Jailbreak.TauntDistance
            unless distance
                distance = 128
                Jailbreak.TauntDistance = distance

            boneID = LookupBone( ply, "ValveBiped.Bip01_Head1" )
            if boneID and boneID >= 0
                origin = GetBonePosition( ply, boneID )

            targetOrigin = origin - Forward( viewAngles ) * distance

            trace.start = origin
            trace.endpos = targetOrigin
            trace.filter = entity
            TraceHull( trace )

            targetOrigin = traceResult.HitPos + traceResult.HitNormal

            eyeAngles = Jailbreak.TauntEyeAngles
            unless eyeAngles
                eyeAngles = Angle( viewAngles )
                Jailbreak.TauntEyeAngles = eyeAngles

            fraction = Jailbreak.TauntFraction
            if Jailbreak.PlayingTaunt
                if fraction < 1
                    fraction += FrameTime! * 4
                    Jailbreak.TauntFraction = fraction

                    view.origin = LerpVector( fraction, origin, targetOrigin )
                    view.angles = LerpAngle( fraction, eyeAngles, viewAngles )
                    return view

            elseif fraction > 0
                fraction -= FrameTime! * 2
                Jailbreak.TauntFraction = fraction

                view.origin = LerpVector( fraction, origin, targetOrigin )
                view.angles = LerpAngle( fraction, eyeAngles, viewAngles )
                return view

            view.origin = targetOrigin
            view.angles = viewAngles
            return view

        if Jailbreak.TauntViewAngles
            Jailbreak.TauntViewAngles = nil

        if Jailbreak.TauntDistance
            Jailbreak.TauntDistance = nil

        if Jailbreak.TauntEyeAngles
            Jailbreak.TauntEyeAngles = nil

        if ply\InVehicle!
            return Run( "CalcVehicleView", ply\GetVehicle!, ply, view )

        weapon = ply\GetActiveWeapon!
        if weapon and weapon\IsValid!
            func = weapon.CalcView
            if func
                origin, angles, fov = func( weapon, ply, Vector( view.origin ), Angle( view.angles ), view.fov )
                view.origin, view.angles, view.fov = origin or view.origin, angles or view.angles, fov or view.fov

        return view

do

    :SetViewAngles, :GetMouseX, :GetMouseY, :GetMouseWheel = FindMetaTable( "CUserCmd" )
    :CreateMove = drive
    :Clamp = math

    frameTime = 0

    GM.CreateMove = ( cmd ) =>
        if CreateMove( cmd )
            return true

        if Jailbreak.PlayingTaunt
            viewAngles = Jailbreak.TauntViewAngles
            if viewAngles
                frameTime = FrameTime!
                viewAngles[ 1 ] += GetMouseY( cmd ) * frameTime
                viewAngles[ 2 ] -= GetMouseX( cmd ) * frameTime

            distance = Jailbreak.TauntDistance
            if distance
                Jailbreak.TauntDistance = Clamp( distance - GetMouseWheel( cmd ) * ( distance * 0.1 ), 16, 1024 )

            eyeAngles = Jailbreak.TauntEyeAngles
            if eyeAngles
                SetViewAngles( cmd, eyeAngles )
                return

GM.PreDrawViewModel = ( vm, ply, weapon ) =>
    func = weapon.PreDrawViewModel
    if func == nil
        return false

    return func( weapon, vm, weapon, ply )

do

    MATERIAL_CULLMODE_CCW = MATERIAL_CULLMODE_CCW
    MATERIAL_CULLMODE_CW = MATERIAL_CULLMODE_CW
    :DrawModel = FindMetaTable( "Entity" )
    :CullMode = render

    GM.PostDrawViewModel = ( vm, ply, weapon ) =>
        if weapon.UseHands or not weapon\IsScripted!
            hands = ply\GetHands!
            if hands and hands\IsValid! and hands\GetParent!\IsValid!
                unless Run( "PreDrawPlayerHands", hands, vm, ply, weapon )
                    if weapon.ViewModelFlip
                        CullMode( MATERIAL_CULLMODE_CW )

                    DrawModel( hands )
                    CullMode( MATERIAL_CULLMODE_CCW )

                Run( "PostDrawPlayerHands", hands, vm, ply, weapon )

        func = weapon.PostDrawViewModel
        if func == nil
            return false

        return func( weapon, vm, weapon, ply )

do

    :HandsTransparency = Jailbreak

    handsAlpha = 1 - HandsTransparency\GetFloat!
    tonumber = tonumber
    :SetBlend = render

    cvars.AddChangeCallback( HandsTransparency\GetName!, ( _, __, value ) ->
        handsAlpha = 1 - ( tonumber( value ) or 0 )
    "Jailbreak::HandsTransparency" )

    GM.PreDrawPlayerHands = =>
        SetBlend( handsAlpha )

    GM.PostDrawPlayerHands = =>
        SetBlend( 1 )
