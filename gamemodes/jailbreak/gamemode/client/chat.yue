Jailbreak = Jailbreak
:Colors = Jailbreak

:blue, :butterfly_bush, :dark_white, :white = Colors
isstring = isstring
string = string

CHAT_SERVERMESSAGE = CHAT_SERVERMESSAGE
CHAT_TEXT = CHAT_TEXT

messageHandlers = Jailbreak.MessageHandlers
unless istable( messageHandlers )
    messageHandlers = {}
    Jailbreak.MessageHandlers = messageHandlers

message = {}
pointer = 1

insert = ( value, borders, isTag ) ->
    if isstring( value )
        if isstring( borders )
            value = borders[ 1 ] .. value .. borders[ 2 ]

        if isTag
            value ..= " "

    message[ pointer ] = value
    pointer += 1

Jailbreak.InsertChatValue = insert

do

    TEXT_FILTER_GAME_CONTENT = TEXT_FILTER_GAME_CONTENT
    :ReadBool, :ReadUInt, :ReadTable = net
    TEXT_FILTER_CHAT = TEXT_FILTER_CHAT
    :AddText, :PlaySound = chat
    :light_grey = Colors
    :FilterText = util
    :Run, :Call = hook
    Entity = Entity
    unpack = unpack
    NULL = NULL
    :band = bit
    :date = os

    chatSound = CreateClientConVar( "jb_chat_sound", "1", true, false, "Play sound of chat messages.", 0, 1 )
    chatTime = CreateClientConVar( "jb_chat_time", "1", true, false, "Draw time of chat messages.", 0, 1 )
    cl_chatfilters = GetConVar( "cl_chatfilters" )

    performChatMessage = ( speaker, messageType, data ) ->
        for index = 1, pointer - 1
            message[ index ] = nil

        pointer = 1

        handler = messageHandlers[ messageType ]
        unless handler
            return false

        if speaker\IsValid! and speaker\IsPlayer! and isstring( data[ 1 ] )
            data[ 1 ] = FilterText( data[ 1 ], ( band( cl_chatfilters\GetInt!, 64 ) ~= 0 ) and TEXT_FILTER_CHAT or TEXT_FILTER_GAME_CONTENT, speaker )
            if Call( "OnPlayerChat", nil, speaker, data[ 1 ], false, speaker\Alive! )
                return false

        listener = Jailbreak.Player
        Run( "OnChatText", listener, speaker, data )

        if handler( listener, speaker, data )
            return false

        if chatTime\GetBool!
            AddText( light_grey, date( "[%H:%M:%S] " ), unpack( message ) )
        else
            AddText( unpack( message ) )

        if chatSound\GetBool!
            PlaySound!

        return true

    Jailbreak.PerformChatMessage = performChatMessage

    GM.OnAchievementAchieved = ( ply, achievementID ) =>
        performChatMessage( ply, CHAT_ACHIEVEMENT, { achievementID, ply\Nick! } )
        return

    do

        buffer = {}

        GM.ChatText = ( _, __, text, messageType ) =>
            switch messageType
                when "servermsg"
                    buffer[ 1 ] = text
                    buffer[ 2 ] = nil
                    performChatMessage( NULL, CHAT_SERVERMESSAGE, buffer )

                when "chat"
                    buffer[ 1 ] = text
                    buffer[ 2 ] = nil
                    performChatMessage( NULL, CHAT_TEXT, buffer )

            return true

        FindMetaTable( "Player" ).ChatPrint = ( text ) =>
            buffer[ 1 ] = text
            buffer[ 2 ] = white
            performChatMessage( NULL, CHAT_SERVERMESSAGE, buffer )
            return

    net.Receive "Jailbreak::Chat", ->
        performChatMessage( ReadBool! and Entity( ReadUInt( 8 ) ) or NULL, ReadUInt( 5 ), ReadTable( true ) )
        return

GM.OnPlayerChat = =>
    return true

do

    GESTURE_SLOT_VCD = GESTURE_SLOT_VCD
    ACT_GMOD_IN_CHAT = ACT_GMOD_IN_CHAT
    FrameTime = FrameTime
    :Approach = math

    GM.GrabEarAnimation = ( ply ) =>
        if ply\IsPlayingTaunt!
            return

        weight = ply.ChatGestureWeight or 0

        if ply\IsTyping! or ( ply\IsSpeaking! and ply\UsingSecurityRadio! )
            weight = Approach( weight, 1, FrameTime! * 5 )
        else
            weight = Approach( weight, 0, FrameTime! * 5 )

        ply.ChatGestureWeight = weight

        if weight > 0
            ply\AnimRestartGesture( GESTURE_SLOT_VCD, ACT_GMOD_IN_CHAT, true )
            ply\AnimSetGestureWeight( GESTURE_SLOT_VCD, weight )

do

    :TrimLeft, :sub, :match = string

    GM.OnChatTab = ( text ) =>
        text = TrimLeft( text )
        if sub( text, 1, 1 ) == "/"
            command = match( text, "/([^%s]+)" )
            unless command
                return "/whisper " .. sub( text, 2 )

            arguments = sub( text, #command + 2 )

            switch command
                when "whisper"
                    text = "/emotion" .. arguments

                when "emotion"
                    text = "/coin" .. arguments

                when "coin"
                    text = "/roll" .. arguments

                when "roll"
                    text = "/looc" .. arguments

                when "looc"
                    text = "/ooc" .. arguments

                when "ooc"
                    text = "/whisper" .. arguments

        else
            text = "/whisper " .. text

        return text

:GetTeamColor, :Translate = Jailbreak
:GetPhrase = language

do

    :horizon = Colors

    messageHandlers[ CHAT_TEXT ] = ( listener, speaker, data ) ->
        if data[ 3 ]
            insert( dark_white )
            insert( GetPhrase( "jb.chat.dead" ), "[]", true )

        teamID = data[ 4 ]
        if teamID
            insert( GetTeamColor( teamID ) )
            insert( GetPhrase( "jb.chat.team." .. teamID ), "[]", true )

        if data[ 5 ]
            insert( horizon )
            insert( GetPhrase( "jb.walkie-talkie" ), "[]", true )

        text, nickname, isMuted = data[ 1 ], data[ 2 ], false

        if speaker\IsValid!
            if speaker\IsPlayer!
                if speaker\IsDeveloper!
                    insert( butterfly_bush )
                    insert( "/", "<>", true )

                insert( speaker\GetModelColor! )
                insert( nickname or speaker\Nick! )

                if speaker\IsMuted!
                    text, isMuted = GetPhrase( "jb.chat.muted" ), true

        elseif nickname
            insert( dark_white )
            insert( nickname )

        else
            insert( butterfly_bush )
            insert( GetPhrase( "jb.chat.console" ) )

        insert( white )
        insert( " " .. GetPhrase( "jb.chat.says" ) .. ": \"" )

        if isMuted
            insert( dark_white )

        insert( text )

        if isMuted
            insert( white )

        insert( "\"" )

do

    :turquoise = Colors

    OOCHandler = ( listener, speaker, data, isLocal ) ->
        if isLocal
            insert( blue )
            insert( GetPhrase( "jb.chat.looc" ), "[]", true )
        else
            insert( turquoise )
            insert( GetPhrase( "jb.chat.ooc" ), "[]", true )

        unless data[ 3 ]
            insert( dark_white )
            insert( GetPhrase( "jb.chat.dead" ), "[]", true )

        teamID = data[ 4 ]
        if teamID
            insert( GetTeamColor( teamID ) )
            insert( GetPhrase( "jb.chat.team." .. teamID ), "[]", true )

        text, nickname, isMuted = data[ 1 ], data[ 2 ], false

        if speaker\IsValid! and speaker\IsPlayer!
            if speaker\IsDeveloper!
                insert( butterfly_bush )
                insert( "/", "<>", true )

            insert( speaker\GetModelColor! )
            insert( nickname or speaker\Nick! )

            if speaker\IsMuted!
                text, isMuted = GetPhrase( "jb.chat.muted" ), true

        else
            insert( dark_white )
            insert( nickname )

        insert( white )
        insert( ": " )

        if isMuted
            insert( dark_white )

        insert( text )

    messageHandlers[ CHAT_OOC ] = OOCHandler

    messageHandlers[ CHAT_LOOC ] = ( listener, speaker, data ) ->
        return OOCHandler( listener, speaker, data, true )

do

    :remove = table

    messageHandlers[ CHAT_EMOTION ] = ( listener, speaker, data ) ->
        unless remove( data, 2 )
            insert( dark_white )
            insert( GetPhrase( "jb.chat.dead" ), "[]", true )

        nickname = remove( data, 1 )
        if speaker\IsValid! and speaker\IsPlayer!
            if speaker\IsMuted!
                return true

            if speaker\IsDeveloper!
                insert( butterfly_bush )
                insert( "/", "<>", true )

            insert( speaker\GetModelColor! )
            insert( nickname or speaker\Nick! )
        else
            insert( dark_white )
            insert( nickname )

        insert( white )
        insert( " " )

        for value in *data
            if isstring( value )
                value = Translate( value )

            insert( value )

do

    :MinWhisperDistance, :MaxWhisperDistance = Jailbreak
    :floor, :random, :max = math
    :sub = utf8

    replaceSymbols = { "#", "*", "~", "-", " " }

    messageHandlers[ CHAT_WHISPER ] = ( listener, speaker, data ) ->
        unless data[ 3 ]
            insert( dark_white )
            insert( GetPhrase( "jb.chat.dead" ), "[]", true )

        teamID = data[ 4 ]
        if teamID
            insert( GetTeamColor( teamID ) )
            insert( GetPhrase( "jb.chat.team." .. teamID ), "[]", true )

        text, nickname, isMuted = data[ 1 ], data[ 2 ], false

        if speaker\IsValid! and speaker\IsPlayer!
            if speaker\IsDeveloper!
                insert( butterfly_bush )
                insert( "/", "<>", true )

            insert( speaker\GetModelColor! )
            insert( nickname or speaker\Nick! )

            if speaker\IsMuted!
                text, isMuted = GetPhrase( "jb.chat.muted" ), true

            distance, minDistance = speaker\EyePos!\Distance( listener\EyePos! ), MinWhisperDistance\GetInt!
            if distance > minDistance
                maxDistance = MaxWhisperDistance\GetInt!
                if distance > maxDistance
                    return true

                lostSymbols = {}
                length = #text

                fraction = ( distance - minDistance ) / ( maxDistance - minDistance )
                for i = 1, floor( length * fraction )
                    index = random( 1, length )
                    while lostSymbols[ index ] ~= nil
                        index = random( 1, length )

                    lostSymbols[ index ] = true

                newText = ""
                for i = 1, floor( length * max( 1 - fraction, 0.25 ) )
                    if lostSymbols[ i ]
                        newText ..= replaceSymbols[ random( 1, #replaceSymbols ) ]
                    else
                        newText ..= sub( text, i, i )

                text = newText

        else
            insert( dark_white )
            insert( nickname )

        insert( white )
        insert( " " .. GetPhrase( "jb.chat.whispers" ) .. ": \"" )

        if isMuted
            insert( dark_white )

        insert( text )

        if isMuted
            insert( white )

        insert( "\"" )

messageHandlers[ CHAT_CUSTOM ] = ( _, __, data ) ->
    for value in *data
        if isstring( value )
            value = Translate( value )

        insert( value )

messageHandlers[ CHAT_SERVERMESSAGE ] = ( _, __, data ) ->
    insert( data[ 2 ] or dark_white )
    insert( Translate( data[ 1 ] ), nil )

messageHandlers[ CHAT_CONNECTED ] = ( _, __, data ) ->
    insert( white )
    insert( GetPhrase( "jb.player" ) .. " " )

    insert( data[ 1 ] )
    insert( data[ 2 ] )

    steamID = data[ 3 ]
    if steamID
        insert( white )
        insert( " ( " )

        insert( blue )
        insert( steamID )

        insert( white )
        insert( " )" )

    insert( white )
    insert( " " .. GetPhrase( "jb.chat.player.connected" ) )

do

    :asparagus = Colors

    messageHandlers[ CHAT_CONNECT ] = ( _, __, data ) ->
        insert( white )
        insert( GetPhrase( "jb.player" ) .. " " )

        insert( asparagus )
        insert( data[ 1 ] )

        address = data[ 2 ]
        if address
            insert( white )
            insert( " ( " )

            insert( blue )
            insert( address )

            insert( white )
            insert( " )" )

        insert( white )
        insert( " " .. GetPhrase( "jb.chat.player.connecting" ) )

do

    :au_chico = Colors

    messageHandlers[ CHAT_DISCONNECT ] = ( _, __, data ) ->
        insert( white )
        insert( GetPhrase( "jb.player" ) .. " " )

        insert( au_chico )
        insert( data[ 1 ] )

        steamID = data[ 2 ]
        if steamID
            insert( white )
            insert( " ( " )

            insert( blue )
            insert( steamID )

            insert( white )
            insert( " )" )

        insert( white )

        reason = data[ 3 ]
        if reason ~= nil
            insert( " " .. GetPhrase( "jb.chat.player.disconnected_with_reason" ) .. ": \"" )

            insert( dark_white )
            insert( reason )

            insert( white )
            insert( "\"" )
        else
            insert( " " .. GetPhrase( "jb.chat.player.disconnected" ) )

messageHandlers[ CHAT_NAMECHANGE ] = ( _, __, data ) ->
    insert( white )
    insert( GetPhrase( "jb.player" ) .. " " )

    color = data[ 3 ]

    insert( color )
    insert( data[ 1 ] )

    insert( white )
    insert( " " .. GetPhrase( "jb.chat.player.changed_name" ) .. " " )

    insert( color )
    insert( data[ 2 ] )

    insert( white )
    insert( "." )

do

    :GetName = achievements
    :vivid_orange = Colors

    messageHandlers[ CHAT_ACHIEVEMENT ] = ( _, speaker, data ) ->
        insert( white )
        insert( GetPhrase( "jb.player" ) .. " " )

        if speaker\IsValid! and speaker\IsPlayer!
            insert( speaker\GetModelColor!)
            insert( speaker\Nick! )
        else
            insert( white )
            insert( data[ 2 ] )

        insert( white )
        insert( " " .. GetPhrase( "jb.chat.got_achievement" ) .. " " )

        insert( vivid_orange )
        if isstring( data[ 1 ] )
            insert( data[ 1 ] )
        else
            insert( GetName( isnumber( data[ 1 ] ) and data[ 1 ] or 2 ) )
