Jailbreak = Jailbreak
GM = GM

:PlaySound, :DrawRect, :SetDrawColor, :DrawText, :SetTextColor, :SetTextPos, :GetTextSize, :SetFont = surface
:ceil, :min, :max, :sin, :floor, :random, :log, :Rand, :Round, :Clamp = math
:TeamIsJoinable, :ChangeTeam, :Colors, :VMin = Jailbreak
:format, :upper, :find, :Explode = string
:GetColor, :GetName, :GetScore = team
:GetPhrase = language
list_Set = list.Set
hook_Add = hook.Add
hook_Run = hook.Run
IsValid = IsValid
:GetAll = player
Vector = Vector
pairs = pairs

TEAM_SPECTATOR = TEAM_SPECTATOR
ROUND_RUNNING = ROUND_RUNNING

TEAM_PRISONER = TEAM_PRISONER
TEAM_GUARD = TEAM_GUARD

Jailbreak.Font( "Jailbreak::TeamSelect - Button", "Roboto Mono Medium", 4 )
Jailbreak.Font( "Jailbreak::TeamSelect", "Roboto Mono Bold", 4 )
:dark_grey, :black, :white, :light_grey = Colors

PANEL_META = FindMetaTable( "Panel" )

GM.ContextMenuEnabled = ->
    return true

GM.ContextMenuOpen = ->
    return true

do

    :GetRoundState, :GetRemainingTime = Jailbreak
    TEXT_ALIGN_CENTER = TEXT_ALIGN_CENTER
    :GetCursorPos, :SetCursorPos = input
    CloseDermaMenus = CloseDermaMenus

    PANEL = {}

    AccessorFunc( PANEL, "m_bHangOpen", "HangOpen" )

    PANEL.Init = =>
        @CursorX, @CursorY = 0, 0
        @SetWorldClicker( true )
        @m_bHangOpen = false
        @Dock( FILL )

    PANEL.Open = =>
        @SetHangOpen( false )

        if IsValid( g_SpawnMenu ) and g_SpawnMenu\IsVisible!
            g_SpawnMenu\Close( true )

        if @IsVisible!
            return

        CloseDermaMenus!

        @MakePopup!
        @SetVisible( true )
        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( true )

        @InvalidateLayout( true )
        SetCursorPos( @CursorX, @CursorY )

    PANEL.Close = ( bSkipAnim ) =>
        if @GetHangOpen!
            @SetHangOpen( false )
            return

        @CursorX, @CursorY = GetCursorPos!
        CloseDermaMenus!

        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( false )

        @SetAlpha( 255 )
        @SetVisible( false )

    PANEL.StartKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( true )
        @SetHangOpen( true )

    PANEL.EndKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( false )

    PANEL.Paint = ( width, height ) =>
        if GetRoundState! ~= ROUND_RUNNING
            return

        remainingTime = GetRemainingTime!
        if remainingTime == 0
            return

        SetFont( "Jailbreak::RoundState" )
        text = format( GetPhrase( "jb.round.2" ), remainingTime )
        x, y = Jailbreak.ScreenCenterX - GetTextSize( text ) / 2, VMin( 1 )

        SetTextPos( x - 1, y - 1 )
        SetTextColor( black.r, black.g, black.b, 50 )
        DrawText( text )

        SetTextPos( x + 3, y + 3 )
        SetTextColor( black.r, black.g, black.b, 120 )
        DrawText( text )

        SetTextColor( white )
        SetTextPos( x, y )
        DrawText( text )

    vgui.Register( "Jailbreak::ContextMenu", PANEL, "EditablePanel" )

    do

        PANEL = {}

        PANEL.Init = =>
            @SetText( "" )

            label = @Add( "DLabel" )
            @Label = label

            label\Dock( BOTTOM )
            label\SetContentAlignment( 5 )
            label\SetTextColor( white )
            label\SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )

            image = @Add( "DImage" )
            @Image = image

            image\SetSize( 64, 64 )
            image\Dock( TOP )
            image\DockMargin( 8, 0, 8, 0 )

        PANEL.Setup = ( title, icon ) =>
            @Image\SetImage( icon )
            @Label\SetText( title )
            @SetTooltip( title )
            @InvalidateLayout!

        PANEL.GetImage = =>
            image = @m_Image
            if image and image\IsValid!
                return image\GetImage!

            return ""

        PANEL.SetImage = ( imagePath ) =>
            image = @m_Image

            unless imagePath
                if IsValid( image )
                    image\Remove!

                return

            unless IsValid( image )
                image = @Add "DImage"
                @m_Image = image

            image\SetMouseInputEnabled( false )
            image\SetImage( imagePath )
            image\SizeToContents!
            @InvalidateLayout!

        PANEL.PerformLayout = =>
            size = VMin( 8 )
            width, height = size, size + VMin( 0.5 )
            @SetSize( width, height )

            image = @m_Image
            if IsValid( image )

                imageWidth, imageHeight = image\GetSize!

                targetSize = min( width - 4, height - 4 )
                zoom = min( targetSize / imageWidth, targetSize / imageHeight, 1 )
                newSizeX = ceil( imageWidth * zoom )
                newSizeY = ceil( imageHeight * zoom )

                image\SetWide( newSizeX )
                image\SetTall( newSizeY )

                x, y = width - imageWidth, height - imageHeight

                for panel in *@GetChildren!
                    if panel\IsVisible! and panel\GetDock! == BOTTOM
                        y -= panel\GetTall!

                image\SetPos( 0, y )
                @SetTextInset( imageWidth + 16, 0 )

            DLabel.PerformLayout( @, width, height )

        PANEL.Paint = ( width, height ) =>

        vgui.Register( "Jailbreak::ContextMenu - Button", PANEL, "DButton" )

    CreateContextMenu = ->
        unless hook_Run( "ContextMenuEnabled" )
            return

        contextMenu = g_ContextMenu
        if IsValid( contextMenu )
            contextMenu\Remove!

        contextMenu = vgui.Create( "Jailbreak::ContextMenu" )
        unless IsValid( contextMenu )
            return

        global g_ContextMenu = contextMenu
        contextMenu\SetVisible( false )

        hook_Add "LanguageChanged", contextMenu, =>
            hook.Remove "LanguageChanged", @
            @Remove!

        contextMenu.OnMousePressed = ( _, code ) ->
            hook_Run( "GUIMousePressed", code, gui.ScreenToVector( input.GetCursorPos! ) )

        contextMenu.OnMouseReleased = ( _, code ) ->
            hook_Run( "GUIMouseReleased", code, gui.ScreenToVector( input.GetCursorPos! ) )

        hook_Run( "ContextMenuCreated", contextMenu )

        iconLayout = contextMenu\Add( "DIconLayout" )
        iconLayout\SetBorder( 8 )
        iconLayout\SetSpaceX( 8 )
        iconLayout\SetSpaceY( 8 )
        iconLayout\SetLayoutDir( LEFT )
        iconLayout\SetStretchWidth( true )
        iconLayout\SetStretchHeight( false )
        iconLayout\Dock( LEFT )

        iconLayout.OnMousePressed = ( ... ) =>
            @GetParent!\OnMousePressed( ... )

        desktopWindows = {}
        for _, desktopWindow in pairs( list.Get( "DesktopWindows" ) )
            desktopWindows[] = desktopWindow

        table.sort desktopWindows, ( a, b ) ->
            if a.order and b.order
                return a.order < b.order

            return a.title < b.title

        for desktopWindow in *desktopWindows
            icon = iconLayout\Add( "Jailbreak::ContextMenu - Button" )
            icon\Setup( desktopWindow.title, desktopWindow.icon )

            created = desktopWindow.created
            if isfunction( created )
                created( icon )

            think = desktopWindow.think
            if isfunction( think )
                hook_Add "Think", icon, think

            click = desktopWindow.click
            if isfunction( click )
                icon.DoClick = click

            init = desktopWindow.init
            if isfunction( init )
                icon.DoClick = ->
                    window = icon.Window
                    if desktopwindow.onewindow and IsValid( window )
                        window\Center!
                        return

                    window = g_ContextMenu\Add( "DFrame" )
                    icon.Window = window

                    window\SetSize( desktopwindow.width, desktopwindow.height )
                    window\SetTitle( title )
                    window\Center!

                    init( icon, window )

        return contextMenu

    GM.OnContextMenuOpen = =>
        unless hook_Run( "ContextMenuOpen" )
            return

        contextMenu = g_ContextMenu
        unless IsValid( contextMenu )
            contextMenu = CreateContextMenu!

        unless contextMenu\IsVisible!
            contextMenu\Open!

        hook_Run( "ContextMenuOpened" )

    GM.OnContextMenuClose = =>
        contextMenu = g_ContextMenu
        if IsValid( contextMenu )
            if cvars.Number( "developer", 0 ) > 2
                contextMenu\Remove!
            else
                contextMenu\Close!

        hook_Run( "ContextMenuClosed" )

do

    :IsKeyDown = input
    :Create = vgui

    showTeam = ->
        panel = g_TeamSelect
        if IsValid( panel )
            panel\Remove!
            return

        if IsKeyDown( 70 )
            return

        global g_TeamSelect = Create( "Jailbreak::TeamSelect" )

    Jailbreak.ShowTeam = showTeam
    concommand.Add "jb_showteam", showTeam

-- Button
do

    -- TODO: Rewrite this
    PANEL = {}

    PANEL.Init = =>
        @SetTextColor( white )
        @SetFont( "Jailbreak::TeamSelect - Button" )

    PANEL.OnCursorEntered = =>
        unless @IsEnabled!
            return

        PlaySound( "garrysmod/ui_hover.wav" )

    PANEL.Paint = ( width, height ) =>
        color = @Color
        unless color
            return

        r, g, b = color\Unpack!

        a = 180
        if not @IsEnabled!
            a = 150
        elseif @Hovered
            a = 250

        SetDrawColor( r, g, b, a )
        DrawRect( 0, 0, width, height )

    PANEL.DoClick = =>
        unless @IsEnabled!
            return

        PlaySound( "garrysmod/ui_click.wav" )

        teamID = @Team
        if teamID
            ChangeTeam( teamID )
        else

            ply = Jailbreak.Player
            unless IsValid( ply )
                return

            for i = 1, 2
                if i ~= ply\Team! and TeamIsJoinable( i )
                    ChangeTeam( i )
                    break

        panel = @MainPanel
        if IsValid( panel )
            panel\Remove!

    PANEL.SetText = ( str ) =>
        PANEL_META.SetText( @, Jailbreak.Translate( str ) )

    PANEL.Think = =>
        teamID = @Team
        unless teamID
            enabled = false
            for i = 1, 2
                if TeamIsJoinable( i )
                    enabled = true
                    break

            if enabled ~= @IsEnabled!
                @SetEnabled( enabled )
                @SetCursor( enabled and "hand" or "no" )

            return

        unless @Color
            @Color = GetColor( teamID )

        count = team.NumPlayers( teamID )
        if count ~= @Count
            @SetText( GetName( teamID ) .. " x" .. count )
            @Count = count

        ply = Jailbreak.Player
        unless IsValid( ply )
            return

        enabled = teamID ~= ply\Team! and TeamIsJoinable( teamID )
        if enabled ~= @IsEnabled!
            @SetEnabled( enabled )
            @SetCursor( enabled and "hand" or "no" )

    vgui.Register( "Jailbreak::TeamSelect - Button", PANEL, "DButton" )

-- Main Panel
do

    PANEL = {}

    PANEL.OnRemove = =>
        hook.Remove "PlayerButtonDown", @

    PANEL.CloseKeys = {
        [ 107 ]: true
        [ 108 ]: true
        [ 109 ]: true
    }

    PANEL.Init = =>
        @DockPadding( 16, 16, 16, 16 )

        hook_Add "PlayerButtonDown", @, ( ply, key ) =>
            if ( @CloseKeys[ key ] and not ( @Hovered or @IsChildHovered! ) ) or key == 70
                @Remove!

    	@MakePopup!
	    @SetKeyboardInputEnabled( false )

        -- Title Text
        do

            title = @Add( "DLabel" )
            title\SetText( "#jb.team-select" )
            title\SetTextColor( white )
            title\SetContentAlignment( 5 )
            title\SetFont( "Jailbreak::TeamSelect" )

            title\DockMargin( 0, 0, 0, 16 )
            title\Dock( TOP )

            title.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

        subPanel = @Add( "EditablePanel" )
        subPanel\Dock( FILL )

        -- TEAM_GUARD
        do

            button = subPanel\Add( "Jailbreak::TeamSelect - Button" )
            button.Team = TEAM_GUARD
            button.MainPanel = @
            button\Dock( LEFT )

            button.PerformLayout = =>
                @SetWide( subPanel\GetWide! * 0.5 - 8 )

        -- TEAM_PRISONER
        do

            button = subPanel\Add( "Jailbreak::TeamSelect - Button" )
            button.Team = TEAM_PRISONER
            button.MainPanel = @
            button\Dock( RIGHT )

            button.PerformLayout = =>
                @SetWide( subPanel\GetWide! * 0.5 - 8 )

        -- TEAM_SPECTATOR
        do

            button = @Add( "Jailbreak::TeamSelect - Button" )
            button\SetText( "#jb.team.spectate" )
            button.Team = TEAM_SPECTATOR
            button.MainPanel = @

            button\SetTextColor( dark_grey )
            button\DockMargin( 0, 16, 0, 0 )
            button\Dock( BOTTOM )

            button.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

        -- Random Team
        do

            button = @Add( "Jailbreak::TeamSelect - Button" )
            button\SetText( "#jb.team.random" )
            button.Color = Colors.asparagus
            button.MainPanel = @

            button\DockMargin( 0, 16, 0, 0 )
            button\Dock( BOTTOM )

            button.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

        @InvalidateLayout( true )

    do

        :IsKeyDown = input

        PANEL.Think = =>
            if IsKeyDown( 70 )
                @Remove!
            elseif IsKeyDown( 2 ) and TeamIsJoinable( TEAM_GUARD )
                ChangeTeam( TEAM_GUARD )
                @Remove!
            elseif IsKeyDown( 3 ) and TeamIsJoinable( TEAM_PRISONER )
                ChangeTeam( TEAM_PRISONER )
                @Remove!
            elseif IsKeyDown( 4 )
                ply = Jailbreak.Player
                unless IsValid( ply )
                    return

                for teamID = 1, 2
                    if teamID ~= ply\Team! and TeamIsJoinable( teamID )
                        ChangeTeam( teamID )
                        @Remove!
                        break
            elseif IsKeyDown( 5 )
                ChangeTeam( TEAM_SPECTATOR )
                @Remove!

    do

        :IsGameUIVisible, :HideGameUI = gui

        PANEL.OnRemove = =>
            if IsGameUIVisible!
                HideGameUI!

    PANEL.PerformLayout = ( width, height ) =>
        @SetSize( Jailbreak.ScreenWidth * 0.5, Jailbreak.ScreenHeight * 0.5 )
        @Center!

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
        DrawRect( 0, 0, width, height )

    vgui.Register( "Jailbreak::TeamSelect", PANEL, "EditablePanel" )

PANEL_META = FindMetaTable( "Panel" )

do

    Jailbreak.Font( "Jailbreak::Scoreboard - Player", "Roboto Mono Bold", 2 )

    PANEL = {}

    PANEL.Init = =>
        avatar = @Add( "AvatarImage" )
        avatar\Dock( LEFT )
        @Avatar = avatar

        avatar.OnMousePressed = ( _, keyCode ) ->
            ply = @Player
            unless IsValid( ply ) and ply\IsPlayer!
                return

            if ply\IsBot!
                return

            steamid64 = ply\SteamID64!

            switch keyCode
                when MOUSE_LEFT
                    gui.OpenURL( "https://steamcommunity.com/profiles/" .. steamid64 )
                when MOUSE_RIGHT
                    menu = DermaMenu!

                    menu\AddOption "#jb.user.profile", ->
                        gui.OpenURL( "https://steamcommunity.com/profiles/" .. steamid64 )

                    menu\AddOption "#jb.user.steamid64", ->
                        notification.AddLegacy( "#jb.notify.steamid64", NOTIFY_GENERIC, 3 )
                        PlaySound( "buttons/button18.wav" )
                        SetClipboardText( steamid64 )

                    do

                        isMuted = ply\IsMuted!
                        option = menu\AddOption "#jb.user.mute", ->
                            if ply\IsValid!
                                ply\SetMuted( not isMuted )

                        option\SetChecked( isMuted )

                    menu\Open!

        nickname = @Add( "DLabel" )
        nickname\Dock( FILL )
        @Nickname = nickname

        nickname\SetFont( "Jailbreak::Scoreboard - Player" )
        nickname\SetTextColor( dark_grey )
        nickname\SetContentAlignment( 4 )

        ping = @Add( "DLabel" )
        ping\Dock( RIGHT )
        @Ping = ping

        ping\SetFont( "Jailbreak::Scoreboard - Player" )
        ping\SetTextColor( dark_grey )
        ping\SetContentAlignment( 5 )
        ping\SetZPos( 1000 )
        ping\SetText( "0" )

        ratio = @Add( "DLabel" )
        ratio\Dock( RIGHT )
        @Ratio = ratio

        ratio\SetFont( "Jailbreak::Scoreboard - Player" )
        ratio\SetContentAlignment( 5 )
        ratio\SetTextColor( dark_grey )
        ratio\SetZPos( 2000 )
        ratio\SetText( "0" )

        @Color = light_grey
        @Text = "unknown"

    PANEL.Setup = ( ply ) =>
        unless IsValid( ply ) and ply\IsPlayer!
            return

        @Player = ply
        @InvalidateLayout!

    PANEL.Think = =>
        ply = @Player
        unless ply
            return

        unless ply\IsValid!
            @Remove!
            return

        pingPanel, pingStr = @Ping, tostring( ply\Ping! ) .. "ms"
        if IsValid( pingPanel ) and pingPanel\GetText! ~= pingStr
            pingPanel\SetTooltip( pingStr )
            pingPanel\SetText( pingStr )

        ratioPanel, ratioStr = @Ratio, "#{ply\Frags!}:#{ply\Deaths!}"
        if IsValid( ratioPanel ) and ratioPanel\GetText! ~= ratioStr
            ratioPanel\SetTooltip( ratioStr )
            ratioPanel\SetText( ratioStr )


    PANEL.PerformLayout = =>
        if @GetDock! ~= TOP
            @Dock( TOP )

        offset = VMin( 0.5 )
        @DockMargin( 0, 0, 0, offset )
        @DockPadding( offset, offset, offset, offset )

        height = VMin( 2.5 ) + offset * 2

        ply = @Player
        if IsValid( ply )
            @Color = ply\Alive! and ply\GetTeamColor! or light_grey

            text = ply\Nick!
            @SetTooltip( text )

            SetFont( "Jailbreak::Scoreboard - Player" )
            textWidth, textHeight = GetTextSize( text )
            height = max( height, textHeight + offset * 2 )

            nickname = @Nickname
            if IsValid( nickname )
                nickname\DockMargin( offset, 0, 0, 0 )
                nickname\SetTooltip( text )

                if nickname\GetText! ~= text
                    nickname\SetText( text )

            avatar = @Avatar
            if IsValid( avatar )
                if avatar\GetDock! ~= LEFT
                    avatar\Dock( LEFT )

                avatarHeight = avatar\GetTall!
                avatar\SetWide( avatarHeight )
                avatar\SetPlayer( ply, Clamp( 2 ^ floor( log( ceil( avatarHeight ), 2 ) ), 16, 512 ) )

        @SetTall( height )
        CloseDermaMenus!

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( @Color )
        DrawRect( 0, 0, width, height )

    vgui.Register( "Jailbreak::Scoreboard - Player", PANEL, "EditablePanel" )

do

    Jailbreak.Font( "Jailbreak::Scoreboard - Header", "Roboto Mono Bold", 4 )

    PANEL = {}

    PANEL.Init = =>
        @Team = TEAM_SPECTATOR
        @InvalidateLayout( true )

    PANEL.PerformLayout = =>
        if @GetDock! ~= TOP
            @Dock( TOP )

        teamID = @Team
        @Color = GetColor( teamID )
        text = GetName( teamID )
        @SetTooltip( text )

        SetFont( "Jailbreak::Scoreboard - Header" )
        textWidth, textHeight = GetTextSize( text )
        width = @GetWide!
        @Text = text

        offset = VMin( 0.5 )
        height = textHeight + offset * 2
        @SetTall( height )

        if @Team == TEAM_SPECTATOR
            @TextPosX, @TextPosY = ( width - textWidth ) / 2, ( height - textHeight ) / 2
            @RectX, @RectWidth = 0, width
            return

        score = tostring( GetScore( teamID ) )
        scoreWidth, scoreHeight = GetTextSize( score )
        scoreSize = max( scoreWidth + offset, VMin( 5 ) )
        @ScoreX, @ScoreY = ( scoreSize - scoreWidth ) / 2, ( height - scoreHeight ) / 2
        @ScoreSize = scoreSize
        @Score = score

        scoreX = scoreSize + offset
        @RectX, @RectWidth = scoreX, width - scoreX
        @TextPosX, @TextPosY = scoreX + ( width - scoreX - textWidth ) / 2, ( height - textHeight ) / 2

    PANEL.Paint = ( width, height ) =>
        SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b )
        SetFont( "Jailbreak::Scoreboard - Header" )
        SetDrawColor( @Color )

        if @Team ~= TEAM_SPECTATOR
            DrawRect( 0, 0, @ScoreSize, height )
            SetTextPos( @ScoreX, @ScoreY )
            DrawText( @Score )

        DrawRect( @RectX, 0, @RectWidth, height )

        SetTextPos( @TextPosX, @TextPosY )
        DrawText( @Text )

    vgui.Register( "Jailbreak::Scoreboard - Header", PANEL, "Panel" )

do

    PANEL = {}

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( black.r, black.g, black.b, 100 )
        DrawRect( 0, 0, width, height )

    vgui.Register( "Jailbreak::Scoreboard - ScrollPanel", PANEL, "DScrollPanel" )

do

    Jailbreak.Font( "Jailbreak::Scoreboard - Small", "Roboto Mono Medium Italic", 2 )

    PANEL = {}

    PANEL.Init = =>
        header = @Add( "DLabel" )
        @Header = header

        header\Dock( TOP )
        header\SetTextColor( white )
        header\SetContentAlignment( 5 )
        header\SetFont( "Jailbreak::Scoreboard - Header" )

        prisoners = @Add( "EditablePanel" )
        @Prisoners = prisoners

        label = prisoners\Add( "Jailbreak::Scoreboard - Header" )
        prisoners.Label = label

        label.Team = TEAM_PRISONER
        label\InvalidateLayout!

        scrollPanel = prisoners\Add( "Jailbreak::Scoreboard - ScrollPanel" )
        prisoners.ScrollPanel = scrollPanel
        scrollPanel\Dock( FILL )

        guards = @Add( "EditablePanel" )
        @Guards = guards

        label = guards\Add( "Jailbreak::Scoreboard - Header" )
        guards.Label = label

        label.Team = TEAM_GUARD
        label\InvalidateLayout!

        scrollPanel = guards\Add( "Jailbreak::Scoreboard - ScrollPanel" )
        guards.ScrollPanel = scrollPanel
        scrollPanel\Dock( FILL )

        spectators = @Add( "EditablePanel" )
        @Spectators = spectators
        spectators\SetZPos( -1000 )

        label = spectators\Add( "Jailbreak::Scoreboard - Header" )
        spectators.Label = label

        label.Team = TEAM_SPECTATOR
        label\InvalidateLayout!

        scrollPanel = spectators\Add( "Jailbreak::Scoreboard - ScrollPanel" )
        spectators.ScrollPanel = scrollPanel
        scrollPanel\Dock( FILL )

        playerCount = @Add( "DLabel" )
        @PlayerCount = playerCount

        playerCount\SetZPos( -5000 )
        playerCount\SetTextColor( white )
        playerCount\SetContentAlignment( 5 )
        playerCount\SetFont( "Jailbreak::Scoreboard - Small" )

    PANEL.PerformLayout = =>
        size = VMin( 80 )
        @SetSize( size, size )
        @Center!

        padding = VMin( 1 )
        margin = VMin( 0.5 )

        header = @Header
        if IsValid( header )
            header\SetText( GetHostName! )
            header\DockMargin( 0, 0, 0, margin )
            header\SizeToContentsY!

        prisoners = @Prisoners
        if IsValid( prisoners )
            if prisoners\GetDock! ~= LEFT
                prisoners\Dock( LEFT )

            label = prisoners.Label
            if IsValid( label )
                label\DockMargin( 0, 0, 0, margin )

            scrollPanel = prisoners.ScrollPanel
            if IsValid( scrollPanel )
                vbar = scrollPanel.VBar
                if IsValid( vbar )
                    vbar\SetWide( 0 )

            prisoners\SetWide( size / 2 - padding - margin / 2 )

        guards = @Guards
        if IsValid( guards )
            if guards\GetDock! ~= RIGHT
                guards\Dock( RIGHT )

            label = guards.Label
            if IsValid( label )
                label\DockMargin( 0, 0, 0, margin )

            scrollPanel = guards.ScrollPanel
            if IsValid( scrollPanel )
                vbar = scrollPanel.VBar
                if IsValid( vbar )
                    vbar\SetWide( 0 )

            guards\SetWide( size / 2 - padding - margin / 2 )

        spectators = @Spectators
        if IsValid( spectators )
            if spectators\GetDock! ~= BOTTOM
                spectators\Dock( BOTTOM )

            spectators\DockMargin( 0, margin, 0, margin )

            label = spectators.Label
            if IsValid( label )
                label\DockMargin( 0, 0, 0, margin )

            scrollPanel = spectators.ScrollPanel
            if IsValid( scrollPanel )
                vbar = scrollPanel.VBar
                if IsValid( vbar )
                    vbar\SetWide( 0 )

            spectators\SetTall( size / 4 )

        playerCount = @PlayerCount
        if IsValid( playerCount )
            if playerCount\GetDock! ~= BOTTOM
                playerCount\Dock( BOTTOM )

            teams = Jailbreak.GetTeamPlayersCount( nil, TEAM_PRISONER, TEAM_GUARD )
            playerCount\SetText( format( GetPhrase( "jb.scoreboard.players-online" ), player.GetCount!, teams[ 1 ], teams[ 2 ] ) )
            playerCount\SizeToContentsY!

        @DockPadding( padding, padding, padding, padding )

    PANEL.ClearPlayers = =>
        scrollPanel = @Prisoners.ScrollPanel
        if IsValid( scrollPanel )
            scrollPanel\Clear!

        scrollPanel = @Guards.ScrollPanel
        if IsValid( scrollPanel )
            scrollPanel\Clear!

        scrollPanel = @Spectators.ScrollPanel
        if IsValid( scrollPanel )
            scrollPanel\Clear!

    PANEL.AddPlayers = =>
        prisoners, guards, spectators = @Prisoners.ScrollPanel, @Guards.ScrollPanel, @Spectators.ScrollPanel
        for ply in *GetAll!
            panel = vgui.Create( "Jailbreak::Scoreboard - Player" )
            panel\Setup( ply )

            switch ply\Team!
                when TEAM_PRISONER
                    prisoners\AddItem( panel )
                when TEAM_GUARD
                    guards\AddItem( panel )
                when TEAM_SPECTATOR
                    spectators\AddItem( panel )

    PANEL.Show = =>
        PANEL_META.Show( @ )
        CloseDermaMenus!
        @AddPlayers!
        @MakePopup!
        @InvalidateLayout!

    PANEL.Hide = =>
        @ClearPlayers!
        CloseDermaMenus!
        PANEL_META.Hide( @ )

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
        DrawRect( 0, 0, width, height )

    vgui.Register( "Jailbreak::Scoreboard", PANEL )

GM.ScoreboardShow = =>
    scoreboard = @ScoreBoard

    if cvars.Number( "developer", 0 ) > 2 and IsValid( scoreboard )
        scoreboard\Remove!

    unless IsValid( scoreboard )
        scoreboard = vgui.Create( "Jailbreak::Scoreboard" )
        @ScoreBoard = scoreboard

    scoreboard\Show!
    return false

GM.ScoreboardHide = =>
    scoreboard = @ScoreBoard
    if IsValid( scoreboard )
        scoreboard\Hide!
