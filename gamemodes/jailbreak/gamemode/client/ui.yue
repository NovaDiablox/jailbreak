Jailbreak = Jailbreak
GM = GM

:PlaySound, :DrawRect, :SetDrawColor, :DrawText, :SetTextColor, :SetTextPos, :GetTextSize, :SetFont = surface
:TeamIsJoinable, :ChangeTeam, :Colors, :VMin, :Translate, :GetTeamColor = Jailbreak
:ceil, :min, :max, :floor, :log, :Clamp = math
:IsGameUIVisible, :HideGameUI = gui
:Create, :Register = vgui
:GetPhrase = language
hook_Add = hook.Add
hook_Run = hook.Run
:IsKeyDown = input
IsValid = IsValid
:format = string
:GetScore = team
:GetAll = player
select = select
pairs = pairs

TEAM_SPECTATOR = TEAM_SPECTATOR
ROUND_RUNNING = ROUND_RUNNING

TEAM_PRISONER = TEAM_PRISONER
TEAM_GUARD = TEAM_GUARD

:dark_grey, :black, :white, :light_grey = Colors

PANEL_META = FindMetaTable( "Panel" )

GM.ContextMenuEnabled = ->
    return true

GM.ContextMenuOpen = ->
    return true

do

    :GetRoundState, :GetRemainingTime = Jailbreak
    :GetCursorPos, :SetCursorPos = input
    CloseDermaMenus = CloseDermaMenus

    PANEL = {}

    AccessorFunc( PANEL, "m_bHangOpen", "HangOpen" )

    PANEL.Init = =>
        @CursorX, @CursorY = 0, 0
        @SetWorldClicker( true )
        @m_bHangOpen = false
        @Dock( FILL )

        scrollPanel = @Add( "DScrollPanel" )
        @ScrollPanel = scrollPanel

        scrollPanel.VBar\SetWide( 0 )
        scrollPanel\Dock( LEFT )

        scrollPanel.OnMousePressed = ( _, ... ) ->
            @OnMousePressed( ... )

        hook_Add "LanguageChanged", @, ->
            @InvalidateChildren( true )

        hook_Run( "ContextMenuCreated", @ )
        @SetVisible( false )

        desktopWindows = {}

        do

            index = 1

            for _, desktopWindow in pairs( list.Get( "DesktopWindows" ) )
                desktopWindows[ index ] = desktopWindow
                index += 1

        table.sort desktopWindows, ( a, b ) ->
            if a.order and b.order
                return a.order < b.order

            return a.title < b.title

        for data in *desktopWindows
            @AddItem( data )

    PANEL.PerformLayout = =>
        scrollPanel = @ScrollPanel
        width = 0

        for child in *scrollPanel\GetCanvas!\GetChildren!
            if child\GetName! ~= "Jailbreak::ContextMenu - Button"
                continue

            paddingLeft, paddingRight = child\GetDockPadding!
            width = max( width, paddingLeft + child.Label\GetTextSize! + paddingRight )

        scrollPanel\SetWide( width )

    PANEL.AddItem = ( data ) =>
        scrollPanel = @ScrollPanel
        unless scrollPanel\IsValid!
            return

        title = data.title

        button = scrollPanel\Add( "Jailbreak::ContextMenu - Button" )

        button.Image\SetImage( data.icon )
        button.Label\SetText( title )
        button\SetTooltip( title )

        @InvalidateLayout!

        created = data.created
        if isfunction( created )
            created( button )

        think = data.think
        if isfunction( think )
            hook_Add "Think", button, think

        click = data.click
        if isfunction( click )
            button.DoClick = click

        init = data.init
        if isfunction( init )
            button.DoClick = ->
                window = button.Window
                if data.onewindow and IsValid( window )
                    window\Remove!

                contextMenu = Jailbreak.ContextMenu
                unless IsValid( contextMenu )
                    return

                window = contextMenu\Add( "DFrame" )
                button.Window = window

                window\SetSize( data.width or 960, data.height or 700 )
                window\SetTitle( title )
                window\Center!

                init( button, window )

        return button

    PANEL.Open = =>
        @SetHangOpen( false )

        if IsValid( g_SpawnMenu ) and g_SpawnMenu\IsVisible!
            g_SpawnMenu\Close( true )

        if @IsVisible!
            return

        CloseDermaMenus!

        @MakePopup!
        @SetVisible( true )
        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( true )

        @InvalidateLayout( true )
        SetCursorPos( @CursorX, @CursorY )

    PANEL.Close = ( bSkipAnim ) =>
        if @GetHangOpen!
            @SetHangOpen( false )
            return

        @CursorX, @CursorY = GetCursorPos!
        CloseDermaMenus!

        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( false )

        @SetAlpha( 255 )
        @SetVisible( false )

    PANEL.StartKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( true )
        @SetHangOpen( true )

    PANEL.EndKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( false )

    do

        :ScreenToVector = gui

        PANEL.OnMousePressed = ( _, code ) ->
            hook_Run( "GUIMousePressed", code, ScreenToVector( GetCursorPos! ) )

        PANEL.OnMouseReleased = ( _, code ) ->
            hook_Run( "GUIMouseReleased", code, ScreenToVector( GetCursorPos! ) )

    PANEL.Paint = ( width, height ) =>
        if GetRoundState! ~= ROUND_RUNNING
            return

        remainingTime = GetRemainingTime!
        if remainingTime == 0
            return

        SetFont( "Jailbreak::RoundState" )
        text = format( GetPhrase( "jb.round.2" ), remainingTime )
        x, y = Jailbreak.ScreenCenterX - GetTextSize( text ) / 2, VMin( 1 )

        SetTextPos( x - 1, y - 1 )
        SetTextColor( black.r, black.g, black.b, 50 )
        DrawText( text )

        SetTextPos( x + 3, y + 3 )
        SetTextColor( black.r, black.g, black.b, 120 )
        DrawText( text )

        SetTextColor( white )
        SetTextPos( x, y )
        DrawText( text )

    Register( "Jailbreak::ContextMenu", PANEL, "EditablePanel" )

    do

        Jailbreak.Font( "Jailbreak::ContextMenu - Button", "Roboto Mono Bold", 1.25 )

        PANEL = {}

        PANEL.Init = =>
            @SetText( "" )
            @Dock( TOP )

            label = @Add( "DLabel" )
            @Label = label

            label\SetTextColor( white )
            label\SetContentAlignment( 5 )
            label\SetFont( "Jailbreak::ContextMenu - Button" )
            label\SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )
            label\Dock( BOTTOM )

            image = @Add( "DImage" )
            @Image = image

            image\SetMouseInputEnabled( false )
            image\Dock( FILL )

        PANEL.DoClick = ->

        PANEL.GetImage = =>
            return @Image\GetImage!

        PANEL.SetImage = ( materialPath ) =>
            @Image\SetImage( materialPath )
            @InvalidateLayout!

        PANEL.OnCursorEntered = =>
            unless @IsEnabled!
                return

            PlaySound( "garrysmod/ui_hover.wav" )

        PANEL.OnMouseReleased = ( mousecode ) =>
            @MouseCapture( false )

            unless @IsEnabled!
                return

            if not @Depressed and dragndrop.m_DraggingMain ~= @
                return

            if @Depressed
                @Depressed = nil
                @OnReleased!
                @InvalidateLayout( true )

            if @DragMouseRelease( mousecode )
                return

            if @IsSelectable! and mousecode == MOUSE_LEFT
                canvas = @GetSelectionCanvas!
                if canvas
                    canvas\UnselectAll!

            unless @Hovered
                return

            @Depressed = true

            PlaySound( "garrysmod/ui_click.wav" )

            if mousecode == MOUSE_RIGHT
                @DoRightClick!

            if mousecode == MOUSE_LEFT
                @DoClickInternal!
                @DoClick!

            if mousecode == MOUSE_MIDDLE
                @DoMiddleClick!

            @Depressed = nil

        PANEL.PerformLayout = =>
            margin = VMin( 0.5 )
            margin2 = margin * 2
            @Image\DockMargin( margin2, margin2, margin2, 0 )
            @DockPadding( margin, margin, margin, 0 )

            width = @GetWide!
            height = width

            label = @Label
            if IsValid( label )
                height += select( 2, label\GetTextSize! )

            @SetTall( height )

            DLabel.PerformLayout( @, width, height )

        PANEL.Paint = ( width, height ) ->

        Register( "Jailbreak::ContextMenu - Button", PANEL, "DButton" )

    GM.OnContextMenuOpen = =>
        unless hook_Run( "ContextMenuOpen" )
            return

        contextMenu = Jailbreak.ContextMenu
        unless hook_Run( "ContextMenuEnabled" )
            if IsValid( contextMenu )
                contextMenu\Remove!

            return

        unless IsValid( contextMenu )
            contextMenu = Create( "Jailbreak::ContextMenu" )
            Jailbreak.ContextMenu = contextMenu

        unless IsValid( contextMenu )
            return

        unless contextMenu\IsVisible!
            contextMenu\Open!

        hook_Run( "ContextMenuOpened", contextMenu )

    GM.OnContextMenuClose = =>
        contextMenu = Jailbreak.ContextMenu
        unless IsValid( contextMenu )
            return

        if Jailbreak.Developer
            contextMenu\Remove!
        else
            contextMenu\Close!

        hook_Run( "ContextMenuClosed", contextMenu )

do

    showTeam = ->
        menuIsVisible = IsGameUIVisible!

        teamSelect = Jailbreak.TeamSelect
        unless IsValid( teamSelect )
            if menuIsVisible
                return

            teamSelect = Create( "Jailbreak::TeamSelect" )
            Jailbreak.TeamSelect = teamSelect

        unless IsValid( teamSelect )
            return

        if teamSelect\IsVisible!
            teamSelect\Hide!
        elseif not menuIsVisible
            teamSelect\Show!

    Jailbreak.ShowTeam = showTeam
    concommand.Add "jb_showteam", showTeam

-- Button
do

    Jailbreak.Font( "Jailbreak::TeamSelect - Button", "Roboto Mono Medium", 4 )

    PANEL = {}

    PANEL.Init = =>
        @SetTextColor( white )
        @SetFont( "Jailbreak::TeamSelect - Button" )

    PANEL.OnCursorEntered = =>
        unless @IsEnabled!
            return

        PlaySound( "garrysmod/ui_hover.wav" )

    PANEL.Paint = ( width, height ) =>
        color = @Color
        unless color
            return

        r, g, b = color\Unpack!

        a = 180
        if not @IsEnabled!
            a = 150
        elseif @Hovered
            a = 250

        SetDrawColor( r, g, b, a )
        DrawRect( 0, 0, width, height )

    PANEL.DoClick = =>
        unless @IsEnabled!
            return

        PlaySound( "garrysmod/ui_click.wav" )

        teamID = @Team
        if teamID
            ChangeTeam( teamID )
        else

            ply = Jailbreak.Player
            unless IsValid( ply )
                return

            for i = 1, 2
                if i ~= ply\Team! and TeamIsJoinable( i )
                    ChangeTeam( i )
                    break

        panel = @MainPanel
        if IsValid( panel )
            panel\Remove!

    PANEL.SetText = ( str ) =>
        PANEL_META.SetText( @, Translate( str ) )

    PANEL.Think = =>
        teamID = @Team
        unless teamID
            enabled = false
            for i = 1, 2
                if TeamIsJoinable( i )
                    enabled = true
                    break

            if enabled ~= @IsEnabled!
                @SetEnabled( enabled )
                @SetCursor( enabled and "hand" or "no" )

            return

        unless @Color
            @Color = GetTeamColor( teamID )

        count = team.NumPlayers( teamID )
        if count ~= @Count
            @SetText( "#jb.team." .. teamID .. " x" .. count )
            @Count = count

        ply = Jailbreak.Player
        unless IsValid( ply )
            return

        enabled = teamID ~= ply\Team! and TeamIsJoinable( teamID )
        if enabled ~= @IsEnabled!
            @SetEnabled( enabled )
            @SetCursor( enabled and "hand" or "no" )

    Register( "Jailbreak::TeamSelect - Button", PANEL, "DButton" )

-- Main Panel
do

    Jailbreak.Font( "Jailbreak::TeamSelect", "Roboto Mono Bold", 4 )

    PANEL = {}

    PANEL.OnRemove = =>
        hook.Remove "PlayerButtonDown", @

    PANEL.CloseKeys = {
        [ 107 ]: true
        [ 108 ]: true
        [ 109 ]: true
    }

    PANEL.Init = =>
        @SetVisible( false )

        hook_Add "PlayerButtonDown", @, ( ply, key ) =>
            if ( @CloseKeys[ key ] and not ( @Hovered or @IsChildHovered! ) ) or key == 70
                @Hide!

    	@MakePopup!
	    @SetKeyboardInputEnabled( false )

        -- Title Text
        do

            title = @Add( "DLabel" )
            @Title = title

            title\SetText( "#jb.team-select" )
            title\SetTextColor( white )
            title\SetContentAlignment( 5 )
            title\SetFont( "Jailbreak::TeamSelect" )

            title\Dock( TOP )

            title.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

        subPanel = @Add( "EditablePanel" )
        subPanel\Dock( FILL )

        -- TEAM_GUARD
        do

            button = subPanel\Add( "Jailbreak::TeamSelect - Button" )
            @Guards = button

            button.Team = TEAM_GUARD
            button.MainPanel = @
            button\Dock( LEFT )

            button.PerformLayout = =>
                @SetWide( subPanel\GetWide! * 0.5 - 8 )

            button\InvalidateLayout( true )

        -- TEAM_PRISONER
        do

            button = subPanel\Add( "Jailbreak::TeamSelect - Button" )
            @Prisoners = button

            button.Team = TEAM_PRISONER
            button.MainPanel = @
            button\Dock( RIGHT )

            button.PerformLayout = =>
                @SetWide( subPanel\GetWide! * 0.5 - 8 )

            button\InvalidateLayout( true )

        -- TEAM_SPECTATOR
        do

            button = @Add( "Jailbreak::TeamSelect - Button" )
            @Spectators = button

            button\SetText( "#jb.spectate" )
            button.Team = TEAM_SPECTATOR
            button.MainPanel = @

            button\SetTextColor( dark_grey )
            button\Dock( BOTTOM )

            button.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

            button\InvalidateLayout( true )

        -- Random Team
        do

            button = @Add( "Jailbreak::TeamSelect - Button" )
            @Random = button

            button\SetText( "#jb.select_random_team" )
            button.Color = Colors.asparagus
            button.MainPanel = @

            button\Dock( BOTTOM )

            button.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

            button\InvalidateLayout( true )

        @InvalidateLayout( true )

    PANEL.Think = =>
        unless @IsVisible!
            return

        if IsKeyDown( 70 )
            @Hide!

        elseif IsKeyDown( 2 )
            unless TeamIsJoinable( TEAM_GUARD )
                return

            ChangeTeam( TEAM_GUARD )
            @Hide!

        elseif IsKeyDown( 3 )
            unless TeamIsJoinable( TEAM_PRISONER )
                return

            ChangeTeam( TEAM_PRISONER )
            @Hide!

        elseif IsKeyDown( 4 )
            ply = Jailbreak.Player
            unless IsValid( ply )
                return

            for teamID = 1, 2
                if teamID ~= ply\Team! and TeamIsJoinable( teamID )
                    ChangeTeam( teamID )
                    @Hide!
                    break

        elseif IsKeyDown( 5 )
            ChangeTeam( TEAM_SPECTATOR )
            @Hide!

    PANEL.PerformLayout = ( width, height ) =>
        padding = VMin( 1.5 )
        @DockPadding( padding, padding, padding, padding )

        title = @Title
        if IsValid( title )
            title\DockMargin( 0, 0, 0, padding )

        spectators = @Spectators
        if IsValid( spectators )
            spectators\DockMargin( 0, padding, 0, 0 )

        random = @Random
        if IsValid( random )
            random\DockMargin( 0, padding, 0, 0 )

        @SetSize( Jailbreak.ScreenWidth * 0.5, Jailbreak.ScreenHeight * 0.5 )
        @Center!

    PANEL.Hide = =>
        unless @IsVisible!
            return

        HideGameUI!

        if Jailbreak.Developer
            @Remove!
            return

        @SetVisible( false )

    PANEL.Show = =>
        if @IsVisible!
            return

        @SetVisible( true )
        @InvalidateLayout( true )
        @MakePopup!

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
        DrawRect( 0, 0, width, height )

    Register( "Jailbreak::TeamSelect", PANEL, "EditablePanel" )

do

    Jailbreak.Font( "Jailbreak::Scoreboard - Player", "Roboto Mono Bold", 2 )

    PANEL = {}

    PANEL.ToggleMenu = =>
        menu = @Menu
        if IsValid( menu )
            menu\Remove!
            return

        ply = @Player
        unless IsValid( ply ) and ply\IsPlayer!
            return

        menu = DermaMenu!
        @Menu = menu

        unless ply\IsBot!
            steamid64 = ply\SteamID64!

            option = menu\AddOption "#jb.user.profile", ->
                gui.OpenURL( "https://steamcommunity.com/profiles/" .. steamid64 )

            option\SetIcon( "icon16/vcard.png" )

            option = menu\AddOption "#jb.user.steamid64", ->
                notification.AddLegacy( "#jb.notify.steamid64", NOTIFY_GENERIC, 3 )
                PlaySound( "buttons/button18.wav" )
                SetClipboardText( steamid64 )

            option\SetIcon( "icon16/page_copy.png" )

        do

            isMuted = ply\IsMuted!
            option = menu\AddOption "#jb.user.mute", ->
                if ply\IsValid!
                    ply\SetMuted( not isMuted )

            option\SetIcon( isMuted and "icon16/sound_mute.png" or "icon16/sound.png" )

        if LocalPlayer!\IsSuperAdmin!

            subMenu, option = menu\AddSubMenu( "#jb.team-select" )
            option\SetIcon( "icon16/user_go.png" )

            option = subMenu\AddOption "#jb.team.1", ->
                if ply\IsValid!
                    RunConsoleCommand( "jb_move_player", ply\EntIndex!, TEAM_GUARD )

            option\SetIcon( "icon16/user.png" )

            option = subMenu\AddOption "#jb.team.2", ->
                if ply\IsValid!
                    RunConsoleCommand( "jb_move_player", ply\EntIndex!, TEAM_PRISONER )

            option\SetIcon( "icon16/user_orange.png" )

            option = subMenu\AddOption "#jb.team.1002", ->
                if ply\IsValid!
                    RunConsoleCommand( "jb_move_player", ply\EntIndex!, TEAM_SPECTATOR )

            option\SetIcon( "icon16/user_gray.png" )

            option = menu\AddOption "#jb.user.respawn", ->
                if ply\IsValid!
                    RunConsoleCommand( "jb_respawn", ply\EntIndex! )

            option\SetIcon( "icon16/arrow_refresh.png" )

            option = menu\AddOption "#jb.user.kick", ->
                if ply\IsValid!
                    RunConsoleCommand( "jb_kick_player", ply\EntIndex! )

            option\SetIcon( "icon16/user_delete.png" )

        menu\Open!

    PANEL.Init = =>
        @Dock( TOP )

        avatar = @Add( "AvatarImage" )
        @Avatar = avatar

        avatar\Dock( LEFT )
        avatar.OnMousePressed = ->
            @ToggleMenu!

        nickname = @Add( "DLabel" )
        nickname\Dock( FILL )
        @Nickname = nickname

        nickname\SetFont( "Jailbreak::Scoreboard - Player" )
        nickname\SetMouseInputEnabled( true )
        nickname\SetTextColor( dark_grey )
        nickname\SetContentAlignment( 4 )

        ping = @Add( "DLabel" )
        ping\Dock( RIGHT )
        @Ping = ping

        ping\SetFont( "Jailbreak::Scoreboard - Player" )
        ping\SetMouseInputEnabled( true )
        ping\SetTextColor( dark_grey )
        ping\SetContentAlignment( 5 )
        ping\SetZPos( 1000 )
        ping\SetText( "" )

        ratio = @Add( "DLabel" )
        ratio\Dock( RIGHT )
        @Ratio = ratio

        ratio\SetFont( "Jailbreak::Scoreboard - Player" )
        ratio\SetMouseInputEnabled( true )
        ratio\SetContentAlignment( 5 )
        ratio\SetTextColor( dark_grey )
        ratio\SetZPos( 2000 )
        ratio\SetText( "" )

        @Color = light_grey
        @Text = "unknown"

    PANEL.Think = =>
        ply = @Player
        unless ply
            return

        unless ply\IsValid!
            @Remove!
            return

        ping, pingStr = @Ping, tostring( ply\Ping! ) .. "ms"
        if IsValid( ping ) and ping\GetText! ~= pingStr
            ping\SetTooltip( pingStr )
            ping\SetText( pingStr )

        ratio, ratioStr = @Ratio, "#{ply\Frags!}:#{ply\Deaths!}"
        if IsValid( ratio ) and ratio\GetText! ~= ratioStr
            ratio\SetTooltip( ratioStr )
            ratio\SetText( ratioStr )

    PANEL.PerformLayout = =>
        margin = VMin( 0.5 )
        @DockMargin( 0, 0, 0, margin )
        @DockPadding( margin, margin, margin, margin )

        height = VMin( 2.5 ) + margin * 2

        ply = @Player
        if IsValid( ply )
            @Color = ply\Alive! and ply\GetTeamColor! or light_grey

            text = ply\Nick!

            SetFont( "Jailbreak::Scoreboard - Player" )
            height = max( height, margin + select( 2, GetTextSize( text ) ) + margin )

            nickname = @Nickname
            if IsValid( nickname )
                nickname\DockMargin( margin, 0, 0, 0 )
                nickname\SetTooltip( text )

                if nickname\GetText! ~= text
                    nickname\SetText( text )

            avatar = @Avatar
            if IsValid( avatar )
                avatarHeight = avatar\GetTall!
                avatar\SetWide( avatarHeight )
                avatar\SetPlayer( ply, Clamp( 2 ^ floor( log( ceil( avatarHeight ), 2 ) ), 16, 512 ) )

        @SetTall( height )
        CloseDermaMenus!

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( @Color )
        DrawRect( 0, 0, width, height )

    Register( "Jailbreak::Scoreboard - Player", PANEL, "EditablePanel" )

do

    Jailbreak.Font( "Jailbreak::Scoreboard - Header", "Roboto Mono Bold", 4 )

    PANEL = {}

    PANEL.Init = =>
        @Team = TEAM_SPECTATOR
        @Dock( TOP )
        @InvalidateLayout( true )

    PANEL.PerformLayout = =>
        teamID = @Team
        @Color = GetTeamColor( teamID )
        text = "#jb.team." .. teamID
        @SetTooltip( text )

        SetFont( "Jailbreak::Scoreboard - Header" )
        textWidth, textHeight = GetTextSize( text )
        width = @GetWide!
        @Text = text

        margin = VMin( 0.5 )
        height = margin + textHeight + margin
        @SetTall( height )

        if @Team == TEAM_SPECTATOR
            @TextPosX, @TextPosY = ( width - textWidth ) / 2, ( height - textHeight ) / 2
            @RectX, @RectWidth = 0, width
            return

        score = tostring( GetScore( teamID ) )
        scoreWidth, scoreHeight = GetTextSize( score )
        scoreSize = max( scoreWidth + margin, VMin( 5 ) )
        @ScoreX, @ScoreY = ( scoreSize - scoreWidth ) / 2, ( height - scoreHeight ) / 2
        @ScoreSize = scoreSize
        @Score = score

        scoreX = scoreSize + margin
        @RectX, @RectWidth = scoreX, width - scoreX
        @TextPosX, @TextPosY = scoreX + ( width - scoreX - textWidth ) / 2, ( height - textHeight ) / 2

    PANEL.Paint = ( width, height ) =>
        SetTextColor( dark_grey.r, dark_grey.g, dark_grey.b )
        SetFont( "Jailbreak::Scoreboard - Header" )
        SetDrawColor( @Color )

        if @Team ~= TEAM_SPECTATOR
            DrawRect( 0, 0, @ScoreSize, height )
            SetTextPos( @ScoreX, @ScoreY )
            DrawText( @Score )

        DrawRect( @RectX, 0, @RectWidth, height )

        SetTextPos( @TextPosX, @TextPosY )
        DrawText( @Text )

    Register( "Jailbreak::Scoreboard - Header", PANEL, "Panel" )

do

    PANEL = {}

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( black.r, black.g, black.b, 100 )
        DrawRect( 0, 0, width, height )

    Register( "Jailbreak::Scoreboard - ScrollPanel", PANEL, "DScrollPanel" )

do

    Jailbreak.Font( "Jailbreak::Scoreboard - Small", "Roboto Mono Medium Italic", 2 )

    PANEL = {}

    PANEL.Init = =>
        header = @Add( "DLabel" )
        @Header = header

        header\Dock( TOP )
        header\SetTextColor( white )
        header\SetContentAlignment( 5 )
        header\SetMouseInputEnabled( true )
        header\SetFont( "Jailbreak::Scoreboard - Header" )

        prisoners = @Add( "EditablePanel" )
        @Prisoners = prisoners

        prisoners\Dock( LEFT )

        label = prisoners\Add( "Jailbreak::Scoreboard - Header" )
        prisoners.Label = label

        label.Team = TEAM_PRISONER
        label\InvalidateLayout!

        scrollPanel = prisoners\Add( "Jailbreak::Scoreboard - ScrollPanel" )
        prisoners.ScrollPanel = scrollPanel
        scrollPanel\Dock( FILL )

        guards = @Add( "EditablePanel" )
        @Guards = guards

        guards\Dock( RIGHT )

        label = guards\Add( "Jailbreak::Scoreboard - Header" )
        guards.Label = label

        label.Team = TEAM_GUARD
        label\InvalidateLayout!

        scrollPanel = guards\Add( "Jailbreak::Scoreboard - ScrollPanel" )
        guards.ScrollPanel = scrollPanel
        scrollPanel\Dock( FILL )

        spectators = @Add( "EditablePanel" )
        @Spectators = spectators

        spectators\SetZPos( -1000 )
        spectators\Dock( BOTTOM )

        label = spectators\Add( "Jailbreak::Scoreboard - Header" )
        spectators.Label = label

        label.Team = TEAM_SPECTATOR
        label\InvalidateLayout!

        scrollPanel = spectators\Add( "Jailbreak::Scoreboard - ScrollPanel" )
        spectators.ScrollPanel = scrollPanel
        scrollPanel\Dock( FILL )

        playerCount = @Add( "DLabel" )
        @PlayerCount = playerCount

        playerCount\SetZPos( -5000 )
        playerCount\SetTextColor( white )
        playerCount\SetContentAlignment( 5 )
        playerCount\SetFont( "Jailbreak::Scoreboard - Small" )
        playerCount\Dock( BOTTOM )

    PANEL.PerformLayout = =>
        size = VMin( 80 )
        @SetSize( size, size )
        @Center!

        padding = VMin( 1 )
        margin = VMin( 0.5 )

        header = @Header
        if IsValid( header )
            hostName = GetHostName!
            header\SetText( hostName )
            header\SetTooltip( hostName )
            header\DockMargin( 0, 0, 0, margin )
            header\SizeToContentsY!

        prisoners = @Prisoners
        if IsValid( prisoners )
            label = prisoners.Label
            if IsValid( label )
                label\DockMargin( 0, 0, 0, margin )

            scrollPanel = prisoners.ScrollPanel
            if IsValid( scrollPanel )
                vbar = scrollPanel.VBar
                if IsValid( vbar )
                    vbar\SetWide( 0 )

            prisoners\SetWide( size / 2 - padding - margin / 2 )

        guards = @Guards
        if IsValid( guards )
            label = guards.Label
            if IsValid( label )
                label\DockMargin( 0, 0, 0, margin )

            scrollPanel = guards.ScrollPanel
            if IsValid( scrollPanel )
                vbar = scrollPanel.VBar
                if IsValid( vbar )
                    vbar\SetWide( 0 )

            guards\SetWide( size / 2 - padding - margin / 2 )

        spectators = @Spectators
        if IsValid( spectators )
            spectators\DockMargin( 0, margin, 0, margin )

            label = spectators.Label
            if IsValid( label )
                label\DockMargin( 0, 0, 0, margin )

            scrollPanel = spectators.ScrollPanel
            if IsValid( scrollPanel )
                vbar = scrollPanel.VBar
                if IsValid( vbar )
                    vbar\SetWide( 0 )

            spectators\SetTall( size / 4 )

        playerCount = @PlayerCount
        if IsValid( playerCount )
            teams = Jailbreak.GetTeamPlayersCount( nil, TEAM_PRISONER, TEAM_GUARD )
            playerCount\SetText( format( GetPhrase( "jb.scoreboard.players-online" ), player.GetCount!, teams[ 1 ], teams[ 2 ] ) )
            playerCount\SizeToContentsY!

        @DockPadding( padding, padding, padding, padding )

    PANEL.ClearPlayers = =>
        scrollPanel = @Prisoners.ScrollPanel
        if IsValid( scrollPanel )
            scrollPanel\Clear!

        scrollPanel = @Guards.ScrollPanel
        if IsValid( scrollPanel )
            scrollPanel\Clear!

        scrollPanel = @Spectators.ScrollPanel
        if IsValid( scrollPanel )
            scrollPanel\Clear!

    PANEL.AddPlayers = =>
        prisoners, guards, spectators = @Prisoners.ScrollPanel, @Guards.ScrollPanel, @Spectators.ScrollPanel
        for ply in *GetAll!
            panel = Create( "Jailbreak::Scoreboard - Player" )
            panel.Player = ply

            switch ply\Team!
                when TEAM_PRISONER
                    prisoners\AddItem( panel )
                when TEAM_GUARD
                    guards\AddItem( panel )
                when TEAM_SPECTATOR
                    spectators\AddItem( panel )

            panel\InvalidateLayout( true )

    PANEL.Show = =>
        @InvalidateLayout( true )
        @SetVisible( true )
        CloseDermaMenus!
        @AddPlayers!
        @MakePopup!

    PANEL.Hide = =>
        CloseDermaMenus!

        if Jailbreak.Developer
            @Remove!
            return

        @ClearPlayers!
        @SetVisible( false )

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
        DrawRect( 0, 0, width, height )

    Register( "Jailbreak::Scoreboard", PANEL )

GM.ScoreboardShow = =>
    scoreboard = @ScoreBoard
    unless IsValid( scoreboard )
        scoreboard = Create( "Jailbreak::Scoreboard" )
        @ScoreBoard = scoreboard

    scoreboard\Show!
    return false

GM.ScoreboardHide = =>
    scoreboard = @ScoreBoard
    if IsValid( scoreboard )
        scoreboard\Hide!

-- do

--     PANEL = {}

--     PANEL.Init = =>
--         print "INIT"

--     PANEL.OnRemove = =>

--     PANEL.Think = =>
--         if IsKeyDown( 70 ) or IsGameUIVisible!
--             @Hide!

--     PANEL.Show = =>
--         @InvalidateLayout( true )
--         @SetVisible( true )
--         @MakePopup!

--     PANEL.Hide = =>
--         HideGameUI!

--         if Jailbreak.Developer
--             @Remove!
--         else
--             @SetVisible( false )

--         chat.Close!

--     PANEL.PerformLayout = =>
--         width, height = VMin( 25 ), VMin( 25 )
--         @SetSize( width, height )

--     PANEL.Paint = ( width, height ) =>
--         SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
--         DrawRect( 0, 0, width, height )

--     Register( "Jailbreak::ChatBox", PANEL, "EditablePanel" )

-- GM.StartChat = ( isTeam ) =>
--     chatBox = Jailbreak.ChatBox
--     if IsValid( chatBox )
--         chatBox\Remove!

--     unless IsValid( chatBox )
--         chatBox = Create( "Jailbreak::ChatBox" )
--         Jailbreak.ChatBox = chatBox

--     if IsValid( chatBox )
--         chatBox\Show!
--         return true

-- GM.FinishChat = =>
--     chatBox = Jailbreak.ChatBox
--     if IsValid( chatBox ) and chatBox\IsVisible!
--         chatBox\Hide!

do

    Jailbreak.Font( "Jailbreak::Tooltip", "Roboto Mono", 1.8 )

    tooltipFadeOut = CreateClientConVar( "tooltip_fadeout", "2", true, false, "Tooltip fadeout speed multiplier.", 0, 10 )
    tooltipClear = CreateClientConVar( "tooltip_clear", "1", true, false, "If enabled, game will clear alpha of tooltips after fading out.", 0, 1 )
    tooltipFadeIn = CreateClientConVar( "tooltip_fadein", "3", true, false, "Tooltip fadein speed multiplier.", 0, 10 )
    tooltipDelay = GetConVar( "tooltip_delay" )

    FrameTime = FrameTime
    CurTime = CurTime

    do

        :CursorVisible = vgui
        :GetCursorPos = input

        PANEL = {}

        PANEL.Init = =>
            @SetFontInternal( "Jailbreak::Tooltip" )
            @SetContentAlignment( 5 )
            @SetAlpha( 0 )

            @SetPaintBackgroundEnabled( true )
            @SetKeyboardInputEnabled( false )
            @SetMouseInputEnabled( false )
            @SetPaintedManually( true )

            @InvalidateLayout( true )
            hook.Add "DrawOverlay", @, @PaintManual

        PANEL.Think = =>
            unless CursorVisible!
                @SetVisible( false )
                return

            x, y = GetCursorPos!
            @SetPos( x, y - @GetTall! )

            if @FadeIn
                alpha = @GetAlpha!
                if alpha > 0
                    @SetAlpha( max( 0, alpha - FrameTime! * 255 * tooltipFadeIn\GetFloat! ) )
                elseif @IsVisible!
                    @SetVisible( false )

                return

            lastTextChange = @LastTextChange
            unless lastTextChange
                @SetVisible( false )
                return

            timePassed = CurTime! - lastTextChange
            if timePassed <= tooltipDelay\GetFloat!
                if tooltipClear\GetBool!
                    @SetAlpha( 0 )

                return

            alpha = @GetAlpha!
            if alpha < 255
                @SetAlpha( min( alpha + FrameTime! * 255 * tooltipFadeOut\GetFloat!, 255 ) )

        PANEL.PerformLayout = =>
            @SetBGColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )

            textWidth, textHeight = @GetTextSize!
            margin = VMin( 0.25 )

            @SetSize( margin + textWidth + margin, margin + textHeight + margin )

        PANEL.SetText = ( str ) =>
            PANEL_META.SetText( @, str )
            @LastTextChange = CurTime!
            @SetVisible( true )
            @FadeIn = false

        Register( "Jailbreak::Tooltip", PANEL, "Label" )

    removeTooltip = =>
        tooltip = Jailbreak.Tooltip
        if IsValid( tooltip )
            tooltip.FadeIn = true

        return true

    global RemoveTooltip = removeTooltip
    global EndTooltip = removeTooltip

    findTooltip = =>
        while IsValid( @ )
            if @IsVisible!
                text = @strTooltipText
                if text ~= nil
                    return Translate( text )

            @ = @GetParent!

    global FindTooltip = findTooltip

    global ChangeTooltip = =>
        removeTooltip!

        text = findTooltip( @ )
        unless text
            return

        tooltip = Jailbreak.Tooltip
        if Jailbreak.Developer and IsValid( tooltip )
            tooltip\Remove!

        unless IsValid( tooltip )
            tooltip = Create( "Jailbreak::Tooltip" )
            Jailbreak.Tooltip = tooltip

        tooltip\SetText( text )
