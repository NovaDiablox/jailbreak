Jailbreak = Jailbreak
GM = GM

:ceil, :min, :max, :sin, :floor, :random, :Rand, :Round = math
:PlaySound, :DrawRect, :SetDrawColor = surface
:format, :upper, :find, :Explode = string
:TeamIsJoinable, :ChangeTeam = Jailbreak
LocalPlayer = LocalPlayer
:GetPhrase = language
list_Set = list.Set
hook_Add = hook.Add
hook_Run = hook.Run
IsValid = IsValid
:GetAll = player
Vector = Vector
pairs = pairs

TEAM_SPECTATOR = TEAM_SPECTATOR
ROUND_RUNNING = ROUND_RUNNING

TEAM_PRISONER = TEAM_PRISONER
TEAM_GUARD = TEAM_GUARD

colors = Jailbreak.Colors
:dark_grey, :black, :white = colors

PANEL_META = FindMetaTable( "Panel" )

GM.ContextMenuEnabled = ->
    return true

GM.ContextMenuOpen = ->
    return true

do

    :GetRoundState, :GetRemainingTime = Jailbreak
    TEXT_ALIGN_CENTER = TEXT_ALIGN_CENTER
    :GetCursorPos, :SetCursorPos = input
    CloseDermaMenus = CloseDermaMenus
    :DrawText = draw

    PANEL = {}

    AccessorFunc( PANEL, "m_bHangOpen", "HangOpen" )

    PANEL.Init = =>
        @CursorX, @CursorY = 0, 0
        @SetWorldClicker( true )
        @m_bHangOpen = false
        @Dock( FILL )

    PANEL.Open = =>
        @SetHangOpen( false )

        if IsValid( g_SpawnMenu ) and g_SpawnMenu\IsVisible!
            g_SpawnMenu\Close( true )

        if @IsVisible!
            return

        CloseDermaMenus!

        @MakePopup!
        @SetVisible( true )
        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( true )

        @InvalidateLayout( true )
        SetCursorPos( @CursorX, @CursorY )

    PANEL.Close = ( bSkipAnim ) =>
        if @GetHangOpen!
            @SetHangOpen( false )
            return

        @CursorX, @CursorY = GetCursorPos!
        CloseDermaMenus!

        @SetKeyboardInputEnabled( false )
        @SetMouseInputEnabled( false )

        @SetAlpha( 255 )
        @SetVisible( false )

    PANEL.StartKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( true )
        @SetHangOpen( true )

    PANEL.EndKeyFocus = ( pPanel ) =>
        @SetKeyboardInputEnabled( false )

    PANEL.Paint = ( width, height ) =>
        if GetRoundState! ~= ROUND_RUNNING
            return

        remainingTime = GetRemainingTime!
        if remainingTime == 0
            return

        DrawText( upper( format( GetPhrase( "jb.round.2" ), remainingTime ) ), "DermaLarge", width / 2, 32, white, TEXT_ALIGN_CENTER )

    vgui.Register( "ContextMenu", PANEL, "EditablePanel" )

    do

        PANEL = {}

        PANEL.Init = =>
            @SetText( "" )

        PANEL.GetImage = =>
            image = @m_Image
            if image and image\IsValid!
                return image\GetImage!

            return ""

        PANEL.SetImage = ( imagePath ) =>
            image = @m_Image

            unless imagePath
                if IsValid( image )
                    image\Remove!

                return

            unless IsValid( image )
                image = @Add "DImage"
                @m_Image = image

            image\SetMouseInputEnabled( false )
            image\SetImage( imagePath )
            image\SizeToContents!
            @InvalidateLayout!

        PANEL.PerformLayout = ( width, height ) =>

            image = @m_Image
            if IsValid( image )

                imageWidth, imageHeight = image\GetSize!

                targetSize = min( width - 4, height - 4 )
                zoom = min( targetSize / imageWidth, targetSize / imageHeight, 1 )
                newSizeX = ceil( imageWidth * zoom )
                newSizeY = ceil( imageHeight * zoom )

                image\SetWide( newSizeX )
                image\SetTall( newSizeY )

                x, y = width - imageWidth, height - imageHeight

                for panel in *@GetChildren!
                    if panel\IsVisible! and panel\GetDock! == BOTTOM
                        y -= panel\GetTall!

                image\SetPos( 0, y )
                @SetTextInset( imageWidth + 16, 0 )

            DLabel.PerformLayout( @, width, height )

        PANEL.Paint = ( width, height ) =>

        vgui.Register( "JB.ContextMenu.Button", PANEL, "DButton" )

    CreateContextMenu = ->
        unless hook_Run( "ContextMenuEnabled" )
            return

        contextMenu = g_ContextMenu
        if IsValid( contextMenu )
            contextMenu\Remove!

        contextMenu = vgui.Create( "ContextMenu" )
        unless IsValid( contextMenu )
            return

        global g_ContextMenu = contextMenu
        contextMenu\SetVisible( false )

        hook_Add "LanguageChanged", contextMenu, =>
            hook.Remove "LanguageChanged", @
            @Remove!

        contextMenu.OnMousePressed = ( _, code ) ->
            hook_Run( "GUIMousePressed", code, gui.ScreenToVector( input.GetCursorPos! ) )

        contextMenu.OnMouseReleased = ( _, code ) ->
            hook_Run( "GUIMouseReleased", code, gui.ScreenToVector( input.GetCursorPos! ) )

        hook_Run( "ContextMenuCreated", contextMenu )

        iconLayout = contextMenu\Add( "DIconLayout" )
        iconLayout\SetBorder( 8 )
        iconLayout\SetSpaceX( 8 )
        iconLayout\SetSpaceY( 8 )
        iconLayout\SetLayoutDir( LEFT )
        iconLayout\SetStretchWidth( true )
        iconLayout\SetStretchHeight( false )
        iconLayout\Dock( LEFT )

        iconLayout.OnMousePressed = ( ... ) =>
            @GetParent!\OnMousePressed( ... )

        desktopWindows = {}
        for _, desktopWindow in pairs( list.Get( "DesktopWindows" ) )
            desktopWindows[] = desktopWindow

        table.sort desktopWindows, ( a, b ) ->
            if a.order and b.order
                return a.order < b.order

            return a.title < b.title

        for desktopWindow in *desktopWindows
            icon = iconLayout\Add( "JB.ContextMenu.Button" )
            icon\SetSize( 80, 82 )

            title = desktopWindow.title
            icon\SetTooltip( title )

            image = icon\Add( "DImage" )
            icon.Image = image

            image\SetImage( desktopWindow.icon )
            image\SetSize( 64, 64 )
            image\Dock( TOP )
            image\DockMargin( 8, 0, 8, 0 )

            label = icon\Add( "DLabel" )
            icon.Label = label

            label\Dock( BOTTOM )
            label\SetText( title )
            label\SetContentAlignment( 5 )
            label\SetTextColor( white )
            label\SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )

            created = desktopWindow.created
            if isfunction( created )
                created( icon )

            think = desktopWindow.think
            if isfunction( think )
                hook_Add "Think", icon, think

            click = desktopWindow.click
            if isfunction( click )
                icon.DoClick = click

            init = desktopWindow.init
            if isfunction( init )
                icon.DoClick = ->
                    window = icon.Window
                    if desktopwindow.onewindow and IsValid( window )
                        window\Center!
                        return

                    window = g_ContextMenu\Add( "DFrame" )
                    icon.Window = window

                    window\SetSize( desktopwindow.width, desktopwindow.height )
                    window\SetTitle( desktopwindow.title )
                    window\Center!

                    init( icon, window )

        return contextMenu

    GM.OnContextMenuOpen = =>
        unless hook_Run( "ContextMenuOpen" )
            return

        contextMenu = g_ContextMenu
        unless IsValid( contextMenu )
            contextMenu = CreateContextMenu!

        unless contextMenu\IsVisible!
            contextMenu\Open!

        hook_Run( "ContextMenuOpened" )

    GM.OnContextMenuClose = =>
        contextMenu = g_ContextMenu
        if IsValid( contextMenu )
            if cvars.Number( "developer", 0 ) > 2
                contextMenu\Remove!
            else
                contextMenu\Close!

        hook_Run( "ContextMenuClosed" )

do

    :IsKeyDown = input
    :Create = vgui

    showTeam = ->
        panel = g_TeamSelect
        if IsValid( panel )
            panel\Remove!
            return

        if IsKeyDown( 70 )
            return

        global g_TeamSelect = Create( "JB.TeamSelect" )

    Jailbreak.ShowTeam = showTeam
    concommand.Add "jb_showteam", showTeam

-- Button
do

    -- TODO: Rewrite this
    PANEL = {}

    PANEL.Init = =>
        @SetTextColor( white )
        @SetFont( "DermaLarge" )

    PANEL.OnCursorEntered = =>
        unless @IsEnabled!
            return

        PlaySound( "garrysmod/ui_hover.wav" )

    PANEL.Paint = ( width, height ) =>
        color = @Color
        unless color
            return

        r, g, b = color\Unpack!

        a = 180
        if not @IsEnabled!
            a = 150
        elseif @Hovered
            a = 250

        SetDrawColor( r, g, b, a )
        DrawRect( 0, 0, width, height )

    PANEL.DoClick = =>
        unless @IsEnabled!
            return

        PlaySound( "garrysmod/ui_click.wav" )

        teamID = @Team
        if teamID
            ChangeTeam( teamID )
        else

            ply = Jailbreak.Player
            unless IsValid( ply )
                return

            for i = 1, 2
                if i ~= ply\Team! and TeamIsJoinable( i )
                    ChangeTeam( i )
                    break

        panel = @MainPanel
        if IsValid( panel )
            panel\Remove!

    PANEL.SetText = ( str ) =>
        PANEL_META.SetText( @, Jailbreak.Translate( str ) )

    PANEL.Think = =>
        teamID = @Team
        unless teamID
            enabled = false
            for i = 1, 2
                if TeamIsJoinable( i )
                    enabled = true
                    break

            @SetCursor( enabled and "hand" or "no" )
            @SetEnabled( enabled )
            return

        unless @Color
            @Color = team.GetColor( teamID )

        count = team.NumPlayers( teamID )
        if count ~= @Count
            @SetText( team.GetName( teamID ) .. " x" .. count )
            @Count = count

        ply = Jailbreak.Player
        unless IsValid( ply )
            return

        enabled = teamID ~= ply\Team! and TeamIsJoinable( teamID )
        if enabled ~= @IsEnabled!
            @SetEnabled( enabled )
            @SetCursor( enabled and "hand" or "no" )

    vgui.Register( "JB.TeamButton", PANEL, "DButton" )

-- Main Panel
do

    PANEL = {}

    PANEL.OnRemove = =>
        hook.Remove "ScreenResolutionChanged", @
        hook.Remove "PlayerButtonDown", @

    PANEL.CloseKeys = {
        [ 107 ]: true
        [ 108 ]: true
        [ 109 ]: true
    }

    PANEL.Init = =>
        @DockPadding( 16, 16, 16, 16 )

        hook_Add "ScreenResolutionChanged", @, @Remove
        hook_Add "PlayerButtonDown", @, ( ply, key ) =>
            if ( @CloseKeys[ key ] and not ( @Hovered or @IsChildHovered! ) ) or key == 70
                @Remove!

    	@MakePopup!
	    @SetKeyboardInputEnabled( false )

        -- Title Text
        do

            title = @Add( "DLabel" )
            title\SetText( "#jb.team-select" )
            title\SetTextColor( white )
            title\SetContentAlignment( 5 )
            title\SetFont( "DermaLarge" )

            title\DockMargin( 0, 0, 0, 16 )
            title\Dock( TOP )

            title.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

        subPanel = @Add( "EditablePanel" )
        subPanel\Dock( FILL )

        -- TEAM_GUARD
        do

            button = subPanel\Add( "JB.TeamButton" )
            button.Team = TEAM_GUARD
            button.MainPanel = @
            button\Dock( LEFT )

            button.PerformLayout = =>
                @SetWide( subPanel\GetWide! * 0.5 - 8 )

        -- TEAM_PRISONER
        do

            button = subPanel\Add( "JB.TeamButton" )
            button.Team = TEAM_PRISONER
            button.MainPanel = @
            button\Dock( RIGHT )

            button.PerformLayout = =>
                @SetWide( subPanel\GetWide! * 0.5 - 8 )

        -- TEAM_SPECTATOR
        do

            button = @Add( "JB.TeamButton" )
            button\SetText( "#jb.team.spectate" )
            button.Team = TEAM_SPECTATOR
            button.MainPanel = @

            button\SetTextColor( dark_grey )
            button\DockMargin( 0, 16, 0, 0 )
            button\Dock( BOTTOM )

            button.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

        -- Random Team
        do

            button = @Add( "JB.TeamButton" )
            button\SetText( "#jb.team.random" )
            button.Color = colors.asparagus
            button.MainPanel = @

            button\DockMargin( 0, 16, 0, 0 )
            button\Dock( BOTTOM )

            button.PerformLayout = =>
                parent = @GetParent!
                if IsValid( parent )
                    @SetTall( parent\GetTall! * 0.1 )

        @InvalidateLayout( true )

    do

        :IsKeyDown = input

        PANEL.Think = =>
            if IsKeyDown( 70 )
                @Remove!
            elseif IsKeyDown( 2 ) and TeamIsJoinable( TEAM_GUARD )
                ChangeTeam( TEAM_GUARD )
                @Remove!
            elseif IsKeyDown( 3 ) and TeamIsJoinable( TEAM_PRISONER )
                ChangeTeam( TEAM_PRISONER )
                @Remove!
            elseif IsKeyDown( 4 )
                ply = Jailbreak.Player
                unless IsValid( ply )
                    return

                for teamID = 1, 2
                    if teamID ~= ply\Team! and TeamIsJoinable( teamID )
                        ChangeTeam( teamID )
                        @Remove!
                        break
            elseif IsKeyDown( 5 )
                ChangeTeam( TEAM_SPECTATOR )
                @Remove!

    do

        :IsGameUIVisible, :HideGameUI = gui

        PANEL.OnRemove = =>
            if IsGameUIVisible!
                HideGameUI!

    PANEL.PerformLayout = ( width, height ) =>
        @SetSize( Jailbreak.ScreenWidth * 0.5, Jailbreak.ScreenHeight * 0.5 )
        @Center!

    PANEL.Paint = ( width, height ) =>
        SetDrawColor( dark_grey.r, dark_grey.g, dark_grey.b, 240 )
        DrawRect( 0, 0, width, height )

    vgui.Register( "JB.TeamSelect", PANEL, "EditablePanel" )

do

    Distance = FindMetaTable( "Vector" ).Distance
    :SetMaterial, :DrawSprite = render
    LocalToWorld = LocalToWorld
    angle_zero = angle_zero
    Material = Material
    CurTime = CurTime
    :remove = table
    :IgnoreZ = cam
    net = net

    TypingIcon = Material( "icon16/comment_edit.png", "mips" )
    SpeakingIcon = Material( "icon16/sound.png", "mips" )
    UserOrangeIcon = Material( "icon16/user_orange.png", "mips" )
    UserSuitIcon = Material( "icon16/user_suit.png", "mips" )
    UserIcon = Material( "icon16/user.png", "mips" )
    BricksIcon = Material( "icon16/bricks.png", "mips" )
    WorldIcon = Material( "icon16/world.png", "mips" )
    DoorIcon = Material( "icon16/door.png", "mips" )
    ImageIcon = Material( "icon16/image.png", "mips" )
    PhotoIcon = Material( "icon16/photo.png", "mips" )
    GunIcon = Material( "icon16/gun.png", "mips" )
    ErrorIcon = Material( "icon16/error.png", "mips" )

    markers = {}

    classNames = {
        ["class C_BaseEntity"]: Material( "icon16/keyboard.png", "mips" )
        sent_soccerball: Material( "icon16/sport_basketball.png", "mips" )
        prop_ragdoll: Material( "icon16/user_delete.png", "mips" )
        prop_combine_ball: ErrorIcon
        npc_grenade_frag: ErrorIcon
        npc_satchel: ErrorIcon
        crossbow_bolt: ErrorIcon
        grenade_ar2: ErrorIcon
        npc_tripmine: ErrorIcon
    }

    net.Receive "Jailbreak::Markers", ->
        owner = net.ReadEntity!
        unless owner\IsValid! and owner\Alive!
            return

        material = WorldIcon

        entity = nil
        if net.ReadBool!
            entity = net.ReadEntity!
            if IsValid( entity )
                if entity\IsWeapon!
                    if entity\GetOwner!\IsValid!
                        return

                    material = GunIcon
                elseif entity\IsPlayer!
                    unless entity\IsInGame!
                        return

                    switch entity\Team!
                        when TEAM_GUARD
                            material = UserSuitIcon
                        when TEAM_PRISONER
                            material = UserOrangeIcon
                        else
                            material = UserIcon

                else

                    className = entity\GetClass!

                    classIcon = classNames[ className ]
                    if classIcon
                        material = classIcon
                    elseif find( className, "^func_breakable", 1, false )
                        material = ImageIcon
                    elseif find( className, "^%w+_door", 1, false )
                        material = DoorIcon
                    elseif find( className, "^prop_physics.*", 1, false )
                        material = PhotoIcon
                    else
                        material = BricksIcon

        origin = net.ReadVector!

        index = #markers + 1
        markers[ index ] = {
            deathtime: CurTime! + Jailbreak.MarkersLifetime\GetInt!
            amplitude: Rand( 0.5, 1.5 )
            :material
            :entity
            :origin
            :owner
            :index
        }

    GM.PostDrawTranslucentRenderables = ( drawingDepth, drawingSkybox ) =>
        if drawingDepth or drawingSkybox or not Jailbreak.VoiceIcons\GetBool!
            return

        eyePos = EyePos!

        for ply in *GetAll!
            unless ply\IsInGame!
                continue

            isSpeaking, isTyping = ply\IsSpeaking!, ply\IsTyping!
            unless isSpeaking or isTyping
                continue

            origin = nil

            headBoneID = ply\LookupBone( "ValveBiped.Bip01_Head1" )
            if headBoneID and headBoneID >= 0
                origin, angles = ply\GetBonePosition( headBoneID )

                hitboxset = ply\GetHitboxSet!
                for hitbox = 0, ply\GetHitBoxCount( hitboxset )
                    if headBoneID == ply\GetHitBoxBone( hitbox, hitboxset )
                        mins, maxs = ply\GetHitBoxBounds( hitbox, hitboxset )
                        origin = LocalToWorld( ( maxs + mins ) / 2, angle_zero, origin, angles ) + angles\Forward! * ( maxs[ 3 ] - mins[ 3 ] ) * 1.5
                        break

            else
                origin = ply\EyePos!
                origin[ 3 ] += 14

            distance = Distance( origin, eyePos )
            if distance > Jailbreak.VoiceChatMaxDistance\GetInt!
                continue

            if isSpeaking
                SetMaterial( SpeakingIcon )
            elseif isTyping
                SetMaterial( TypingIcon )
            else
                continue

            origin[ 3 ] = 1 + origin[ 3 ] + sin( CurTime! * 4 ) * 1.5
            DrawSprite( origin, 12, 12, white )

        unless Jailbreak.Markers\GetBool!
            return

        for index = 1, #markers
            data = markers[ index ]
            unless data
                continue

            owner = data.owner
            unless owner\IsValid!
                remove( markers, index )
                continue

            fraction = max( 0, ( data.deathtime - CurTime! ) / Jailbreak.MarkersLifetime\GetInt! )
            if fraction == 0
                remove( markers, index )
                continue

            origin = data.origin

            entity = data.entity
            if entity
                if entity\IsValid!
                    if ( entity\IsPlayer! and not entity\IsInGame! ) or ( entity\IsWeapon! and entity\GetOwner!\IsValid! )
                        remove( markers, index )
                        continue

                    origin = entity\LocalToWorld( origin )
                else
                    remove( markers, index )
                    continue

            scale = max( 4, ( Distance( origin, eyePos ) / Jailbreak.ScreenWidth ) * 64 ) * fraction
            amplitude = data.amplitude

            IgnoreZ( true )
            SetMaterial( data.material )
            DrawSprite( origin + Vector( 0, 0, 1 + sin( CurTime! * ( 4 + amplitude ) ) * ( 1.5 + amplitude ) * fraction ), scale, scale, white )
            IgnoreZ( false )

-- PANEL_META = FindMetaTable( "Panel" )

-- do
--     PANEL = {}

--     PANEL.Init = =>
--         avatar = vgui.Create("AvatarImage", @ )
--         if IsValid(avatar)
--             @Avatar = avatar

--     PANEL.SetPlayer = ( ply ) =>
--         unless IsValid( ply ) and ply\IsPlayer!
--             return

--         @Player = ply
--         @Nick = ply\Nick!
--         @Ping = ply\Ping!
--         @Frags = ply\Frags!
--         @Deaths = ply\Deaths!
--         @Avatar\SetPlayer( ply, 32 )

--     PANEL.PerformLayout = =>
--         tall = ScreenScaleH( 16 )
--         @SetTall( tall )

--         marginBottom = ScreenScale( 3 )
--         @DockMargin( 0, 0, 0, marginBottom )

--         avatar = @Avatar
--         if IsValid( avatar )
--             wide, tall = @GetSize!
--             avatarSize = tall - ScreenScale( 2 )
--             marginLeft = ScreenScale( 6 )

--             avatar\SetPos( marginLeft, tall / 2 - avatarSize / 2 )
--             avatar\SetSize( avatarSize, avatarSize )

--     PANEL.Paint = ( w, h ) =>
--         draw.RoundedBox( 20, 0, 0, w, h, color_bacground )

--         unless IsValid( @Player )
--             return

--         avatar = @Avatar
--         unless IsValid( avatar )
--             return

--         marginLeft, marginTop = ScreenScale( 5 ), ScreenScaleH( 0.4 )
--         draw.DrawText( @Nick, "DermaLarge", marginLeft * 2 + avatar\GetWide!, marginTop, white, TEXT_ALIGN_LEFT )


--     vgui.Register("JB.Scoreboard.Player", PANEL)


-- ---
-- --- MAIN PANEL
-- ---

-- do

--     PANEL = {}

--     PANEL.Init = =>


--     PANEL.PerformLayout = ( w, h ) =>
--         wide, tall = ScreenScale( 300 ), ScreenScaleH( 380 )
--         @SetSize( wide, tall )
--         @Center!

--         paddingTop, paddingHorizontal = ScreenScaleH( 20 ), ScreenScale( 10 )
--         @DockPadding( paddingHorizontal, paddingTop, paddingHorizontal, 0 )

--     PANEL.DeletePlayers = =>
--         unless istable( @Players )
--             @Players = {}
--             return

--         for ply in *@Players
--             unless IsValid( ply )
--                 continue
--             ply\Remove!

--         @Players = {}

--     PANEL.CreatePlayers = =>
--         @DeletePlayers!

--         for ply in *GetAll!
--             unless IsValid( ply )
--                 continue

--             playerPanel = vgui.Create( "JB.Scoreboard.Player", @ )
--             unless IsValid( playerPanel )
--                 continue

--             table.insert( @Players, playerPanel )
--             playerPanel\SetPlayer( ply )
--             playerPanel\Dock( TOP )

--     PANEL.Show = =>
--         @CreatePlayers!
--         PANEL_META.Show( @ )

--     PANEL.Hide = =>
--         @DeletePlayers!
--         PANEL_META.Hide( @ )

--     PANEL.Paint = ( w, h ) =>
--         surface.SetDrawColor( color_red )
--         surface.DrawRect( 0, 0, w, h )

--         draw.DrawText( "Your mom's gamemode", "DermaLarge", w / 2, 0, white, TEXT_ALIGN_CENTER )

--     vgui.Register( "JB.Scoreboard", PANEL )

-- scoreboard = GM.ScoreBoard or GAMEMODE and GAMEMODE.ScoreBoard
-- if IsValid( scoreboard )
--     scoreboard\Remove!

-- GM.ScoreboardShow = =>
--     scoreboard = @ScoreBoard
--     unless IsValid( scoreboard )
--         scoreboard = vgui.Create( "JB.Scoreboard", GetHUDPanel! )
--         @ScoreBoard = scoreboard
--         -- print("Created")

--     scoreboard\Show!
--     return false

-- GM.ScoreboardHide = =>
--     scoreboard = @ScoreBoard
--     if IsValid( scoreboard )
--         scoreboard\Hide!
