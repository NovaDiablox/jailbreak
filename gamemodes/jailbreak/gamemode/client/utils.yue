Jailbreak = Jailbreak
hook_Run = hook.Run

do

    :String = cvars

    cvars.AddChangeCallback( "gmod_language", ( _, __, value ) ->
        timer.Create "Jailbreak::LanguageChanged", 0.025, 1, ->
            hook_Run( "LanguageChanged", String( "gmod_language", "en" ), value )
    "Jailbreak::LanguageChanged" )

do

    RunConsoleCommand = RunConsoleCommand

    Jailbreak.ChangeTeam = ( teamID ) ->
        RunConsoleCommand( "changeteam", teamID )

do

    :sub, :gsub = string
    :GetPhrase = language

    filter = ( placeholder ) ->
        fulltext = GetPhrase( placeholder )
        if fulltext == placeholder and sub( placeholder, 1, 3 ) == "jb."
            return GetPhrase( sub( placeholder, 4 ) )

        return fulltext

    Jailbreak.Translate = ( str ) ->
        return gsub( str, "#([%w%.-_]+)", filter )

do

    ScrW, ScrH = ScrW, ScrH
    :min, :max, :ceil = math

    width, height = ScrW!, ScrH!
    vmin, vmax = min( width, height ) / 100, max( width, height ) / 100

    Jailbreak.ScreenWidth, Jailbreak.ScreenHeight = width, height
    Jailbreak.ScreenCenterX, Jailbreak.ScreenCenterY = width / 2, height / 2

    hook.Add "OnScreenSizeChanged", "Jailbreak::OnScreenSizeChanged", ->
        width, height = ScrW!, ScrH!
        vmin, vmax = min( width, height ) / 100, max( width, height ) / 100

        Jailbreak.ScreenWidth, Jailbreak.ScreenHeight = width, height
        Jailbreak.ScreenCenterX, Jailbreak.ScreenCenterY = width / 2, height / 2
        hook_Run( "ScreenResolutionChanged", width, height )

    Jailbreak.VMin = ( number ) ->
        if number ~= nil
            return ceil( vmin * number )

        return vmin

    Jailbreak.VMax = ( number ) ->
        if number ~= nil
            return ceil( vmax * number )

        return vmax

do

    fonts = Jailbreak.Fonts
    unless istable( fonts )
        fonts = {}
        Jailbreak.Fonts = fonts

    :CreateFont = surface
    :VMin = Jailbreak
    :remove = table

    fontData = {
        extended: true
        weight: 500
        blursize: 0
        scanlines: 0
        antialias: true
        underline: false
        italic: false
        strikeout: false
        symbol: false
        rotary: false
        shadow: false
        additive: false
        outline: false
    }

    Jailbreak.Font = ( fontName, font, size ) ->
        fontData.font, fontData.size = font, VMin( size )
        for index = 1, #fonts
            if fonts[ index ].fontName == fontName
                remove( fonts, index )
                break

        fonts[] = {
            :fontName
            :font
            :size
        }

        CreateFont fontName, fontData

    hook.Add "ScreenResolutionChanged", "Jailbreak::Fonts" , ->
        for data in *fonts
            fontData.font, fontData.size = data.font, VMin( data.size )
            CreateFont data.fontName, fontData

GM.PerformPlayerVoice = ( ply ) =>
    voiceVolume = ply\VoiceVolume!

    lastVoiceVolume = ply.m_LastVoiceVolume
    unless lastVoiceVolume
        lastVoiceVolume = voiceVolume

    if lastVoiceVolume > 0
        voiceVolume = lastVoiceVolume + ( voiceVolume - lastVoiceVolume ) / 4
        if voiceVolume < 0.01
            voiceVolume = 0

    ply.m_LastVoiceVolume = voiceVolume

    maxVoiceVolume = ply.m_MaxVoiceVolume
    if not maxVoiceVolume or maxVoiceVolume < voiceVolume
        maxVoiceVolume = voiceVolume
        ply.m_MaxVoiceVolume = maxVoiceVolume

    if maxVoiceVolume > 0 and voiceVolume > 0
        ply.m_VoiceFraction = voiceVolume / maxVoiceVolume
        return

    ply.m_VoiceFraction = 0

do

    PLAYER = FindMetaTable( "Player" )

    PLAYER.VoiceFraction = =>
        return @m_VoiceFraction or 0

    do

        isfunction = isfunction
        :Simple = timer

        PLAYER.AnimRestartNetworkedGesture = ( slot, activity, autokill, finished ) =>
            sequenceID = @SelectWeightedSequence( activity )
            if sequenceID < 0
                return

            if isfunction( finished )
                Simple @SequenceDuration( sequenceID ), ->
                    if @IsValid!
                        finished( @ )

            @AnimRestartGesture( slot, activity, autokill )

do

    ENTITY = FindMetaTable( "Entity" )
    :EntIndex = ENTITY

    ENTITY.IsLocalPlayer = =>
        index = Jailbreak.PlayerIndex
        unless index
            return true

        return EntIndex( @ ) == index
