AddCSLuaFile( "shared.lua" )
include( "shared.lua" )

do

    RunConsoleCommand = RunConsoleCommand

    GM.SetRealistic = ( enable ) =>
        enable = enable == true
        @RealisticMode = enable

        if enable
            RunConsoleCommand( "sv_defaultdeployspeed", "1" )
            RunConsoleCommand( "mp_show_voice_icons", "0" )
            RunConsoleCommand( "sv_alltalk", "2" )
        else
            RunConsoleCommand( "sv_defaultdeployspeed", "4" )
            RunConsoleCommand( "mp_show_voice_icons", "1" )
            RunConsoleCommand( "sv_alltalk", "3" )

do

    Flags = bit.bor( FCVAR_ARCHIVE, FCVAR_NOTIFY )
    CreateConVar = CreateConVar

    -- TODO: Write desc
    GM.DoorsHealth = CreateConVar( "jb_doors_health", "250", Flags, "", 50, 10000 )
    GM.Preparing = CreateConVar( "jb_preparing", "30", Flags, "", 5, 900 )
    GM.PlayerRespawnTime = CreateConVar( "jb_respawn_time", "2", Flags, "", 0, 300 )
    GM.GuardsArmor = CreateConVar( "jb_guards_armor", "0", Flags, "", 0, 1000 )

    GM.GuardsDiff = 1 / ( CreateConVar( "jb_prisoner_per_guard", "3", Flags, "", 1, game.MaxPlayers! - 1 )\GetInt! + 1 )
    cvars.AddChangeCallback( "jb_prisoner_per_guard", ( _, __, value ) ->
        (GM or GAMEMODE).GuardsDiff = 1 / ( ( tonumber( value ) or 3 ) + 1 )
    "Jailbreak" )

    GM\SetRealistic( CreateConVar( "jb_realistic", "0", Flags, "", 0, 1 )\GetBool! )
    cvars.AddChangeCallback( "jb_realistic", ( _, __, value ) ->
        (GM or GAMEMODE)\SetRealistic( value == "1" )
    "Jailbreak" )

resource.AddSingleFile( "resource/localization/en/jailbreak.properties" )
resource.AddWorkshop( "2950445307" )
resource.AddWorkshop( "643148462" )

TEAM_PRISONER = TEAM_PRISONER
TEAM_GUARD = TEAM_GUARD
hook_Run = hook.Run
tonumber = tonumber
IsValid = IsValid

do

    ENTITY = FindMetaTable( "Entity" )

    ENTITY.SetCreator = ( entity ) =>
        @SetNW2Entity( "entity-owner", entity )

do

    PLAYER = FindMetaTable( "Player" )

    PLAYER.SetMutedByWarden = ( bool ) =>
        @SetNW2Bool( "warden-mute", bool )

    PLAYER.RemoveRagdoll = =>
        ragdoll = @GetRagdollEntity!
        if ragdoll\IsValid!
            ragdoll\Remove!

    PLAYER.CreateRagdoll = =>
        @RemoveRagdoll!

        modelPath = @GetModel!
        unless util.IsValidModel( modelPath )
            return

        spawnOrigin = @WorldSpaceCenter!
        unless util.IsInWorld( spawnOrigin )
            return

        ragdoll = ents.Create( @GetBoneCount! > 1 and "prop_ragdoll" or "prop_physics" )
        ragdoll\SetPos spawnOrigin
        ragdoll\SetAngles @GetAngles!
        ragdoll\SetModel( modelPath )
        ragdoll\Spawn!

        (GM or GAMEMODE).PlayerRagdolls[] = ragdoll

        ragdoll.Team = @Team!
        ragdoll.Alive = @Alive!

        ragdoll\SetMaxHealth( @GetMaxHealth! )
        ragdoll\SetHealth( @Health! )

        -- TODO: Custom take damage
        ragdoll.MaxArmor = @GetMaxArmor!
        ragdoll.Armor = @Armor!

        ragdoll.PlayerAngles = @EyeAngles!

        for bodygroup in *@GetBodyGroups!
            ragdoll\SetBodygroup( bodygroup.id, @GetBodygroup( bodygroup.id ) )

        ragdoll\SetFlexScale( @GetFlexScale! )
        for flexID = 0, @GetFlexNum!
            ragdoll\SetFlexWeight( flexID, @GetFlexWeight( flexID ) )

        ragdoll\SetPlayerColor( @GetPlayerColor! )
        ragdoll\SetMaterial( @GetMaterial! )
        ragdoll\SetColor( @GetColor! )
        ragdoll\SetSkin( @GetSkin! )

        for index = 1, #@GetMaterials!
            materialPath = @GetSubMaterial( index )
            if materialPath ~= ""
                ragdoll\SetSubMaterial( index, materialPath )

        ragdoll\SetCollisionGroup( COLLISION_GROUP_PASSABLE_DOOR )
        ragdoll\SetNW2Bool( "is-player-ragdoll", true )
        ragdoll\SetNW2Entity( "ragdoll-owner", @ )
        @SetNW2Entity( "player-ragdoll", ragdoll )

        if @IsBot!
            ragdoll\SetNW2String( "steamid", @SteamID64! )
        ragdoll\SetNW2String( "nickname", @Nick! )
        ragdoll\SetCreator( @ )

        for boneID = 0, @GetBoneCount!
            ragdoll\ManipulateBonePosition( boneID, @GetManipulateBonePosition( boneID ) )
            ragdoll\ManipulateBoneAngles( boneID, @GetManipulateBoneAngles( boneID ) )
            ragdoll\ManipulateBoneJiggle( boneID, @GetManipulateBoneJiggle( boneID ) )
            ragdoll\ManipulateBoneScale( boneID, @GetManipulateBoneScale( boneID ) )

        if ragdoll\IsRagdoll!
            velocity = @LastMoveVelocity
            for physNum = 0, ragdoll\GetPhysicsObjectCount! - 1 do
                phys = ragdoll\GetPhysicsObjectNum( physNum )
                unless IsValid( phys )
                    continue

                boneID = ragdoll\TranslatePhysBoneToBone( physNum )
                if boneID < 0
                    continue

                origin, angles = @GetBonePosition( boneID )
                phys\SetVelocity( velocity )
                phys\SetAngles( angles )
                phys\SetPos( origin )
                phys\Wake!

        else
            phys = ragdoll\GetPhysicsObject!
            if IsValid( phys )
                phys\SetVelocity( @LastMoveVelocity )
                phys\Wake!

        if @IsOnFire!
            ragdoll\Ignite( 16, 64 )
            @Extinguish!

        hook_Run( "PlayerRagdollCreated", @, ragdoll )

        weapons = {}
        for weapon in *@GetWeapons!
            @DropWeapon( weapon )

            weapon\SetPos( spawnOrigin )
            weapon\SetParent( ragdoll )
            weapon\SetNotSolid( true )
            weapon\SetNoDraw( true )

            weapon.PickupForbidden = true
            weapons[] = weapon
        ragdoll.Weapons = weapons
        ragdoll.Ammo = @GetAmmo!

        return ragdoll

GM.ShowTeam = ( ply ) =>
    ply\ConCommand( "jb_showteam" )

GM.PlayerRagdolls = GM.PlayerRagdolls or {}

GM.PlayerInitialSpawn = ( ply, transiton ) =>
    ply.NextRespawnTime = 0
    isBot = ply\IsBot!

    sid64 = isBot and ply\Nick! or ply\SteamID64!
    for ragdoll in *@PlayerRagdolls
        if sid64 == ( isBot and ragdoll\GetNW2String( "nickname" ) or ragdoll\GetNW2String( "steamid" ) )
            ply\SetNW2Entity( "player-ragdoll", ragdoll )
            break

    if isBot and not @GameInProgress!
        ply\SetTeam( TEAM_PRISONER )
        return

    ply\SetTeam( TEAM_SPECTATOR )

GM.PlayerSpawn = ( ply, transiton ) =>
    ply\DisableWorldClicking( true )
    ply\AllowFlashlight( false )
    ply\SetCanZoom( false )
    ply\RemoveRagdoll!
    ply\RemoveAllAmmo!
    ply\StripWeapons!
    ply\UnSpectate!

    ply\SetSlowWalkSpeed( 100 )
    ply\SetWalkSpeed( 185 )
    ply\SetRunSpeed( 365 )

    ply\SetMaxHealth( 100 )
    ply\SetMaxArmor( 100 )
    ply\SetHealth( 100 )

    teamID = ply\Team!
    if teamID == TEAM_GUARD
        ply\SetArmor( @GuardsArmor\GetInt! )
    else
        ply\SetArmor( 0 )

    if teamID == TEAM_PRISONER
        ply\SetNoCollideWithTeammates( false )
        ply\SetAvoidPlayers( true )
    else
        ply\SetNoCollideWithTeammates( true )
        ply\SetAvoidPlayers( false )

    unless @PlayableTeams[ teamID ]
        ply\Spectate( OBS_MODE_ROAMING )
        ply\SetNoDraw( true )
        ply\SpectateEntity!
        return

    ply\SetNoDraw( false )

    unless transiton
        ply.Loadout = true
        hook_Run( "PlayerLoadout", ply, teamID )
        ply.Loadout = nil
    hook_Run( "PlayerSetModel", ply, teamID )

    if ply\IsBot!
        ply\SetPlayerColor( Vector( math.Rand( 0, 1 ), math.Rand( 0, 1 ), math.Rand( 0, 1 ) ) )
        ply\SetWeaponColor( Vector( math.Rand( 0, 1 ), math.Rand( 0, 1 ), math.Rand( 0, 1 ) ) )
    else
        ply\SetPlayerColor( Vector( ply\GetInfo( "cl_playercolor" ) ) )
        ply\SetSkin( ply\GetInfoNum( "cl_playerskin", 0 ) )

        weaponColor = Vector( ply\GetInfo( "cl_weaponcolor" ) )
        if weaponColor\Length! < 0.001
            weaponColor = Vector( 0.001, 0.001, 0.001 )
        ply\SetWeaponColor( weaponColor )

        groups = string.Explode( " ", ply\GetInfo( "cl_playerbodygroups" ) or "" )
        for i = 0, ply\GetNumBodyGroups! - 1 do
            ply\SetBodygroup( i, tonumber( groups[ i + 1 ] ) or 0 )

    hook_Run( "TeamPlayerSpawn", ply, teamID )
    ply\SetupHands!

GM.OnEntityCreated = ( weapon ) =>
    unless weapon\IsWeapon!
        return

    if @IsRoundRunning!
        weapon\Remove!
        return

    timer.Simple( 0.025, ->
        unless weapon\IsValid!
            return

        if IsValid( weapon\GetOwner! )
            return

        if weapon\GetPos!\Length! <= 3
            weapon\Remove!
            return

        weapon\SetCollisionGroup( COLLISION_GROUP_WEAPON )

        phys = weapon\GetPhysicsObject!
        unless IsValid( phys ) and phys\IsMotionEnabled!
            return

        counter = 0
        for entity in *ents.FindInSphere( weapon\GetPos!, 32 )
            if entity\IsWeapon! and not IsValid( entity\GetOwner! )
                counter = counter + 1
                if counter >= 5
                    phys\EnableMotion( false )
                    return
    )

COLLISION_GROUP_DEBRIS = COLLISION_GROUP_DEBRIS

GM.PlayerDroppedWeapon = ( ply, weapon ) =>
    timerName = "JB_WeaponDrop #" .. weapon\EntIndex!
    timer.Create( timerName, 3, 1, ->
        timer.Remove( timerName )
        unless weapon\IsValid!
            return

        phys = weapon\GetPhysicsObject!
        unless IsValid( phys )
            return

        start = weapon\WorldSpaceCenter!
        mins, maxs = weapon\GetCollisionBounds!

        tr = util.TraceHull( {
            start: start
            endpos: start + Vector( 0, 0, mins[ 3 ] - 2 )
            mask: MASK_SOLID_BRUSHONLY
            mins: mins
            maxs: maxs
        } )

        if tr.Hit
            weapon\SetCollisionGroup( COLLISION_GROUP_DEBRIS )
            phys\EnableMotion( false )
            return

        @PlayerDroppedWeapon( ply, weapon )
    )

GM.PlayerLoadout = ( ply, teamID ) =>
    if @IsRoundRunning! and teamID == TEAM_PRISONER and not ply\HasWeapon( "weapon_knife" ) and math.random( 1, 10 ) == 1
        ply\Give( "weapon_knife" )

    if teamID == TEAM_GUARD
        ply\GiveAmmo( 7, "357", true )
        ply\GiveAmmo( 60, "ar2", true )
        ply\GiveAmmo( 90, "smg1", true )
        ply\GiveAmmo( 40, "Pistol", true )
        ply\GiveAmmo( 20, "Buckshot", true )

    ply\Give( "jb_hands" )
    ply\SelectWeapon( "jb_hands" )

GM.PlayerSetModel = ( ply, teamID ) =>
    models = @PlayerModels[ teamID ]
    if teamID == TEAM_PRISONER
        models = models[ @FemalePrison and 1 or 2 ]

    requested = player_manager.TranslatePlayerModel( ply\GetInfo( "cl_playermodel" ) )
    if requested and #requested > 0
        for modelPath in *models
            if modelPath == requested
                ply\SetModel( modelPath )
                return

    ply\SetModel( table.Random( models ) )

GM.PlayerSetHandsModel = ( ply, hands ) =>
    info = player_manager.TranslatePlayerHands( player_manager.TranslateToPlayerModelName( ply\GetModel! ) )
    unless info
        return

    hands\SetModel( info.model )
    hands\SetSkin( info.matchBodySkin and ply\GetSkin! or info.skin )
    hands\SetBodyGroups( info.body )

GM.PlayerDeathThink = ( ply ) =>
    if @PlayableTeams[ ply\Team! ] and ( @GameInProgress! or ply.NextRespawnTime > CurTime! )
        return
    ply\Spawn!

GM.IsSpawnpointSuitable = ( ply, entity, makeSuitable ) =>
    start = entity\GetPos!
    mins, maxs = ply\GetHull!

    traceResult = util.TraceHull( {
        start: start
        endpos: start
        mask: MASK_PLAYERSOLID
        filter: entity
        mins: mins
        maxs: maxs
    } )

    if traceResult.Hit
        if makeSuitable
            traceEntity = traceResult.Entity
            if traceEntity\IsValid! and traceEntity\IsPlayer! and traceEntity\Alive! and @PlayableTeams[ traceEntity\Team! ]
                traceEntity\Kill!
                return true
        return false
    return true

GM.PlayerSelectTeamSpawn = ( teamID, ply ) =>
	spawnPoints = team.GetSpawnPoints( teamID )
    unless spawnPoints and not table.IsEmpty( spawnPoints )
        return

    if teamID == TEAM_GUARD
        return table.Random( spawnPoints )

    if teamID == TEAM_PRISONER
        for i = 0, 16
            spawnPoint = table.Random( spawnPoints )
            if hook_Run( "IsSpawnpointSuitable", ply, spawnPoint, i > 10 )
                return spawnPoint

GM.DoPlayerDeath = ( ply, attacker, damageInfo ) =>
    unless @PlayableTeams[ ply\Team! ]
        return

    ply\AddDeaths( 1 )

    ragdoll = ply\CreateRagdoll!
    unless IsValid( ragdoll )
        return

    damageOrigin = damageInfo\GetDamagePosition!
    if damageOrigin\Length! < 1
        damageOrigin = ragdoll\WorldSpaceCenter!

    if ragdoll\IsRagdoll!
        velocity = damageInfo\GetDamageForce!
        for physNum = 0, ragdoll\GetPhysicsObjectCount! - 1 do
            phys = ragdoll\GetPhysicsObjectNum( physNum )
            if IsValid( phys )
                phys\ApplyForceOffset( velocity / phys\GetMass!, damageOrigin )

    else
        phys = ragdoll\GetPhysicsObject!
        if IsValid( phys )
            phys\ApplyForceOffset( damageInfo\GetDamageForce! / phys\GetMass!, damageOrigin )

GM.PlayerSilentDeath = ( ply ) =>
    teamID = ply\Team!
    if @PlayableTeams[ teamID ]
        hook_Run( "TeamPlayerDeath", ply, teamID )

GM.PlayerDeath = ( ply, inflictor, attacker ) =>
    teamID = ply\Team!
    if @PlayableTeams[ teamID ]
        hook_Run( "TeamPlayerDeath", ply, teamID )

    -- TODO: Write here death notifies

GM.PreCleanupMap = =>
    table.Empty( @PlayerRagdolls )

GM.EntityRemoved = ( entity, fullUpdate ) =>
    if fullUpdate
        return

    if entity\IsPlayerRagdoll!
        table.RemoveByValue( @PlayerRagdolls, entity )

GM.PlayerDisconnected = ( ply ) =>
    teamID = ply\Team!
    if @PlayableTeams[ teamID ]
        hook_Run( "TeamPlayerDisconnected", ply, teamID )

DMG_NEVERGIB = DMG_NEVERGIB

GM.EntityTakeDamage = ( entity, damageInfo ) =>
    if bit.band( damageInfo\GetDamageType!, DMG_NEVERGIB ) == DMG_NEVERGIB
        return

    if entity\IsPlayerRagdoll!
        return true

    switch entity\GetClass!
        when "prop_door_rotating"
            maxHealth = entity\GetMaxHealth!
            if maxHealth <= 1
                maxHealth = @DoorsHealth\GetInt!
                entity\SetHealth( maxHealth )
                entity\SetMaxHealth( maxHealth )

            health = entity\Health!
            if health < 1
                return true

            health = math.max( 0, health - damageInfo\GetDamage! )
            entity\SetHealth( health )

            if health > 1
                return true

            model = entity\GetModel!
            unless model and #model ~= 0 and util.IsValidModel( model )
                return true

            center = entity\OBBCenter!
            center[ 1 ] = 0
            center[ 2 ] = 0

            origin = entity\LocalToWorld( center )
            unless util.IsInWorld( origin )
                return true

            prop = ents.Create( "prop_physics" )
            prop\SetCollisionGroup( COLLISION_GROUP_WEAPON )
            prop\SetAngles( entity\GetAngles! )
            prop\SetSkin( entity\GetSkin! )
            prop\SetModel( model )
            prop\SetPos( origin )
            prop\Spawn!

            name = entity\GetName!
            if name ~= ""
                for portal in *ents.FindByClass( "func_areaportal" )
                    if portal\GetInternalVariable( "target" ) ~= name
                        continue

                    portal\SetSaveValue( "target", "" )
                    portal\Fire( "open" )

            prop\EmitSound( "physics/wood/wood_crate_break" .. math.random( 1, 5 ) .. ".wav", 70, math.random( 80, 120 ), 1, CHAN_STATIC, 0, 1 )
            entity\Remove!

            phys = prop\GetPhysicsObject!
            if IsValid( phys )
                phys\ApplyForceOffset( damageInfo\GetDamageForce!, damageInfo\GetDamagePosition! )

            origin = damageInfo\GetDamagePosition!
            fx = EffectData!
            fx\SetOrigin( origin )
            fx\SetMagnitude( 5 )
            fx\SetRadius( 5 )
            fx\SetScale( 2 )
            util.Effect( "Sparks", fx )
            util.ScreenShake( origin, 5, 10, 0.5, 150 )
            return true
        when "func_button"
            if bit.band( damageInfo\GetDamageType!, DMG_BLAST ) == DMG_BLAST
                return true

            attacker = damageInfo\GetAttacker!
            if IsValid( attacker ) and attacker\IsPlayer!
                entity\Use( attacker, attacker )
            return true

GM.PlayerShouldTakeDamage = ( ply, attacker ) =>
    unless @PlayableTeams[ ply\Team! ]
        return false

    if @IsRoundPreparing!
        return false

    if @GameInProgress! and ply\IsGuard! and attacker\IsPlayer! and ply ~= attacker
        return attacker\IsPrisoner!

    return true

GM.FriendlyFire = ( ply, teamID ) =>
    return true

GM.GetFallDamage = ( ply, speed ) =>
    return math.max( 0, math.ceil( 0.2418 * speed - 141.75 ) )

GM.PlayerShouldTaunt = ( ply, act ) =>
    return @PlayableTeams[ ply\Team! ] and ply\Alive!

GM.AllowPlayerPickup = ( ply, entity ) =>
    unless @PlayableTeams[ ply\Team! ]
        return false

    weapon = ply\GetActiveWeapon!
    return IsValid( weapon ) and weapon\GetClass! == "jb_hands"

GM.PlayerCanPickupItem = ( ply, entity ) =>
    return @PlayableTeams[ ply\Team! ]

GM.PlayerCanPickupWeapon = ( ply, weapon ) =>
    return not weapon.PickupForbidden and ply.Loadout

GM.PlayerNoClip = ( ply, desiredState ) =>
    unless desiredState
        return true

    unless @PlayableTeams[ ply\Team! ]
        return false

    return ply\IsSuperAdmin!

GM.CanPlayerSuicide = ( ply ) =>
    if @IsRoundPreparing!
        return false
    return @PlayableTeams[ ply\Team! ]

GM.PlayerSwitchFlashlight = ( ply ) =>
    return ply\IsGuard! or ply\CanUseFlashlight!

GM.PlayerDeathSound = ( ply ) =>
    unless @IsRoundRunning!
        return true
    return ply\IsPrisoner!

GM.PlayerRagdollUse = ( ragdoll, ply ) =>
    if @PlayableTeams[ ply\Team! ] and ply\Alive!
        velocity = Vector!

        direction = ply\EyePos! - ragdoll\WorldSpaceCenter!
        direction\Normalize!

        weapons = ragdoll.Weapons
        if istable( weapons )
            for weapon in *weapons
                unless weapon\IsValid! and not IsValid( weapon\GetOwner! )
                    continue

                weapon.PickupForbidden = nil
                weapon\SetNotSolid( false )
                weapon\SetNoDraw( false )
                weapon\SetParent!
                velocity += direction * 200

                ply\PickupWeapon( weapon )
        ragdoll.Weapons = nil

        ammo = ragdoll.Ammo
        if istable( ammo )
            for ammoType, ammoCount in pairs( ammo )
                ply\GiveAmmo( ammoCount, ammoType )
                velocity += direction * 100
        ragdoll.Ammo = nil

        if velocity\Length! < 100
            return

        if ragdoll\IsRagdoll!
            physParts = {}
            for physNum = 1, ragdoll\GetPhysicsObjectCount! - 1 do
                phys = ragdoll\GetPhysicsObjectNum( physNum )
                if IsValid( phys )
                    physParts[] = phys

            table.Shuffle( physParts )

            for index = 1, math.min( #physParts, 4 )
                physParts[ index ]\ApplyForceCenter( velocity )

        else
            phys = ragdoll\GetPhysicsObject!
            if IsValid( phys )
                phys\ApplyForceCenter( velocity )

        return

GM.PlayerUse = ( ply, entity ) =>
    curTime, lastUse = CurTime!, ply.LastUse or 0
    ply.LastUse = curTime

    if ( curTime - lastUse ) <= 0.025
        return

    if entity\IsPlayerRagdoll!
        hook_Run( "PlayerRagdollUse", entity, ply )
        return false

    unless @PlayableTeams[ ply\Team! ]
        return false

    if entity\IsWeapon! and not entity\IsPlayerHolding! and not entity.PickupForbidden
        if ply\HasWeapon( entity\GetClass! )
            pickedAmmo = false

            clip1, clip1Type = entity\Clip1!, entity\GetPrimaryAmmoType!
            if clip1 > 0 and clip1Type >= 0 and ply\GetAmmoCount( clip1Type ) < ( game.GetAmmoMax( clip1Type ) / 2 )
                ply\GiveAmmo( clip1, clip1Type, false )
                entity\SetClip1( 0 )
                pickedAmmo = true

            clip2, clip2Type = entity\Clip2!, entity\GetSecondaryAmmoType!
            if clip2 > 0 and clip2Type >= 0 and ply\GetAmmoCount( clip2Type ) < ( game.GetAmmoMax( clip2Type ) / 2 )
                ply\GiveAmmo( clip2, clip2Type, false )
                entity\SetClip2( 0 )
                pickedAmmo = true

            unless pickedAmmo
                phys = entity\GetPhysicsObject!
                if IsValid( phys )
                    phys\EnableMotion( true )
                    phys\Wake!
                ply\PickupObject( entity )

                hook.Add "Think", entity, ->
                    if entity\GetCollisionGroup! ~= COLLISION_GROUP_DEBRIS
                        entity\SetCollisionGroup( COLLISION_GROUP_DEBRIS )

        else
            ply\PickupWeapon( entity, false )

        return false

    weapon = ply\GetActiveWeapon!
    if IsValid( weapon ) and weapon\GetHoldType! == "fist" and entity\IsPlayer!
        velocity = ply\GetVelocity!\GetNormalized! * 16
        entity\SetVelocity( velocity )
        ply\SetVelocity( -velocity )
        return false
    return true

GM.PlayerCanSeePlayersChat = ( str, isTeam, listener, speaker ) =>
    unless @GameInProgress!
        return true

    if @AllTalk\GetInt! > 2
        return true

    unless IsValid( speaker )
        return true

    listenerAlive, speakerAlive = listener\Alive!, speaker\Alive!
    if not listenerAlive and not speakerAlive
        return true

    listenerTeam, speakerTeam = listener\Team!, speaker\Team!
    if not @PlayableTeams[ listenerTeam ] and not speakerAlive
        return true

    if not @PlayableTeams[ speakerTeam ] and not listenerAlive
        return true

    if isTeam and speakerTeam == listenerTeam
        return true

    return false

GM.PlayerCanHearPlayersVoice = ( listener, speaker ) =>
    unless @GameInProgress!
        return true, false

    if @AllTalk\GetInt! > 2
        return true, false

    listenerAlive, speakerAlive = listener\Alive!, speaker\Alive!
    if not listenerAlive and not speakerAlive
        return true, false

    if speakerAlive and speaker\IsMutedByWarden!
        return false, false

    listenerTeam, speakerTeam = listener\Team!, speaker\Team!
    if not @PlayableTeams[ listenerTeam ] and not speakerAlive
        return true, false

    if not @PlayableTeams[ speakerTeam ] and not listenerAlive
        return true, false

    speakerPosition = speaker\EyePos!
    if speakerPosition\DistToSqr( listener\EyePos! ) <= @VoiceChatDistance
        rf = RecipientFilter!
        rf\AddPAS( speakerPosition )
        for ply in *rf\GetPlayers!
            if ply == listener
                return true, true

    return false, false

GM.GetTeamAliveCount = ( teamID ) =>
    alive = 0
    for ply in *team.GetPlayers( teamID )
        if ply\Alive!
            alive += 1
    return alive

GM.PlayerRequestTeam = ( ply, teamID ) =>
    unless team.Joinable( teamID )
        return

    if ply\Team! == teamID
        return

    if @PlayableTeams[ teamID ] and teamID ~= TEAM_PRISONER
        guardCount = @GetTeamAliveCount( TEAM_GUARD )
        unless guardCount == 0 or ( guardCount / @GetTeamAliveCount( TEAM_PRISONER ) ) < @GuardsDiff
            -- TODO: here chat message
            return

    if ply\Alive!
        if @PlayableTeams[ ply\Team! ]
            ply\Kill!
        else
            ply\KillSilent!

    ply\SetTeam( teamID )

concommand.Add( "drop", ( ply ) ->
    dropWeapon = ply\GetActiveWeapon!
    unless IsValid( dropWeapon )
        return

    model = dropWeapon\GetWeaponWorldModel!
    unless model and util.IsValidModel( model )
        return

    ply\DropWeapon( dropWeapon )

    maxWeight, nextWeapon = nil, nil
    for weapon in *ply\GetWeapons!
        weight = weapon\GetWeight!

        if not maxWeight or maxWeight <= weight
            nextWeapon = weapon
            maxWeight = weight

    unless IsValid( nextWeapon )
        return

    ply\SelectWeapon( nextWeapon\GetClass! )
)

GM.InitPostEntity = =>
    @SetRoundState( "waiting" )

GM.SetRoundState = ( state ) =>
    oldState = @GetRoundState!
    SetGlobal2String( "round-state", state )
    hook_Run( "RoundStateChanged", oldState, state )

GM.SetWinningTeam = ( teamID ) =>
    SetGlobal2Int( "winning-team", teamID )

GM.CanChangeRoundState = =>
    return @GetNextRoundStateTime! <= CurTime!

GM.NextRoundStateTime = =>
    SetGlobal2Int( "next-round-state", CurTime! + @Preparing\GetInt! )

GM.Think = =>
    unless @CanChangeRoundState!
        return

    switch @GetRoundState!
        when "preparing"
            @SetRoundState( "running" )
        when "ended"
            @SetRoundState( "waiting" )

GM.SelectBestTeam = ( ply ) =>
    guardCount = team.NumPlayers( TEAM_GUARD )
    if guardCount == 0 or ( guardCount / team.NumPlayers( TEAM_PRISONER ) ) < @GuardsDiff
        ply\SetTeam( TEAM_GUARD )
    else
        ply\SetTeam( TEAM_PRISONER )

GM.GetBotFromTeam = ( teamID ) =>
    for ply in *team.GetPlayers( teamID )
        if ply\IsBot!
            return ply

GM.RoundStateChanged = ( old, new ) =>
    switch ( new )
        when "waiting"
            for ply in *player.GetAll!
                if ply\IsBot!
                    @PlayerRequestTeam( ply, TEAM_PRISONER )
                elseif @PlayableTeams[ ply\Team! ]
                    ply\KillSilent!
    		timer.Simple( 0, game.CleanUpMap )

        when "preparing"
            @FemalePrison = math.random( 1, 10 ) == 1
            for ply in *player.GetAll!
                if ply\IsBot!
                    ply\SetTeam( TEAM_PRISONER )

                if @PlayableTeams[ ply\Team! ]
                    ply\Spawn!
    		timer.Simple( 0, game.CleanUpMap )

        when "running"
            guardCount, prisonerCount = team.NumPlayers( TEAM_GUARD ), team.NumPlayers( TEAM_PRISONER )
            totalCount = guardCount + prisonerCount

            while ( guardCount / prisonerCount ) > @GuardsDiff and totalCount > ( ( 1 / @GuardsDiff ) + guardCount )
                for i = 1, guardCount
                    guard = @GetBotFromTeam( TEAM_GUARD ) or table.Random( team.GetPlayers( TEAM_GUARD ) )
                    if guard\IsValid!
                        guard\SetTeam( TEAM_PRISONER )
                        guard\Spawn!
                        break
                guardCount, prisonerCount = team.NumPlayers( TEAM_GUARD ), team.NumPlayers( TEAM_PRISONER )
                totalCount = guardCount + prisonerCount

            if guardCount == 0 or prisonerCount == 0
                @SetRoundState( "waiting" )
                return

            for ply in *player.GetAll!
                if ply\IsBot!
                    @SelectBestTeam( ply )
                    ply\Spawn!
                elseif @PlayableTeams[ ply\Team! ] and not ply\Alive!
                    ply\Spawn!

        when "ended"
            guardCount, prisonerCount = @GetTeamAliveCount( TEAM_GUARD ), @GetTeamAliveCount( TEAM_PRISONER )
            if guardCount > prisonerCount
                team.AddScore( TEAM_GUARD, 1 )
                @SetWinningTeam( TEAM_GUARD )
            elseif guardCount < prisonerCount
                team.AddScore( TEAM_PRISONER, 1 )
                @SetWinningTeam( TEAM_PRISONER )
            else
                @SetWinningTeam( 0 )

GM.TeamPlayerDeath = ( ply, teamID ) =>
    ply.NextRespawnTime = CurTime! + @PlayerRespawnTime\GetFloat!
    ply\Spectate( OBS_MODE_ROAMING )
    ply\SpectateEntity!

    timer.Create "Jailbreak::TeamPlayerDeath", 1, 1, ->
        timer.Remove "Jailbreak::TeamPlayerDeath"

        if @IsRoundRunning! and ( @GetTeamAliveCount( TEAM_GUARD ) == 0 or @GetTeamAliveCount( TEAM_PRISONER ) == 0 )
            @SetRoundState( "ended" )
            @NextRoundStateTime!

GM.TeamPlayerDisconnected = ( ply, teamID ) =>
    timer.Create "Jailbreak::TeamPlayerDisconnected", 1, 1, ->
        timer.Remove "Jailbreak::TeamPlayerDisconnected"

        if @IsRoundRunning! and ( @GetTeamAliveCount( TEAM_GUARD ) == 0 or @GetTeamAliveCount( TEAM_PRISONER ) == 0 )
            @SetRoundState( "ended" )
            @NextRoundStateTime!

    ply\CreateRagdoll!

GM.TeamPlayerSpawn = ( ply ) =>
    if @IsWaitingPlayers! and @GetTeamAliveCount( TEAM_GUARD ) > 0 and @GetTeamAliveCount( TEAM_PRISONER ) > 0
        @SetRoundState( "preparing" )
        @NextRoundStateTime!

    ragdoll = ply\GetRagdollEntity!
    if ragdoll\IsValid!
        unless ragdoll.Alive and ragdoll\Health! > 1
            ply\KillSilent!
            return

        ply\SetTeam( ragdoll.Team )
        ply\Spawn!

        ply\SetEyeAngles( Angle( 0, ragdoll.PlayerAngles[ 2 ], 0 ) )
        ply\SetPos( ragdoll\WorldSpaceCenter! )
        ply\SetModel( ragdoll\GetModel! )

        ply\SetHealth( ply\GetMaxHealth! * ( ragdoll\Health! / ragdoll\GetMaxHealth! ) )
        ply\SetArmor( ply\GetMaxArmor! * ( ragdoll.Armor / ragdoll.MaxArmor ) )

        ply\SetMaterial( ragdoll\GetMaterial! )
        ply\SetColor( ragdoll\GetColor! )
        ply\SetSkin( ragdoll\GetSkin! )

        for bodygroup in *ply\GetBodyGroups!
            ply\SetBodygroup( bodygroup.id, ragdoll\GetBodygroup( bodygroup.id ) )

        ply\SetFlexScale( ragdoll\GetFlexScale! )
        for flexID = 0, ply\GetFlexNum!
            ply\SetFlexWeight( flexID, ragdoll\GetFlexWeight( flexID ) )

        for index = 1, #ply\GetMaterials!
            materialPath = ragdoll\GetSubMaterial( index )
            if materialPath ~= ""
                ply\SetSubMaterial( index, materialPath )

        if ragdoll\IsOnFire!
            ply\Ignite( 16, 64 )
            ragdoll\Extinguish!

        for boneID = 0, ply\GetBoneCount!
            ply\ManipulateBonePosition( boneID, ragdoll\GetManipulateBonePosition( boneID ) )
            ply\ManipulateBoneAngles( boneID, ragdoll\GetManipulateBoneAngles( boneID ) )
            ply\ManipulateBoneJiggle( boneID, ragdoll\GetManipulateBoneJiggle( boneID ) )
            ply\ManipulateBoneScale( boneID, ragdoll\GetManipulateBoneScale( boneID ) )

        if ragdoll\IsRagdoll!
            velocity = Vector!

            count = ragdoll\GetPhysicsObjectCount!
            for physNum = 0, count - 1
                phys = ragdoll\GetPhysicsObjectNum( physNum )
                if IsValid( phys )
                    velocity += phys\GetVelocity!

            velocity /= count
            ply\SetVelocity( velocity )
        else
            phys = ragdoll\GetPhysicsObject!
            if IsValid( phys )
                ply\SetVelocity( phys\GetVelocity! )

        hook_Run( "PlayerRagdollUse", ragdoll, ply )
        ragdoll\Remove!

concommand.Add( "changeteam", ( ply, _, args ) ->
    hook_Run( "PlayerRequestTeam", ply, tonumber( args[ 1 ] ) )
)