ErrorNoHaltWithStack = ErrorNoHaltWithStack
:random, :Rand = math
Jailbreak = Jailbreak
xpcall = xpcall

colors = Jailbreak.Colors
:white = colors

events = Jailbreak.Events
unless istable( events )
    events = {}
    Jailbreak.Events = events

class JailbreakEvent
    new: ( name, init, finish ) =>
        assert isstring( name ), "name must be a string"
        assert isfunction( init ), "init must be a function"
        assert isfunction( finish ), "finish must be a function"

        @startState = ROUND_PREPARING
        @finishState = ROUND_RUNNING
        @type = "default"
        @finish = finish
        @color = white
        @init = init
        @name = name

        events[] = @

    GetStartState: =>
        return @startState

    SetStartState: ( state ) =>
        @startState = state

    GetFinishState: =>
        return @finishState

    SetFinishState: ( state ) =>
        @finishState = state

    GetChance: =>
        return @chance

    SetChance: ( chance ) =>
        if TypeID( chance ) ~= TYPE_CONVAR
            assert isnumber( chance ), "chance must be a number"
        @chance = chance

    GetType: =>
        return @type

    SetType: ( str ) =>
        assert isstring( str ), "type must be a string"
        @type = str

    GetColor: =>
        return @color

    SetColor: ( color ) =>
        assert IsColor( color ), "color must be a Color"
        @color = color

    GetMessage: =>
        return @color, "#jb.event." .. @name

    SendMessage: =>
        Jailbreak.SendChatText( false, white, "+ ", @GetMessage! )

    Finish: ( state ) =>
        if state ~= @finishState
            return

        finish = @finish
        if finish
            xpcall( finish, ErrorNoHaltWithStack, @, state )

    Run: ( state ) =>
        if state ~= @startState
            return

        chance = @chance
        unless chance
            return

        if TypeID( chance ) == TYPE_CONVAR
            chance = chance\GetInt!

        if isnumber( chance ) and ( ( chance == 0 ) or ( chance ~= 100 and random( 1, 100 ) > chance ) )
            return

        status, writeMessage, stopEvents = xpcall( @init, ErrorNoHaltWithStack, @, state )
        if status and writeMessage
            @SendMessage!

        return stopEvents or false

Jailbreak.RegisterEvent = ( name, init, finish ) ->
    for event in *events
        if event.name == name
            event.init = init
            event.finish = finish
            return event

    return JailbreakEvent( name, init, finish )

Jailbreak.RunEvents = ( state ) ->
    stoppedTypes = {}
    for event in *events
        event\Finish( state )

        if stoppedTypes[ event.type ]
            continue

        if event\Run( state )
            stoppedTypes[ event.type ] = true

ConVarFlags = bit.bor( FCVAR_ARCHIVE, FCVAR_NOTIFY )

do

    event = Jailbreak.RegisterEvent "female-prison", ->
            Jailbreak.SetFemalePrison( true )
            return true, true,
        ->
            Jailbreak.SetFemalePrison( false )

    event\SetChance( CreateConVar( "jb_female_prison_chance", "15", ConVarFlags, "Female prison event chance.", 0, 100 ) )
    event\SetType( "playermodel" )
    event\SetColor( colors.pink )

do

    :PrecacheModel = util
    Vector = Vector
    :Random = table

    Models = player_manager.AllValidModels!

    event = Jailbreak.RegisterEvent "masquerade", ->
            hook.Add "PlayerSetModel", "Jailbreak::MasqueradeEvent", =>
                modelPath = Random( Models )
                if modelPath ~= nil
                    modelPath = Jailbreak.FixModelPath( modelPath )
                    PrecacheModel( modelPath )
                    @SetModel( modelPath )
                    return true

            hook.Add "TeamPlayerSpawn", "Jailbreak::MasqueradeEvent", =>
                if @IsBot!
                    return

                @SetPlayerColor( Vector( Rand( 0, 1 ), Rand( 0, 1 ), Rand( 0, 1 ) ) )
                @SetWeaponColor( Vector( Rand( 0, 1 ), Rand( 0, 1 ), Rand( 0, 1 ) ) )
                @SetSkin( random( 0, @SkinCount! ) )

                for bodygroup in *@GetBodyGroups!
                    @SetBodygroup( bodygroup.id, random( 0, bodygroup.num - 1 ) )

            return true, true,
        ->
            hook.Remove "TeamPlayerSpawn", "Jailbreak::MasqueradeEvent"
            hook.Remove "PlayerSetModel", "Jailbreak::MasqueradeEvent"

    event\SetChance( CreateConVar( "jb_masquerade_event_chance", "5", ConVarFlags, "Masquerade event chance.", 0, 100 ) )
    event\SetType( "playermodel" )
    event\SetFinishState( ROUND_ENDED )

    HSVToColor = HSVToColor

    event.SendMessage = =>
        seed = random( 0, 360 )

        for ply in *player.GetHumans!
            text = Jailbreak.Translate( ply, "#jb.event." .. @name )
            message, index = {}, 0

            for i = 1, utf8.len( text ) - 1
                index += 1
                message[ index ] = HSVToColor( i * seed % 360, 1, 1 )

                index += 1
                message[ index ] = utf8.sub( text, i, i )

            Jailbreak.SendChatText( ply, white, "+ ", unpack( message ) )

do

    event = Jailbreak.RegisterEvent "grass-is-lava", ->
            hook.Add "PlayerDeathSound", "Jailbreak::GrassIsLavaEvent", =>
                @EmitSound( "vo/npc/" .. ( Jailbreak.IsFemalePrison! and "female01" or "male01" ) .. "/ohno.wav", 90, random( 80, 120 ), 1, CHAN_STATIC, 0, 1 )
                return true

            hook.Add "PlayerFootstep", "Jailbreak::GrassIsLavaEvent", ( pos, _, __, volume ) =>
                unless @IsInGame!
                    return

                pos[ 3 ] -= 1000
                eyePos = @EyePos!

                traceResult = util.TraceLine( {
                    start: eyePos
                    endpos: pos
                    filter: @
                } )

                unless traceResult.Hit and traceResult.HitWorld
                    return

                if traceResult.MatType == MAT_GRASS
                    @SetColor( colors.black )
                    @Ignite( 3, 32 )

                    damageInfo = DamageInfo!
                    damageInfo\SetDamageType( DMG_BURN )
                    damageInfo\SetDamage( @Health! + @Armor! )
                    damageInfo\SetDamageForce( ( eyePos - pos ) * 10 )
                    damageInfo\SetDamagePosition( pos )
                    damageInfo\SetAttacker( @ )
                    @TakeDamageInfo( damageInfo )
                    return true

            return true, false,
        ->
            hook.Remove "PlayerDeathSound", "Jailbreak::GrassIsLavaEvent"
            hook.Remove "PlayerFootstep", "Jailbreak::GrassIsLavaEvent"

    event\SetChance( CreateConVar( "jb_grass_is_lava_chance", "5", ConVarFlags, "Grass is lava event chance.", 0, 100 ) )
    event\SetStartState( ROUND_RUNNING )
    event\SetFinishState( ROUND_ENDED )
    event\SetType( "death" )

    event.SendMessage = =>
        for ply in *player.GetHumans!
            text = Jailbreak.Translate( ply, "#jb.event." .. @name )
            message, index = {}, 0

            length = utf8.len( text ) - 1
            for i = 1, length
                index += 1
                message[ index ] = HSVToColor( ( length - i ) * 10 % 360, 1, 1 )

                index += 1
                message[ index ] = utf8.sub( text, i, i )

            Jailbreak.SendChatText( ply, white, "+ ", unpack( message ) )

do

    event = Jailbreak.RegisterEvent "powerful-players", ->
            Jailbreak.PowerfulPlayers = true
            return true, false,
        ->
            Jailbreak.PowerfulPlayers = false

    event\SetStartState( ROUND_RUNNING )
    event\SetFinishState( ROUND_ENDED )
    event\SetColor( colors.red )
    event\SetType( "damage" )
    event\ConVar( 5 )
