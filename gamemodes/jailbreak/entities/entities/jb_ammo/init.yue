AddCSLuaFile( "cl_init.lua" )
AddCSLuaFile( "shared.lua" )
include( "shared.lua" )

import random from math

ENT.StartAmount = 128

ENT.Initialize = =>
    @m_iAmount = @StartAmount
    @SetModel( @Model )

    @SetCollisionGroup( COLLISION_GROUP_WEAPON )
    @SetMoveType( MOVETYPE_VPHYSICS )
    @PhysicsInit( SOLID_VPHYSICS )
    @SetSolid( SOLID_VPHYSICS )
    @SetUseType( SIMPLE_USE )
    @DrawShadow( true )
    @PhysWake!
    return

ENT.Use = ( ply ) =>
    unless ply\IsPlayer! and ply\Alive!
        return

    weapon = ply\GetActiveWeapon!
    unless weapon and weapon\IsValid!
        ply\SendNotify( "#jb.error.cant-do-that", NOTIFY_ERROR, 5 )
        return

    ammoAmount, gived = @m_iAmount, false

    if weapon\Clip1! ~= -1
        clip1Type = weapon\GetPrimaryAmmoType!
        if clip1Type >= 0
            acceptAmount = ply\GetPickupAmmoCount( clip1Type )
            if acceptAmount > ammoAmount
                acceptAmount = ammoAmount

            if acceptAmount ~= 0
                ply\GiveAmmo( acceptAmount, clip1Type, false )
                ammoAmount -= acceptAmount
                gived = true

    clip2Type = weapon\GetSecondaryAmmoType!
    if clip2Type >= 0 and acceptAmount ~= 0
        acceptAmount = ply\GetPickupAmmoCount( clip2Type )
        if acceptAmount > ammoAmount
            acceptAmount = ammoAmount

        if acceptAmount ~= 0
            ply\GiveAmmo( acceptAmount, clip2Type, false )
            ammoAmount -= acceptAmount
            gived = true

    unless gived
        ply\SendNotify( "#jb.error.cant-do-that", NOTIFY_ERROR, 5 )
        return

    ply\SendNotify( "#jb.jb_ammo ( " .. ammoAmount .. " / " .. @StartAmount .. " )", NOTIFY_HINT, 5 )
    ply\EmitSound( "items/ammo_pickup.wav", 75, random( 80, 120 ), 1, CHAN_STATIC, 0, 1 )
    @m_iAmount = ammoAmount

    if ammoAmount ~= 0
        return

    @Remove!
    return

sk_npc_dmg_fraggrenade = GetConVar( "sk_npc_dmg_fraggrenade" )
sk_fraggrenade_radius = GetConVar( "sk_fraggrenade_radius" )
:Explosion = Jailbreak

ENT.OnTakeDamage = ( damageInfo ) =>
    if @m_bExploded or @m_iAmount < 16
        return

    radius = sk_fraggrenade_radius\GetInt!
    if damageInfo\IsExplosionDamage!
        radius *= random( 1, 4 )
    elseif random( 1, 10 ) < 8
        return

    @m_bExploded = true

    Explosion( @, damageInfo\GetAttacker!, @WorldSpaceCenter!, radius, sk_npc_dmg_fraggrenade\GetInt! )
    @Remove!
    return 0
