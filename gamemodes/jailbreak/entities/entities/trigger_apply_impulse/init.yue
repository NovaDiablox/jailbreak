ENT.Type = "brush"
ENT.Base = "base_brush"

ENT.Initialize = =>
	@SetSolid( SOLID_BBOX )
	@SetTrigger( true )
	@Entities = {}

ENT.StartTouch = ( entity ) =>
	@TriggerOutput( "OnStartTouch", entity )
	@Entities[] = entity

do

	:remove = table

	ENT.EndTouch = ( entity ) =>
		entities = @Entities
		for index = 1, #entities
			if entities[ index ] == entity
				remove( entities, index )
				break

		@TriggerOutput( "OnEndTouch", entity )

ENT.Disable = =>
	@Disabled = true

ENT.Enable = =>
	@Disabled = false

ENT.Toggle = =>
	@Disabled = not @Disabled

ENT.AcceptInput = ( key, activator, caller, data ) =>
    func = @[ key ]
    if func
        func( @, activator, caller, data )

do

	defaultVector = Vector( 0, 0, 1 )
	IsValid = IsValid

	ENT.ApplyImpulse = =>
		if @Disabled
			return

		for entity in *@Entities
			unless IsValid( entity )
				continue

			velocity = ( @ImpulseDir or defaultVector ) * ( @Force or 0 )
			if entity\IsPlayer!
				entity\SetVelocity( velocity )
			else
				phys = entity\GetPhysicsObject!
				if IsValid( phys )
					phys\ApplyForceCenter( velocity )

do

	Angle = Angle

	ENT.KeyValue = ( key, value ) =>
		switch key
			when "StartDisabled"
				@Disabled = tobool( value )

			when "impulse_dir"
				@ImpulseDir = Angle( value )\Forward!

			when "force"
				@Force = tonumber( value )

			when "targetname"
				@TargetName = value

			when "OnStartTouch"
				@StoreOutput( key, value )

