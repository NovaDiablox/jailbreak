AddCSLuaFile!

CLIENT, SERVER = CLIENT, SERVER
CurTime = CurTime
:Simple = timer
:random = math

SWEP.PrintName = "#jb.hands"
SWEP.Spawnable = false

if CLIENT
    SWEP.WepSelectIcon = surface.GetTextureID( "weapons/jb_hands" )

SWEP.Slot = 0
SWEP.SlotPos = 4
SWEP.Weight = -5

SWEP.ViewModel = Model( "models/weapons/c_arms.mdl" )
SWEP.WorldModel = ""

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = true
SWEP.Secondary.Ammo = "none"

SWEP.DrawWeaponInfoBox = false
SWEP.ViewModelFOV = 60
SWEP.DrawAmmo = false
SWEP.UseHands = true

SWEP.Initialize = =>
    @SetHoldType( "normal" )

SWEP.SetupDataTables = =>
    @NetworkVar( "Float", 0, "NextMeleeAttack" )
    @NetworkVar( "Float", 1, "NextIdle" )
    @NetworkVar( "Int", 2, "Combo" )

do

    NULL = NULL

    SWEP.GetViewModel = =>
        owner = @GetOwner!
        if owner\IsValid!
            return owner\GetViewModel!

        return NULL

SWEP.PlaySequence = ( sequenceName, onFinish ) =>
    @SequenceFinished = false

    owner = @GetOwner!
    unless owner\IsValid! and owner\Alive!
        return

    vm = owner\GetViewModel!
    unless vm\IsValid!
        return

    seqid = vm\LookupSequence( sequenceName )
    unless seqid and seqid > 0
        return

    vm\SendViewModelMatchingSequence( seqid )

    duration = vm\SequenceDuration( seqid ) / vm\GetPlaybackRate!
    nextSequence = CurTime! + duration

    Simple duration, ->
        unless @IsValid!
            return

        if @GetOwner! ~= owner
            return

        @SequenceFinished = true

        if onFinish
            onFinish( owner, vm )

    return nextSequence, duration

SWEP.SetNextFire = ( curTime ) =>
    @SetNextPrimaryFire( curTime )
    @SetNextSecondaryFire( curTime )

do

    swingSound = Sound( "WeaponFrag.Throw" )
    PLAYER_ATTACK1 = PLAYER_ATTACK1
    CHAN_STATIC = CHAN_STATIC

    seqFinish, delay, combo = 0, 0, 0

    SWEP.PrimaryAttack = ( right ) =>
        if @Pulls
            return

        if @GetHoldType! == "normal"
            if SERVER
                @UseDoor( false )

            return

        if @GetNextIdle! == 0
            return

        owner = @GetOwner!
        owner\SetAnimation( PLAYER_ATTACK1 )
        owner\EmitSound( swingSound, 50, random( 80, 120 ), 1, CHAN_STATIC, 0, 1 )

        anim = "fists_left"
        if right
            anim = "fists_right"

        combo = @GetCombo!
        if combo >= 2
            anim = "fists_uppercut"

        seqFinish, delay = @PlaySequence( anim )
        @SetNextMeleeAttack( CurTime! + ( delay / 4 ) / math.max( combo, 1 ) )
        @SetNextFire( seqFinish )
        @SetNextIdle( seqFinish )

SWEP.SecondaryAttack = =>
    if @Pulls
        return

    if @GetHoldType! ~= "normal"
        @PrimaryAttack( true )
    elseif SERVER
        @UseDoor( true )

SWEP.HitDistance = CreateConVar( "jb_hands_distance", "48", bit.bor( FCVAR_ARCHIVE, FCVAR_NOTIFY, FCVAR_REPLICATED, FCVAR_DONTRECORD ), "Distance of the player's fist punch.", 16, 4096 )

do

    traceResult = {}
    trace = { output: traceResult, mask: MASK_SHOT_HULL, mins: Vector( -10, -10, -8 ), maxs: Vector( 10, 10, 8 ) }
    hitSound = Sound( "Flesh.ImpactHard" )
    :TraceHull = util

    SWEP.DealDamage = =>
        owner = @GetOwner!
        unless owner\IsValid! and owner\IsPlayer! and owner\Alive!
            return

        owner\LagCompensation( true )

        trace.start = owner\GetShootPos!
        trace.endpos = trace.start + owner\GetAimVector! * @HitDistance\GetInt!
        trace.filter = owner
        TraceHull( trace )

        if traceResult.Hit
            unless game.SinglePlayer! and CLIENT
                @EmitSound( hitSound, 70, random( 80, 120 ), 1, CHAN_BODY, 0, 1 )

            if SERVER
                @HitMaterial( traceResult.MatType, owner, traceResult.HitPos )

        if SERVER
            @HitEntity( traceResult.Entity, owner, traceResult.HitPos )

        owner\LagCompensation( false )

SWEP.Show = =>
    vm = @GetViewModel!
    if vm\IsValid!
        vm\SetNoDraw( false )

    @SetHoldType( "fist" )

    @PrintName = "#jb.fists"
    @Pulls = true

    @SetNextIdle( @PlaySequence( "fists_draw", ->
        @Pulls = false
    ) )

SWEP.Hide = =>
    @Pulls = true
    @SetNextIdle( 0 )
    @SetHoldType( "normal" )
    @PrintName = "#jb.hands"
    @PlaySequence( "fists_holster", ( _, vm ) ->
        vm\SetNoDraw( true )
        @Pulls = false
    )

SWEP.Deploy = =>
    @SequenceFinished = true

    @SetNextFire( CurTime! + 1.5 )
    @SetNextMeleeAttack( 0 )
    @SetNextIdle( 0 )

    if @GetHoldType! == "normal"
        vm = @GetViewModel!
        if vm\IsValid!
            vm\SetNoDraw( true )
    else
        @Show!

    if SERVER
        @SetCombo( 0 )

    return true

SWEP.Holster = ( weapon ) =>
    @SetNextMeleeAttack( 0 )
    @SetNextIdle( 0 )
    return true

curTime = 0

do

    idletime, meleetime = 0, 0

    SWEP.Think = =>
        if @GetHoldType! ~= "fist" or @Pulls
            return

        curTime = CurTime!

        idletime = @GetNextIdle!
        if idletime > 0 and curTime > idletime
            @SetNextIdle( @PlaySequence( "fists_idle_0" .. random( 1, 2 ) ) )

        meleetime = @GetNextMeleeAttack!
        if meleetime > 0 and curTime > meleetime
            @SetNextMeleeAttack( 0 )
            @DealDamage!

        if SERVER and curTime > @GetNextPrimaryFire! + 0.1
            @SetCombo( 0 )

do

    lastReload = 0

    SWEP.Reload = =>
        curTime = CurTime!

        lastReload = @m_fLastReload or curTime
        @m_fLastReload = curTime

        if ( curTime - lastReload ) <= 0.25 or @Pulls
            return

        if @GetHoldType! == "normal"
            @Show!
            return

        @Hide!
        return
