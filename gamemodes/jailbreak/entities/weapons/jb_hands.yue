AddCSLuaFile!

SWEP.PrintName = "#jb.hands"
-- SWEP.Author = "Kilburn, robotboy655, MaxOfS2D, Tenrys and Unknown Developer"
-- SWEP.Purpose = "Well we sure as hell didn't use guns! We would just wrestle Hunters to the ground with our bare hands! I used to kill ten, twenty a day, just using my fists."

SWEP.Slot = 0
SWEP.SlotPos = 4
SWEP.Weight = -5

SWEP.Spawnable = true

SWEP.ViewModel = Model( "models/weapons/c_arms.mdl" )
SWEP.WorldModel = ""
SWEP.ViewModelFOV = 54
SWEP.UseHands = true

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = true
SWEP.Secondary.Ammo = "none"

SWEP.DrawWeaponInfoBox = false
SWEP.DrawAmmo = false

SWEP.HitDistance = 48

swingSound = Sound( "WeaponFrag.Throw" )
hitSound = Sound( "Flesh.ImpactHard" )
CurTime = CurTime
SERVER = SERVER

SWEP.Initialize = =>
    @SetHoldType( "normal" )

SWEP.SetupDataTables = =>
    @NetworkVar( "Float", 0, "NextMeleeAttack" )
    @NetworkVar( "Float", 1, "NextIdle" )
    @NetworkVar( "Int", 2, "Combo" )

SWEP.GetViewModel = =>
    return @GetOwner!\GetViewModel!

SWEP.PlaySequence = ( sequenceName, onFinish ) =>
    @SequenceFinished = false

    ply = @GetOwner!
    vm = ply\GetViewModel!

    seqid = vm\LookupSequence( sequenceName )
    unless seqid and seqid > 0
        return

    vm\SendViewModelMatchingSequence( seqid )

    duration = vm\SequenceDuration( seqid ) / vm\GetPlaybackRate!
    nextSequence = CurTime! + duration

    timer.Simple( duration, ->
        unless @IsValid!
            return

        if @GetOwner! ~= ply
            return

        @SequenceFinished = true

        unless onFinish
            return

        onFinish( ply, vm )
    )

    return nextSequence, duration

SWEP.SetNextFire = ( curTime ) =>
    @SetNextPrimaryFire( curTime )
    @SetNextSecondaryFire( curTime )

SWEP.UseDoor = ( open ) =>
    if CLIENT
        return

    curTime, lastDoorLock = CurTime!, @LastDoorLock or 0
    @LastDoorLock = curTime

    if curTime - lastDoorLock <= 0.025
        return

    owner = @GetOwner!
    start = owner\GetShootPos!
    traceResult = util.TraceLine( {
        start: start
        endpos: start + owner\GetAimVector! * 64
        filter: owner
    } )

    unless traceResult.Hit
        return

    entity = traceResult.Entity
    unless IsValid( entity )
        return

    className = entity\GetClass!
    if className == "prop_door_rotating"
        if owner\Team! ~= TEAM_GUARD
            entity\EmitSound( "physics/wood/wood_crate_impact_hard2.wav", 100, math.random( 90, 110 ), 1, CHAN_STATIC, 0, 1 )
            return

        owner\EmitSound( "npc/metropolice/gear" .. math.random( 1, 6 ) .. ".wav", 50, math.random( 80, 120 ), 1, CHAN_STATIC, 0, 1 )
        timer.Simple 0.8, ->
            unless entity\IsValid!
                return
            entity\EmitSound( "doors/door_latch3.wav", 50, math.random( 80, 120 ), 1, CHAN_STATIC, 0, 1 )
        entity\Fire( open and "unlock" or "lock", "", 0 )
        owner\AnimRestartGesture( GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_GMOD_GESTURE_ITEM_PLACE, true )
    elseif className == "func_button"
        entity\EmitSound( "buttons/blip1.wav", 70, math.random( 90, 110 ), 1, CHAN_STATIC, 0, 1 )
        entity\Use( owner, owner )

SWEP.PrimaryAttack = ( right ) =>
    if @GetHoldType! == "normal"
        @UseDoor( false )
        return

    if @GetNextIdle! == 0
        return

    if @Pulls
        return

    owner = @GetOwner!
    owner\SetAnimation( PLAYER_ATTACK1 )
    owner\EmitSound( swingSound, 50, math.random( 80, 120 ), 1, CHAN_STATIC, 0, 1 )

    anim = "fists_left"
    if right
        anim = "fists_right"

    combo = @GetCombo!
    if combo >= 2
        anim = "fists_uppercut"

    seqFinish, delay = @PlaySequence( anim )
    @SetNextFire( seqFinish )
    @SetNextIdle( seqFinish )

    @SetNextMeleeAttack( CurTime! + ( delay / 4 ) / math.max( combo, 1 ) )

SWEP.SecondaryAttack = =>
    if @GetHoldType! ~= "normal"
        @PrimaryAttack( true )
    else
        @UseDoor( true )

phys_pushscale = GetConVar( "phys_pushscale" )
SERVER = SERVER

SWEP.DealDamage = =>
    owner = @GetOwner!
    anim = @GetSequenceName( owner\GetViewModel!\GetSequence! )
    owner\LagCompensation( true )

    start = owner\GetShootPos!
    traceResult = util.TraceLine( {
        start: start
        endpos: start + owner\GetAimVector! * @HitDistance
        filter: owner
        mask: MASK_SHOT_HULL
    } )

    unless IsValid( traceResult.Entity )
        traceResult = util.TraceHull( {
            start: start
            endpos: start + owner\GetAimVector! * @HitDistance
            filter: owner
            mins: Vector( -10, -10, -8 )
            maxs: Vector( 10, 10, 8 )
            mask: MASK_SHOT_HULL
        } )

    -- We need the second part for single player because SWEP:Think is ran shared in SP
    if traceResult.Hit and not ( game.SinglePlayer! and CLIENT )
        @EmitSound( hitSound, 70, math.random( 80, 120 ), 1, CHAN_BODY, 0, 1 )

    entity = traceResult.Entity
    if SERVER
        hit = false
        if IsValid( entity )
            scale = phys_pushscale\GetFloat!
            if ( entity\IsNPC! or entity\IsPlayer! or entity\Health! > 0 )
                damageInfo = DamageInfo!

                attacker = owner
                unless IsValid( attacker )
                    attacker = @

                damageInfo\SetAttacker( attacker )
                damageInfo\SetInflictor( @ )
                damageInfo\SetDamage( math.random( 8, 12 ) )
                damageInfo\SetDamageType( DMG_SLASH )

                if anim == "fists_left"
                    damageInfo\SetDamageForce( owner\GetRight! * 4912 * scale + owner\GetForward! * 9998 * scale ) -- Yes we need those specific numbers
                elseif anim == "fists_right"
                    damageInfo\SetDamageForce( owner\GetRight! * -4912 * scale + owner\GetForward! * 9989 * scale )
                elseif anim == "fists_uppercut"
                    damageInfo\SetDamageForce( owner\GetUp! * 5158 * scale + owner\GetForward! * 10012 * scale )
                    damageInfo\SetDamage( math.random( 12, 24 ) )

                SuppressHostEvents( NULL ) -- Let the breakable gibs spawn in multiplayer on client
                entity\TakeDamageInfo( damageInfo )
                SuppressHostEvents( owner )
                hit = true

            phys = entity\GetPhysicsObject!
            if IsValid( phys )
                phys\ApplyForceOffset( owner\GetAimVector! * 80 * phys\GetMass! * scale, traceResult.HitPos )

        if hit and anim ~= "fists_uppercut"
            @SetCombo( @GetCombo! + 1 )
        else
            @SetCombo( 0 )

    owner\LagCompensation( false )

SWEP.OnDrop = =>
    @Remove!

SWEP.Show = =>
    @GetViewModel!\SetNoDraw( false )
    @SetHoldType( "fist" )
    @Pulls = true

    @SetNextIdle( @PlaySequence( "fists_draw", ->
        @Pulls = false
    ) )

SWEP.Hide = =>
    @Pulls = true
    @SetNextIdle( 0 )
    @SetHoldType( "normal" )
    @PlaySequence( "fists_holster", ( _, vm ) ->
        vm\SetNoDraw( true )
        @Pulls = false
    )

SWEP.Deploy = =>
    @SetNextFire( CurTime! + 1.5 )
    @SetNextMeleeAttack( 0 )
    @SetNextIdle( 0 )

    if @GetHoldType! == "normal"
        @GetViewModel!\SetNoDraw( true )
    else
        @Show!

    if SERVER
        @SetCombo( 0 )

    return true

SWEP.Holster = ( weapon ) =>
    @SetNextMeleeAttack( 0 )
    @SetNextIdle( 0 )
    return true

SWEP.Think = =>
    if @GetHoldType! ~= "fist"
        return

    if @Pulls
        return

    curTime = CurTime!

    idletime = @GetNextIdle!
    if idletime > 0 and curTime > idletime
        @SetNextIdle( @PlaySequence( "fists_idle_0" .. math.random( 1, 2 ) ) )

    meleetime = @GetNextMeleeAttack!
    if meleetime > 0 and curTime > meleetime
        @SetNextMeleeAttack( 0 )
        @DealDamage!

    if SERVER and curTime > @GetNextPrimaryFire! + 0.1
        @SetCombo( 0 )

SWEP.Reload = =>
    curTime, lastReload = CurTime!, @LastReload or 0
    @LastReload = curTime

    if curTime - lastReload <= 0.025
        return

    if @Pulls
        return

    if @GetHoldType! == "normal"
        @Show!
    else
        @Hide!
