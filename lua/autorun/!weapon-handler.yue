vector_origin = vector_origin
LocalToWorld = LocalToWorld
angle_zero = angle_zero
:Register = weapons
isstring = isstring
isvector = isvector
isangle = isangle
istable = istable
SERVER = SERVER
assert = assert
:Create = ents
:Set = list

Handlers = WeaponHandlers
unless istable Handlers
    Handlers = {}
    global WeaponHandlers = Handlers

TemporaryWeapon = {
    WorldModel: "models/weapons/w_smg1.mdl"
    ViewModel: "models/weapons/c_smg1.mdl"
    IsTemporaryWeapon: true
    Base: "weapon_base"
    Spawnable: false
}

if SERVER

    TemporaryWeapon.Deploy = =>
        @Remove!
        return false

    TemporaryWeapon.Initialize = =>
        handler = Handlers[ @GetClass! ]
        unless handler
            @Remove!
            return

        className = handler.Alternative

        spawnOffsets = handler.SpawnOffsets
        if istable spawnOffsets
            spawnOffsets = spawnOffsets[ className ]
            unless istable spawnOffsets
                spawnOffsets = nil
        else
            spawnOffsets = nil

        timer.Simple 0, ->
            unless @IsValid! and not @GetOwner!\IsValid!
                return

            entity = Create( className )
            unless entity\IsValid!
                return

            origin, angles = @GetPos!, @GetAngles!
            if spawnOffsets ~= nil
                origin, angles = LocalToWorld( spawnOffsets[ 1 ], spawnOffsets[ 2 ], origin, angles )

            entity\SetPos( origin )
            entity\SetAngles( angles )

            entity\AddFlags( @GetFlags! )
            entity\AddEFlags( @GetEFlags! )
            entity\AddSolidFlags( @GetSolidFlags! )

            entity\Spawn!
            entity\Activate!

            entity\SetCollisionGroup( @GetCollisionGroup! )
            entity\SetMoveType( @GetMoveType! )
            entity\SetNoDraw( @GetNoDraw! )
            entity\SetColor( @GetColor! )

            oldPhys, newPhys = @GetPhysicsObject!, entity\GetPhysicsObject!
            if oldPhys and oldPhys\IsValid! and newPhys and newPhys\IsValid!
                newPhys\EnableMotion( oldPhys\IsMotionEnabled! )
                newPhys\SetVelocity( oldPhys\GetVelocity! )

                if oldPhys\IsAsleep!
                    newPhys\Sleep!
                else
                    newPhys\Wake!

            @SetParent( entity )
            @SetNotSolid( true )

    TemporaryWeapon.Equip = ( owner ) =>
        weapon = @GetParent!
        if weapon\IsValid! and weapon\IsWeapon!
            owner\PickupWeapon( weapon, false )
        @Remove!

    TemporaryWeapon.OnRemove = =>
        parent = @GetParent!
        if parent\IsValid! and not parent\GetOwner!\IsValid!
            parent\Remove!

if CLIENT

    TemporaryWeapon.DrawWorldModel = ->

    TemporaryWeapon.Deploy = =>
        return false

global class WeaponHandler
    Weapons: list.GetForEdit( "Weapon" )

    Exists: ( className ) =>
        return istable @Weapons[ className ]

    new: ( className, alternative, spawnOffsets, force ) =>
        assert isstring( className ), "Second argument must be a 'string'!"
        Handlers[ className ] = @
        @ClassName = className

        @Registered = @Exists( className ) and not force
        if @Registered
            return

        if isstring alternative
            @AddAlternative( alternative )
        elseif istable alternative
            @AddAlternatives( alternative )

        if istable spawnOffsets
            @SpawnOffsets = spawnOffsets
        else
            @SpawnOffsets = {}

    GetClassSpawnOffsets: ( className ) =>
        return @SpawnOffsets[ className ]

    SetClassSpawnOffsets: ( className, vector, angles ) =>
        unless isvector vector
            vector = vector_origin

        unless isangle angles
            angles = angle_zero

        @SpawnOffsets[ className ] = { vector, angles }

    SetClassSpawnOffsets: ( value ) =>
        assert istable( value ), "Second argument must be a 'table'!"
        @SpawnOffsets = value

    Register: =>
        unless @Registered
            className = @ClassName
            Register( TemporaryWeapon, className )
            Set( "Weapon", className, nil )
            @Registered = true

    AddAlternative: ( className ) =>
        if not @Registered and @Exists( className )
            @Alternative = className
            @Register!

    AddAlternatives: ( alternatives ) =>
        assert istable( alternatives ), "Second argument must be a 'table'!"
        for className in *alternatives
            if @Registered
                break

            @AddAlternative( className )

if SERVER

    hook.Add "PlayerCanPickupWeapon", "WeaponHandler::Block temporary weapon pickup", ( weapon ) =>
        if weapon.IsTemporaryWeapon
            return false

    hook.Add "AllowPlayerPickup", "WeaponHandler::Block temporary weapon pickup", ( weapon ) =>
        if weapon.IsTemporaryWeapon
            return false

    hook.Add "WeaponEquip", "WeaponHandler::Remove temporary weapon on real weapon pickup", ( owner ) =>
        if @IsTemporaryWeapon
            return

        for weapon in *@GetChildren!
            if weapon\IsValid! and weapon.IsTemporaryWeapon
                weapon\Remove!
