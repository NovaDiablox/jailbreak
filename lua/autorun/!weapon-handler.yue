:GetStored, :Register = weapons
isstring = isstring
IsValid = IsValid
istable = istable
ipairs = ipairs
SERVER = SERVER
assert = assert
:Create = ents
:Set = list

global class WeaponHandler
    Weapons: list.GetForEdit( "Weapon" )
    new: ( className, alternative ) =>
        assert isstring( className ), "Second argument must be a 'string'!"
        @Registered = @Exists( className )
        @ClassName = className
        if @Registered
            return

        if isstring( alternative )
            @AddAlternative( alternative )
        elseif istable( alternative )
            @AddAlternatives( alternative )

    Register: ( metatable ) =>
        if @Registered
            return

        unless istable( metatable )
            error( "Weapon '#{@ClassName}' handling failed, reason: requested analogs missing." )
            return

        className = @ClassName
        Register( metatable, className )
        Set( "Weapon", className, nil )
        @Registered = true

    GetWeaponInfo: ( className ) =>
        return @Weapons[ className ]

    Exists: ( className ) =>
        return istable( @GetWeaponInfo( className ) )

    AddAlternative: ( className ) =>
        if @Registered
            return

        assert isstring( className ), "Second argument must be a 'string'!"

        info = @GetWeaponInfo( className )
        unless istable( info )
            return

        metatable = GetStored( className )
        unless istable( metatable )
            metatable = {
                PrintName: info.PrintName
                BaseClassName: className
                Author: info.Author
                Spawnable: false
            }

            if SERVER

                metatable.Initialize = () =>
                    owner = @GetOwner!
                    if IsValid( owner )
                        owner\Give( className )
                        return

                    entity = Create( className )
                    if entity and entity\IsValid!
                        entity\SetPos( @GetPos! )
                        entity\SetAngles( @GetAngles! )
                        entity\Spawn!
                        entity\Activate!

                        entity\SetCollisionGroup( @GetCollisionGroup! )
                        entity\SetMoveType( @GetMoveType! )
                        entity\SetNoDraw( @GetNoDraw! )
                        entity\SetColor( @GetColor! )

                        newPhys = entity\GetPhysicsObject!
                        if newPhys and newPhys\IsValid!
                            oldPhys = @GetPhysicsObject!
                            if oldPhys and oldPhys\IsValid!
                                newPhys\EnableCollisions( oldPhys\IsCollisionEnabled! )
                                newPhys\EnableMotion( oldPhys\IsMotionEnabled! )
                                newPhys\EnableDrag( oldPhys\IsDragEnabled! )
                                newPhys\SetMass( oldPhys\GetMass! )

                                if oldPhys\IsAsleep!
                                    newPhys\Sleep!
                                else
                                    newPhys\Wake!

                                newPhys\SetVelocity( oldPhys\GetVelocity! )
                            else
                                newPhys\Sleep!

                    @Remove!

                metatable.Deploy = () =>
                    owner = @GetOwner!
                    unless owner and owner\IsValid!
                        return

                    if owner\IsPlayer! and not owner\Alive!
                        return

                    owner\Give( className )
                    owner\SelectWeapon( className )
                    owner\StripWeapon( @GetClass! )
                    return true

                metatable.Holster = () =>
                    @Remove!
                    return true

        @Register( metatable )

    AddAlternatives: ( alternatives ) =>
        assert istable( alternatives ), "Second argument must be a 'table'!"
        for _, className in ipairs( alternatives )
            @AddAlternative( className )