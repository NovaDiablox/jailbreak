weapons_Register = weapons.Register
vector_origin = vector_origin
angle_zero = angle_zero
isstring = isstring
isvector = isvector
isangle = isangle
IsValid = IsValid
istable = istable
ipairs = ipairs
SERVER = SERVER
assert = assert
:Create = ents
:Set = list

global class WeaponHandler
    Weapons: list.GetForEdit( "Weapon" )
    new: ( className, alternative, offsets, force ) =>
        assert isstring( className ), "Second argument must be a 'string'!"
        @Registered = @Exists( className ) and not force
        @ClassName = className
        if @Registered
            return

        if istable( offsets )
            @Offsets = offsets
        else
            @Offsets = {}
        if isstring( alternative )
            @AddAlternative( alternative )
        elseif istable( alternative )
            @AddAlternatives( alternative )

    GetClassOffset: ( className ) =>
        return @Offsets[ className ]

    SetClassOffset: ( className, vector, angles ) =>
        unless isvector( vector )
            vector = vector_origin

        unless isangle( angles )
            angles = angle_zero

        @Offsets[ className ] = { vector, angles }

    SetClassOffsets: ( tbl ) =>
        assert istable( tbl ), "Second argument must be a 'table'!"
        @Offsets = tbl

    Register: ( metatable ) =>
        if @Registered
            return

        unless istable( metatable )
            error( "Weapon '#{@ClassName}' handling failed, reason: requested analogs missing." )
            return

        className = @ClassName
        weapons_Register( metatable, className )
        Set( "Weapon", className, nil )
        @Registered = true

    GetWeaponInfo: ( className ) =>
        return @Weapons[ className ]

    Exists: ( className ) =>
        return istable( @GetWeaponInfo( className ) )

    AddAlternative: ( className ) =>
        if @Registered
            return

        assert isstring( className ), "Second argument must be a 'string'!"

        info = @GetWeaponInfo( className )
        unless istable( info )
            return

        metatable = {
            WeaponHandlerOffset: @Offsets[ className ]
            PrintName: info.PrintName
            BaseClassName: className
            Author: info.Author
            Spawnable: false
        }

        if SERVER

            metatable.Initialize = () =>
                owner = @GetOwner!
                if IsValid( owner )
                    owner\Give( className )
                    return

                entity = Create( className )
                if entity and entity\IsValid!
                    origin, angles = @GetPos!, @GetAngles!

                    offsetData = @WeaponHandlerOffset
                    if istable( offsetData )
                        origin, angles = LocalToWorld( offsetData[ 1 ], offsetData[ 2 ], origin, angles )

                    entity\SetPos( origin )
                    entity\SetAngles( angles )
                    entity\Spawn!
                    entity\Activate!

                    entity\SetCollisionGroup( @GetCollisionGroup! )
                    entity\SetMoveType( @GetMoveType! )
                    entity\SetNoDraw( @GetNoDraw! )
                    entity\SetColor( @GetColor! )

                    newPhys = entity\GetPhysicsObject!
                    if newPhys and newPhys\IsValid!
                        oldPhys = @GetPhysicsObject!
                        if oldPhys and oldPhys\IsValid!
                            newPhys\EnableCollisions( oldPhys\IsCollisionEnabled! )
                            newPhys\EnableMotion( oldPhys\IsMotionEnabled! )
                            newPhys\EnableDrag( oldPhys\IsDragEnabled! )
                            newPhys\SetMass( oldPhys\GetMass! )

                            if oldPhys\IsAsleep!
                                newPhys\Sleep!
                            else
                                newPhys\Wake!

                            newPhys\SetVelocity( oldPhys\GetVelocity! )
                        else
                            newPhys\Sleep!

                @Remove!

            metatable.Deploy = () =>
                owner = @GetOwner!
                unless owner and owner\IsValid!
                    return

                if owner\IsPlayer! and not owner\Alive!
                    return

                owner\Give( className )
                owner\SelectWeapon( className )
                owner\StripWeapon( @GetClass! )
                return true

            metatable.Holster = () =>
                @Remove!
                return true

        @Register( metatable )

    AddAlternatives: ( alternatives ) =>
        assert istable( alternatives ), "Second argument must be a 'table'!"
        for _, className in ipairs( alternatives )
            @AddAlternative( className )