import sub, match, Split from string
import KeyValuesToTable from util
import AsyncRead, Find from file
FSASYNC_OK = FSASYNC_OK
import Add from sound
IsMounted = IsMounted
isstring = isstring
isnumber = isnumber
tonumber = tonumber
pairs = pairs

mapName = game.GetMap!
mapNameShort = match( mapName, "^%w+_(%w+)_?" )

channels = {
    CHAN_REPLACE: -1
    CHAN_AUTO: 0
    CHAN_WEAPON: 1
    CHAN_VOICE: 2
    CHAN_ITEM: 3
    CHAN_BODY: 4
    CHAN_STREAM: 5
    CHAN_STATIC: 6
    CHAN_VOICE2: 7
    CHAN_VOICE_BASE: 8
    CHAN_USER_BASE: 136
}

pitchs = {
    PITCH_NORM: 100
    PITCH_LOW: 95
    PITCH_HIGH: 120
}

soundLevels = {
    SNDLVL_NONE: 0
    SNDLVL_25dB: 25
    SNDLVL_30dB: 30
    SNDLVL_35dB: 35
    SNDLVL_40dB: 40
    SNDLVL_45dB: 45
    SNDLVL_50dB: 50
    SNDLVL_55dB: 55
    SNDLVL_IDLE: 60
    SNDLVL_TALKING: 60
    SNDLVL_60dB: 60
    SNDLVL_65dB: 65
    SNDLVL_STATIC: 66
    SNDLVL_70dB: 70
    SNDLVL_NORM: 75
    SNDLVL_75dB: 75
    SNDLVL_80dB: 80
    SNDLVL_85dB: 85
    SNDLVL_90dB: 90
    SNDLVL_95dB: 95
    SNDLVL_100dB: 100
    SNDLVL_105dB: 105
    SNDLVL_120dB: 120
    SNDLVL_130dB: 130
    SNDLVL_GUNFIRE: 140
    SNDLVL_140dB: 140
    SNDLVL_150dB: 150
}

global class SoundHandler
    MapName: mapName
    MapNameShort: mapNameShort

    SoundLevels: soundLevels
    Channels: channels
    Pitchs: pitchs

    new: ( gameName ) =>
        unless IsMounted( gameName )
            return

        for fileName in *Find( "scripts/soundscapes_*.txt", gameName )
            mapNameIdent = sub( fileName, 13 )
            mapNameIdent = sub( mapNameIdent, 1, #mapNameIdent - 4 )
            if mapNameIdent == mapName or mapNameIdent == mapNameShort
                AsyncRead "scripts/" .. fileName, gameName, ( _, __, status, content ) ->
                    if status == FSASYNC_OK
                        @Perform( "File\n{" .. content .. "}" )
                        return

        for fileName in *Find( "scripts/game_sounds*.txt", gameName )
            AsyncRead "scripts/" .. fileName, gameName, ( _, __, status, content ) ->
                if status == FSASYNC_OK
                    @Perform( "File\n{" .. content .. "}" )
                    return

    Perform: ( content ) =>
        sounds = KeyValuesToTable( content )
        unless sounds
            return

        for name, data in pairs( sounds )
            soundData = {
                :name
                channel: channels[ data.channel or "CHAN_AUTO" ] or 0
                volume: tonumber( data.volume or 1 ) or 1
                level: soundLevels[ data.soundlevel or "SNDLVL_NORM" ] or 75
                sound: data.wave
                pitch: 100
            }

            :rndwave = data
            if rndwave
                tbl, len = {}, 0
                for _, value in pairs( rndwave )
                    len += 1
                    tbl[ len ] = value

                soundData.sound = tbl

            :pitch = data
            if pitch
                if isstring( pitch )
                    common = pitchs[ pitch ]
                    if common
                        soundData.pitch = common
                    else
                        pitch = Split( pitch, "," )
                        soundData.pitch = pitch

                        for index = 1, #pitch
                            pitch[ index ] = tonumber( pitch[ index ] )

                elseif isnumber( pitch )
                    soundData.pitch = pitch

            Add( soundData )
