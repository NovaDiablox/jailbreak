:Create, :Iterator = ents
isfunction = isfunction
:Add, :Remove = hook
isstring = isstring
IsValid = IsValid
:Simple = timer
assert = assert
:find = string

global class EntityReplacer
    new: ( pattern, className, filter, init ) =>
        assert isstring( pattern ), "Second argument must be a 'string'!"
        @Pattern = pattern

        assert isstring( className ), "Third argument must be a 'string'!"
        @ClassName = className

        if isfunction( filter )
            @Filter = filter

        if isfunction( init )
            @Init = init

        Add "PostCleanupMap", "EntityReplacer::" .. className, ->
            @PerformAll!

        Add "OnEntityCreated", "EntityReplacer::" .. className, ( entity ) ->
            Simple 0.25, ->
                if entity\IsValid!
                    @Perform( entity )

    Perform: ( entity ) =>
        unless entity\IsValid! and find( entity\GetClass!, @Pattern, 1, false ) ~= nil
            return

        filter = @Filter
        if filter ~= nil and not filter( entity, @ )
            return

        newEntity = Create( @ClassName )
        unless IsValid( newEntity )
            return

        newEntity\SetPos( entity\WorldSpaceCenter! )
        newEntity\SetAngles( entity\GetAngles! )

        init = @Init
        if init ~= nil
            init( newEntity, entity, @ )

        newEntity\Spawn!

        for bodygroup in *entity\GetBodyGroups!
            newEntity\SetBodygroup( bodygroup.id, entity\GetBodygroup( bodygroup.id ) )

        newEntity\SetFlexScale( entity\GetFlexScale! )
        for flexID = 0, entity\GetFlexNum!
            newEntity\SetFlexWeight( flexID, entity\GetFlexWeight( flexID ) )

        newEntity\SetPlayerColor( entity\GetPlayerColor! )
        newEntity\SetMaterial( entity\GetMaterial! )
        newEntity\SetColor( entity\GetColor! )
        newEntity\SetSkin( entity\GetSkin! )

        for index = 1, #entity\GetMaterials!
            materialPath = entity\GetSubMaterial( index )
            if materialPath ~= ""
                newEntity\SetSubMaterial( index, materialPath )

        newEntity\SetCollisionGroup( entity\GetCollisionGroup! )

        for bone = 0, entity\GetBoneCount! - 1
            newEntity\ManipulateBonePosition( bone, entity\GetManipulateBonePosition( bone ) )
            newEntity\ManipulateBoneAngles( bone, entity\GetManipulateBoneAngles( bone ) )
            newEntity\ManipulateBoneJiggle( bone, entity\GetManipulateBoneJiggle( bone ) )
            newEntity\ManipulateBoneScale( bone, entity\GetManipulateBoneScale( bone ) )

        if newEntity\IsRagdoll!
            for physNum = 0, newEntity\GetPhysicsObjectCount! - 1 do
                phys = newEntity\GetPhysicsObjectNum( physNum )
                unless IsValid( phys )
                    continue

                bone = newEntity\TranslatePhysBoneToBone( physNum )
                if bone and bone >= 0
                    origin, angles = entity\GetBonePosition( bone )
                    phys\SetAngles( angles )
                    phys\SetPos( origin )

                phys2 = entity\GetPhysicsObjectNum( physNum )
                if IsValid( phys2 )
                    phys\SetVelocity( phys2\GetVelocity! )

                    if phys2\IsAsleep!
                        phys\Sleep!
                    else
                        phys\Wake!

        else

            phys, phys2 = newEntity\GetPhysicsObject!, entity\GetPhysicsObject!
            if IsValid( phys ) and IsValid( phys2 )
                phys\SetVelocity( phys2\GetVelocity! )

                if phys2\IsAsleep!
                    phys\Sleep!
                else
                    phys\Wake!

        entity\Remove!

    PerformAll: =>
        for _, entity in Iterator!
            @Perform( entity )

    Remove: =>
        className = @ClassName
        Remove "OnEntityCreated", "EntityReplacer::" .. className
        Remove "PostCleanupMap", "EntityReplacer::" .. className
